// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src/prelude.isle
// - src/prelude_lower.isle
// - src/isa/riscv64/inst.isle
// - src/isa/riscv64/inst_vector.isle
// - src/isa/riscv64/lower.isle
// - /Users/talzisckind/Downloads/vm-parallel-process-7/execution/target/debug/build/cranelift-codegen-e319a1d34e89b0d4/out/clif_lower.isle

use super::*; // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self) -> Unit;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> i32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn simm32(&mut self, arg0: Imm64) -> Option<i32>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn u8_as_i8(&mut self, arg0: u8) -> i8;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i32_as_i64(&mut self, arg0: i32) -> i64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn i64_neg(&mut self, arg0: i64) -> i64;
    fn u128_as_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_as_u32(&mut self, arg0: u64) -> Option<u32>;
    fn u64_as_i32(&mut self, arg0: u64) -> i32;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shl(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shr(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_sub(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_sub(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_and(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: i32, arg1: i32) -> Option<i32>;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sdiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_shl(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_le(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_lt(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_shr(&mut self, arg0: i64, arg1: i64) -> i64;
    fn i64_ctz(&mut self, arg0: i64) -> i64;
    fn i64_sextend_u64(&mut self, arg0: Type, arg1: u64) -> i64;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn u128_replicated_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_replicated_u32(&mut self, arg0: u64) -> Option<u64>;
    fn u32_replicated_u16(&mut self, arg0: u64) -> Option<u64>;
    fn u16_replicated_u8(&mut self, arg0: u64) -> Option<u8>;
    fn ty_umin(&mut self, arg0: Type) -> u64;
    fn ty_umax(&mut self, arg0: Type) -> u64;
    fn ty_smin(&mut self, arg0: Type) -> u64;
    fn ty_smax(&mut self, arg0: Type) -> u64;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_count(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn ty_half_lanes(&mut self, arg0: Type) -> Option<Type>;
    fn ty_half_width(&mut self, arg0: Type) -> Option<Type>;
    fn ty_equal(&mut self, arg0: Type, arg1: Type) -> bool;
    fn mem_flags_trusted(&mut self) -> MemFlags;
    fn intcc_swap_args(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_complement(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_without_eq(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_swap_args(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_complement(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64_extract(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_16_to_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_addr64(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u32_from_ieee32(&mut self, arg0: Ieee32) -> u32;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_int_lane(&mut self, arg0: Type) -> Option<u32>;
    fn dynamic_fp_lane(&mut self, arg0: Type) -> Option<u32>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_i32(&mut self, arg0: Offset32) -> i32;
    fn i32_to_offset32(&mut self, arg0: i32) -> Offset32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self) -> TrapCode;
    fn trap_code_integer_overflow(&mut self) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    fn value_reg(&mut self, arg0: Reg) -> ValueRegs;
    fn writable_value_reg(&mut self, arg0: WritableReg) -> WritableValueRegs;
    fn value_regs(&mut self, arg0: Reg, arg1: Reg) -> ValueRegs;
    fn writable_value_regs(&mut self, arg0: WritableReg, arg1: WritableReg) -> WritableValueRegs;
    fn value_regs_invalid(&mut self) -> ValueRegs;
    fn output_none(&mut self) -> InstOutput;
    fn output(&mut self, arg0: ValueRegs) -> InstOutput;
    fn output_pair(&mut self, arg0: ValueRegs, arg1: ValueRegs) -> InstOutput;
    fn output_builder_new(&mut self) -> InstOutputBuilder;
    fn output_builder_push(&mut self, arg0: &InstOutputBuilder, arg1: ValueRegs) -> Unit;
    fn output_builder_finish(&mut self, arg0: &InstOutputBuilder) -> InstOutput;
    fn temp_writable_reg(&mut self, arg0: Type) -> WritableReg;
    fn is_valid_reg(&mut self, arg0: Reg) -> bool;
    fn invalid_reg(&mut self) -> Reg;
    fn mark_value_used(&mut self, arg0: Value) -> Unit;
    fn put_in_reg(&mut self, arg0: Value) -> Reg;
    fn put_in_regs(&mut self, arg0: Value) -> ValueRegs;
    fn ensure_in_vreg(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn value_regs_get(&mut self, arg0: ValueRegs, arg1: usize) -> Reg;
    fn value_regs_len(&mut self, arg0: ValueRegs) -> usize;
    fn preg_to_reg(&mut self, arg0: PReg) -> Reg;
    fn single_target(&mut self, arg0: &MachLabelSlice) -> Option<MachLabel>;
    fn two_targets(&mut self, arg0: &MachLabelSlice) -> Option<(MachLabel, MachLabel)>;
    fn jump_table_targets(&mut self, arg0: &MachLabelSlice)
        -> Option<(MachLabel, BoxVecMachLabel)>;
    fn jump_table_size(&mut self, arg0: &BoxVecMachLabel) -> u32;
    fn value_list_slice(&mut self, arg0: ValueList) -> ValueSlice;
    fn value_slice_empty(&mut self, arg0: ValueSlice) -> Option<()>;
    fn value_slice_unwrap(&mut self, arg0: ValueSlice) -> Option<(Value, ValueSlice)>;
    fn value_slice_len(&mut self, arg0: ValueSlice) -> usize;
    fn value_slice_get(&mut self, arg0: ValueSlice, arg1: usize) -> Value;
    fn writable_reg_to_reg(&mut self, arg0: WritableReg) -> Reg;
    fn inst_results(&mut self, arg0: Inst) -> ValueSlice;
    fn first_result(&mut self, arg0: Inst) -> Option<Value>;
    fn inst_data(&mut self, arg0: Inst) -> InstructionData;
    fn def_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn i64_from_iconst(&mut self, arg0: Value) -> Option<i64>;
    fn zero_value(&mut self, arg0: Value) -> Option<Value>;
    fn is_sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn maybe_uextend(&mut self, arg0: Value) -> Option<Value>;
    fn emit(&mut self, arg0: &MInst) -> Unit;
    fn sink_inst(&mut self, arg0: Inst) -> Unit;
    fn emit_u64_le_const(&mut self, arg0: u64) -> VCodeConstant;
    fn emit_u128_le_const(&mut self, arg0: u128) -> VCodeConstant;
    fn const_to_vconst(&mut self, arg0: Constant) -> VCodeConstant;
    fn tls_model(&mut self, arg0: Type) -> TlsModel;
    fn tls_model_is_elf_gd(&mut self) -> Option<Unit>;
    fn tls_model_is_macho(&mut self) -> Option<Unit>;
    fn tls_model_is_coff(&mut self) -> Option<Unit>;
    fn preserve_frame_pointers(&mut self) -> Option<Unit>;
    fn box_external_name(&mut self, arg0: ExternalName) -> BoxExternalName;
    fn func_ref_data(&mut self, arg0: FuncRef) -> (SigRef, ExternalName, RelocDistance);
    fn symbol_value_data(
        &mut self,
        arg0: GlobalValue,
    ) -> Option<(ExternalName, RelocDistance, i64)>;
    fn reloc_distance_near(&mut self, arg0: RelocDistance) -> Option<()>;
    fn vec_mask_from_immediate(&mut self, arg0: Immediate) -> Option<VecMask>;
    fn u128_from_immediate(&mut self, arg0: Immediate) -> Option<u128>;
    fn vconst_from_immediate(&mut self, arg0: Immediate) -> Option<VCodeConstant>;
    fn u128_from_constant(&mut self, arg0: Constant) -> Option<u128>;
    fn u64_from_constant(&mut self, arg0: Constant) -> Option<u64>;
    fn shuffle64_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8)>;
    fn shuffle32_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8)>;
    fn shuffle16_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8, u8, u8, u8, u8)>;
    fn only_writable_reg(&mut self, arg0: WritableValueRegs) -> Option<WritableReg>;
    fn writable_regs_get(&mut self, arg0: WritableValueRegs, arg1: usize) -> WritableReg;
    fn abi_num_args(&mut self, arg0: Sig) -> usize;
    fn abi_get_arg(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_num_rets(&mut self, arg0: Sig) -> usize;
    fn abi_get_ret(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_ret_arg(&mut self, arg0: Sig) -> Option<ABIArg>;
    fn abi_no_ret_arg(&mut self, arg0: Sig) -> Option<()>;
    fn abi_sized_stack_arg_space(&mut self, arg0: Sig) -> i64;
    fn abi_sized_stack_ret_space(&mut self, arg0: Sig) -> i64;
    fn abi_stackslot_addr(&mut self, arg0: WritableReg, arg1: StackSlot, arg2: Offset32) -> MInst;
    fn abi_dynamic_stackslot_addr(&mut self, arg0: WritableReg, arg1: DynamicStackSlot) -> MInst;
    fn abi_arg_only_slot(&mut self, arg0: &ABIArg) -> Option<ABIArgSlot>;
    fn abi_arg_struct_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, u64)>;
    fn abi_arg_implicit_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, Type)>;
    fn real_reg_to_reg(&mut self, arg0: RealReg) -> Reg;
    fn real_reg_to_writable_reg(&mut self, arg0: RealReg) -> WritableReg;
    fn gen_move(&mut self, arg0: Type, arg1: WritableReg, arg2: Reg) -> MInst;
    fn gen_return(&mut self, arg0: ValueSlice) -> Unit;
    fn gen_return_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_return_call_indirect(
        &mut self,
        arg0: SigRef,
        arg1: Value,
        arg2: ValueSlice,
    ) -> InstOutput;
    fn safe_divisor_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<u64>;
    fn frm_bits(&mut self, arg0: &FRM) -> UImm5;
    fn xreg_new(&mut self, arg0: Reg) -> XReg;
    fn writable_xreg_new(&mut self, arg0: WritableReg) -> WritableXReg;
    fn writable_xreg_to_xreg(&mut self, arg0: WritableXReg) -> XReg;
    fn writable_xreg_to_writable_reg(&mut self, arg0: WritableXReg) -> WritableReg;
    fn xreg_to_reg(&mut self, arg0: XReg) -> Reg;
    fn freg_new(&mut self, arg0: Reg) -> FReg;
    fn writable_freg_new(&mut self, arg0: WritableReg) -> WritableFReg;
    fn writable_freg_to_freg(&mut self, arg0: WritableFReg) -> FReg;
    fn writable_freg_to_writable_reg(&mut self, arg0: WritableFReg) -> WritableReg;
    fn freg_to_reg(&mut self, arg0: FReg) -> Reg;
    fn vreg_new(&mut self, arg0: Reg) -> VReg;
    fn writable_vreg_new(&mut self, arg0: WritableReg) -> WritableVReg;
    fn writable_vreg_to_vreg(&mut self, arg0: WritableVReg) -> VReg;
    fn writable_vreg_to_writable_reg(&mut self, arg0: WritableVReg) -> WritableReg;
    fn vreg_to_reg(&mut self, arg0: VReg) -> Reg;
    fn u8_as_i32(&mut self, arg0: u8) -> i32;
    fn has_m(&mut self) -> bool;
    fn has_v(&mut self) -> bool;
    fn has_zbkb(&mut self) -> bool;
    fn has_zba(&mut self) -> bool;
    fn has_zbb(&mut self) -> bool;
    fn has_zbc(&mut self) -> bool;
    fn has_zbs(&mut self) -> bool;
    fn i64_generate_imm(&mut self, arg0: i64) -> Option<(Imm20, Imm12)>;
    fn i64_shift_for_lui(&mut self, arg0: i64) -> Option<(u64, Imm12)>;
    fn i64_shift(&mut self, arg0: i64) -> Option<(i64, Imm12)>;
    fn imm12_const(&mut self, arg0: i32) -> Imm12;
    fn imm_from_bits(&mut self, arg0: u64) -> Imm12;
    fn imm_from_neg_bits(&mut self, arg0: i64) -> Imm12;
    fn imm12_const_add(&mut self, arg0: i32, arg1: i32) -> Imm12;
    fn imm12_and(&mut self, arg0: Imm12, arg1: u64) -> Imm12;
    fn imm12_from_u64(&mut self, arg0: u64) -> Option<Imm12>;
    fn imm12_from_i64(&mut self, arg0: i64) -> Option<Imm12>;
    fn imm12_is_zero(&mut self, arg0: Imm12) -> Option<()>;
    fn imm20_is_zero(&mut self, arg0: Imm20) -> Option<()>;
    fn imm20_from_u64(&mut self, arg0: u64) -> Option<Imm20>;
    fn imm20_from_i64(&mut self, arg0: i64) -> Option<Imm20>;
    fn imm5_from_u64(&mut self, arg0: u64) -> Option<Imm5>;
    fn imm5_from_i64(&mut self, arg0: i64) -> Option<Imm5>;
    fn i8_to_imm5(&mut self, arg0: i8) -> Option<Imm5>;
    fn uimm5_from_u8(&mut self, arg0: u8) -> Option<UImm5>;
    fn uimm5_from_u64(&mut self, arg0: u64) -> Option<UImm5>;
    fn uimm5_bitcast_to_imm5(&mut self, arg0: UImm5) -> Imm5;
    fn gen_default_frm(&mut self) -> OptionFloatRoundingMode;
    fn gen_shamt(&mut self, arg0: Type, arg1: XReg) -> ValueRegs;
    fn gen_reg_offset_amode(&mut self, arg0: Reg, arg1: i64, arg2: Type) -> AMode;
    fn gen_sp_offset_amode(&mut self, arg0: i64, arg1: Type) -> AMode;
    fn gen_fp_offset_amode(&mut self, arg0: i64, arg1: Type) -> AMode;
    fn gen_stack_slot_amode(&mut self, arg0: StackSlot, arg1: i64, arg2: Type) -> AMode;
    fn gen_const_amode(&mut self, arg0: VCodeConstant) -> AMode;
    fn valid_atomic_transaction(&mut self, arg0: Type) -> Option<Type>;
    fn atomic_amo(&mut self) -> AMO;
    fn gen_stack_addr(&mut self, arg0: StackSlot, arg1: Offset32) -> Reg;
    fn load_op(&mut self, arg0: Type) -> LoadOP;
    fn store_op(&mut self, arg0: Type) -> StoreOP;
    fn load_ext_name(&mut self, arg0: ExternalName, arg1: i64) -> Reg;
    fn int_zero_reg(&mut self, arg0: Type) -> ValueRegs;
    fn int_compare(&mut self, arg0: &IntCC, arg1: XReg, arg2: XReg) -> IntegerCompare;
    fn int_compare_decompose(&mut self, arg0: IntegerCompare) -> (IntCC, XReg, XReg);
    fn label_to_br_target(&mut self, arg0: MachLabel) -> CondBrTarget;
    fn lower_br_table(&mut self, arg0: Reg, arg1: &MachLabelSlice) -> Unit;
    fn load_ra(&mut self) -> Reg;
    fn gen_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_call_indirect(&mut self, arg0: SigRef, arg1: Value, arg2: ValueSlice) -> InstOutput;
    fn fp_reg(&mut self) -> PReg;
    fn sp_reg(&mut self) -> PReg;
    fn zero_reg(&mut self) -> Reg;
    fn writable_zero_reg(&mut self) -> WritableReg;
    fn vec_alu_rr_dst_type(&mut self, arg0: &VecAluOpRR) -> Type;
    fn vstate_from_type(&mut self, arg0: Type) -> VState;
    fn vstate_mf2(&mut self, arg0: VState) -> VState;
    fn min_vec_reg_size(&mut self) -> u64;
    fn ty_vec_fits_in_register(&mut self, arg0: Type) -> Option<Type>;
    fn is_atomic_rmw_max_etc(&mut self, arg0: &AtomicRmwOp) -> Option<(AtomicRmwOp, bool)>;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
}

pub struct ContextIterWrapper<Item, I: Iterator<Item = Item>, C: Context> {
    iter: I,
    _ctx: PhantomData<C>,
}
impl<Item, I: Iterator<Item = Item>, C: Context> From<I> for ContextIterWrapper<Item, I, C> {
    fn from(iter: I) -> Self {
        Self {
            iter,
            _ctx: PhantomData,
        }
    }
}
impl<Item, I: Iterator<Item = Item>, C: Context> ContextIter for ContextIterWrapper<Item, I, C> {
    type Context = C;
    type Output = Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
}

/// Internal type MultiReg: defined at src/prelude_lower.isle line 21.
#[derive(Clone, Debug)]
pub enum MultiReg {
    Empty,
    One { a: Reg },
    Two { a: Reg, b: Reg },
    Three { a: Reg, b: Reg, c: Reg },
    Four { a: Reg, b: Reg, c: Reg, d: Reg },
}

/// Internal type SideEffectNoResult: defined at src/prelude_lower.isle line 340.
#[derive(Clone, Debug)]
pub enum SideEffectNoResult {
    Inst {
        inst: MInst,
    },
    Inst2 {
        inst1: MInst,
        inst2: MInst,
    },
    Inst3 {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
    },
}

/// Internal type ProducesFlags: defined at src/prelude_lower.isle line 382.
#[derive(Clone, Debug)]
pub enum ProducesFlags {
    AlreadyExistingFlags,
    ProducesFlagsSideEffect { inst: MInst },
    ProducesFlagsTwiceSideEffect { inst1: MInst, inst2: MInst },
    ProducesFlagsReturnsReg { inst: MInst, result: Reg },
    ProducesFlagsReturnsResultWithConsumer { inst: MInst, result: Reg },
}

/// Internal type ConsumesAndProducesFlags: defined at src/prelude_lower.isle line 401.
#[derive(Clone, Debug)]
pub enum ConsumesAndProducesFlags {
    SideEffect { inst: MInst },
    ReturnsReg { inst: MInst, result: Reg },
}

/// Internal type ConsumesFlags: defined at src/prelude_lower.isle line 409.
#[derive(Clone, Debug)]
pub enum ConsumesFlags {
    ConsumesFlagsSideEffect {
        inst: MInst,
    },
    ConsumesFlagsSideEffect2 {
        inst1: MInst,
        inst2: MInst,
    },
    ConsumesFlagsReturnsResultWithProducer {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsTwiceReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        result: ValueRegs,
    },
    ConsumesFlagsFourTimesReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
        inst4: MInst,
        result: ValueRegs,
    },
}

/// Internal type MInst: defined at src/isa/riscv64/inst.isle line 2.
#[derive(Clone, Debug)]
pub enum MInst {
    Nop0,
    Nop4,
    Lui {
        rd: WritableReg,
        imm: Imm20,
    },
    LoadInlineConst {
        rd: WritableReg,
        ty: Type,
        imm: u64,
    },
    Auipc {
        rd: WritableReg,
        imm: Imm20,
    },
    FpuRR {
        alu_op: FpuOPRR,
        frm: OptionFloatRoundingMode,
        rd: WritableReg,
        rs: Reg,
    },
    AluRRR {
        alu_op: AluOPRRR,
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
    },
    FpuRRR {
        alu_op: FpuOPRRR,
        frm: OptionFloatRoundingMode,
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
    },
    FpuRRRR {
        alu_op: FpuOPRRRR,
        frm: OptionFloatRoundingMode,
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
        rs3: Reg,
    },
    AluRRImm12 {
        alu_op: AluOPRRI,
        rd: WritableReg,
        rs: Reg,
        imm12: Imm12,
    },
    CsrReg {
        op: CsrRegOP,
        rd: WritableReg,
        rs: Reg,
        csr: CSR,
    },
    CsrImm {
        op: CsrImmOP,
        rd: WritableReg,
        imm: UImm5,
        csr: CSR,
    },
    Load {
        rd: WritableReg,
        op: LoadOP,
        flags: MemFlags,
        from: AMode,
    },
    Store {
        to: AMode,
        op: StoreOP,
        flags: MemFlags,
        src: Reg,
    },
    Args {
        args: VecArgPair,
    },
    Rets {
        rets: VecRetPair,
    },
    Ret,
    Extend {
        rd: WritableReg,
        rn: Reg,
        signed: bool,
        from_bits: u8,
        to_bits: u8,
    },
    AdjustSp {
        amount: i64,
    },
    Call {
        info: BoxCallInfo,
    },
    CallInd {
        info: BoxCallIndInfo,
    },
    ReturnCall {
        callee: BoxExternalName,
        info: BoxReturnCallInfo,
    },
    ReturnCallInd {
        callee: Reg,
        info: BoxReturnCallInfo,
    },
    TrapIf {
        rs1: Reg,
        rs2: Reg,
        cc: IntCC,
        trap_code: TrapCode,
    },
    Jal {
        label: MachLabel,
    },
    CondBr {
        taken: CondBrTarget,
        not_taken: CondBrTarget,
        kind: IntegerCompare,
    },
    LoadExtName {
        rd: WritableReg,
        name: BoxExternalName,
        offset: i64,
    },
    ElfTlsGetAddr {
        rd: WritableReg,
        name: BoxExternalName,
    },
    LoadAddr {
        rd: WritableReg,
        mem: AMode,
    },
    VirtualSPOffsetAdj {
        amount: i64,
    },
    Mov {
        rd: WritableReg,
        rm: Reg,
        ty: Type,
    },
    MovFromPReg {
        rd: WritableReg,
        rm: PReg,
    },
    Fence {
        pred: u8,
        succ: u8,
    },
    EBreak,
    Udf {
        trap_code: TrapCode,
    },
    Jalr {
        rd: WritableReg,
        base: Reg,
        offset: Imm12,
    },
    Atomic {
        op: AtomicOP,
        rd: WritableReg,
        addr: Reg,
        src: Reg,
        amo: AMO,
    },
    AtomicStore {
        src: Reg,
        ty: Type,
        p: Reg,
    },
    AtomicLoad {
        rd: WritableReg,
        ty: Type,
        p: Reg,
    },
    AtomicRmwLoop {
        offset: Reg,
        op: AtomicRmwOp,
        dst: WritableReg,
        ty: Type,
        p: Reg,
        x: Reg,
        t0: WritableReg,
    },
    Select {
        dst: WritableValueRegs,
        condition: IntegerCompare,
        x: ValueRegs,
        y: ValueRegs,
    },
    BrTable {
        index: Reg,
        tmp1: WritableReg,
        tmp2: WritableReg,
        targets: VecMachLabel,
    },
    AtomicCas {
        offset: Reg,
        t0: WritableReg,
        dst: WritableReg,
        e: Reg,
        addr: Reg,
        v: Reg,
        ty: Type,
    },
    Icmp {
        cc: IntCC,
        rd: WritableReg,
        a: ValueRegs,
        b: ValueRegs,
        ty: Type,
    },
    FcvtToInt {
        is_sat: bool,
        rd: WritableReg,
        tmp: WritableReg,
        rs: Reg,
        is_signed: bool,
        in_type: Type,
        out_type: Type,
    },
    RawData {
        data: VecU8,
    },
    Unwind {
        inst: UnwindInst,
    },
    DummyUse {
        reg: Reg,
    },
    FloatRound {
        op: FloatRoundOP,
        rd: WritableReg,
        int_tmp: WritableReg,
        f_tmp: WritableReg,
        rs: Reg,
        ty: Type,
    },
    FloatSelect {
        op: FloatSelectOP,
        rd: WritableReg,
        tmp: WritableReg,
        rs1: Reg,
        rs2: Reg,
        ty: Type,
    },
    Popcnt {
        sum: WritableReg,
        step: WritableReg,
        tmp: WritableReg,
        rs: Reg,
        ty: Type,
    },
    Cltz {
        leading: bool,
        sum: WritableReg,
        step: WritableReg,
        tmp: WritableReg,
        rs: Reg,
        ty: Type,
    },
    Rev8 {
        rs: Reg,
        step: WritableReg,
        tmp: WritableReg,
        rd: WritableReg,
    },
    Brev8 {
        rs: Reg,
        ty: Type,
        step: WritableReg,
        tmp: WritableReg,
        tmp2: WritableReg,
        rd: WritableReg,
    },
    StackProbeLoop {
        guard_size: u32,
        probe_count: u32,
        tmp: WritableReg,
    },
    VecAluRRRR {
        op: VecAluOpRRRR,
        vd: WritableReg,
        vd_src: Reg,
        vs2: Reg,
        vs1: Reg,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRRRImm5 {
        op: VecAluOpRRRImm5,
        vd: WritableReg,
        vd_src: Reg,
        vs2: Reg,
        imm: Imm5,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRRR {
        op: VecAluOpRRR,
        vd: WritableReg,
        vs2: Reg,
        vs1: Reg,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRRImm5 {
        op: VecAluOpRRImm5,
        vd: WritableReg,
        vs2: Reg,
        imm: Imm5,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRR {
        op: VecAluOpRR,
        vd: WritableReg,
        vs: Reg,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRImm5 {
        op: VecAluOpRImm5,
        vd: WritableReg,
        imm: Imm5,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecSetState {
        rd: WritableReg,
        vstate: VState,
    },
    VecLoad {
        eew: VecElementWidth,
        to: WritableReg,
        from: VecAMode,
        flags: MemFlags,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecStore {
        eew: VecElementWidth,
        to: VecAMode,
        from: Reg,
        flags: MemFlags,
        mask: VecOpMasking,
        vstate: VState,
    },
}

/// Internal type FloatSelectOP: defined at src/isa/riscv64/inst.isle line 394.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FloatSelectOP {
    Max,
    Min,
}

/// Internal type FloatRoundOP: defined at src/isa/riscv64/inst.isle line 399.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FloatRoundOP {
    Nearest,
    Ceil,
    Floor,
    Trunc,
}

/// Internal type AtomicOP: defined at src/isa/riscv64/inst.isle line 406.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AtomicOP {
    LrW,
    ScW,
    AmoswapW,
    AmoaddW,
    AmoxorW,
    AmoandW,
    AmoorW,
    AmominW,
    AmomaxW,
    AmominuW,
    AmomaxuW,
    LrD,
    ScD,
    AmoswapD,
    AmoaddD,
    AmoxorD,
    AmoandD,
    AmoorD,
    AmominD,
    AmomaxD,
    AmominuD,
    AmomaxuD,
}

/// Internal type FpuOPRRRR: defined at src/isa/riscv64/inst.isle line 431.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuOPRRRR {
    FmaddS,
    FmsubS,
    FnmsubS,
    FnmaddS,
    FmaddD,
    FmsubD,
    FnmsubD,
    FnmaddD,
}

/// Internal type FClassResult: defined at src/isa/riscv64/inst.isle line 444.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FClassResult {
    NegInfinite,
    NegNormal,
    NegSubNormal,
    NegZero,
    PosZero,
    PosSubNormal,
    PosNormal,
    PosInfinite,
    SNaN,
    QNaN,
}

/// Internal type FpuOPRR: defined at src/isa/riscv64/inst.isle line 467.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuOPRR {
    FsqrtS,
    FcvtWS,
    FcvtWuS,
    FmvXW,
    FclassS,
    FcvtSw,
    FcvtSwU,
    FmvWX,
    FcvtLS,
    FcvtLuS,
    FcvtSL,
    FcvtSLU,
    FcvtLD,
    FcvtLuD,
    FmvXD,
    FcvtDL,
    FcvtDLu,
    FmvDX,
    FsqrtD,
    FcvtSD,
    FcvtDS,
    FclassD,
    FcvtWD,
    FcvtWuD,
    FcvtDW,
    FcvtDWU,
}

/// Internal type LoadOP: defined at src/isa/riscv64/inst.isle line 507.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum LoadOP {
    Lb,
    Lh,
    Lw,
    Lbu,
    Lhu,
    Lwu,
    Ld,
    Flw,
    Fld,
}

/// Internal type StoreOP: defined at src/isa/riscv64/inst.isle line 519.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum StoreOP {
    Sb,
    Sh,
    Sw,
    Sd,
    Fsw,
    Fsd,
}

/// Internal type AluOPRRR: defined at src/isa/riscv64/inst.isle line 528.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AluOPRRR {
    Add,
    Sub,
    Sll,
    Slt,
    SltU,
    Sgt,
    Sgtu,
    Xor,
    Srl,
    Sra,
    Or,
    And,
    Addw,
    Subw,
    Sllw,
    Srlw,
    Sraw,
    Mul,
    Mulh,
    Mulhsu,
    Mulhu,
    Div,
    DivU,
    Rem,
    RemU,
    Mulw,
    Divw,
    Divuw,
    Remw,
    Remuw,
    Adduw,
    Sh1add,
    Sh1adduw,
    Sh2add,
    Sh2adduw,
    Sh3add,
    Sh3adduw,
    Andn,
    Orn,
    Xnor,
    Max,
    Maxu,
    Min,
    Minu,
    Rol,
    Rolw,
    Ror,
    Rorw,
    Bclr,
    Bext,
    Binv,
    Bset,
    Clmul,
    Clmulh,
    Clmulr,
    Pack,
    Packw,
    Packh,
}

/// Internal type FpuOPRRR: defined at src/isa/riscv64/inst.isle line 608.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuOPRRR {
    FaddS,
    FsubS,
    FmulS,
    FdivS,
    FsgnjS,
    FsgnjnS,
    FsgnjxS,
    FminS,
    FmaxS,
    FeqS,
    FltS,
    FleS,
    FaddD,
    FsubD,
    FmulD,
    FdivD,
    FsgnjD,
    FsgnjnD,
    FsgnjxD,
    FminD,
    FmaxD,
    FeqD,
    FltD,
    FleD,
}

/// Internal type AluOPRRI: defined at src/isa/riscv64/inst.isle line 641.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AluOPRRI {
    Addi,
    Slti,
    SltiU,
    Xori,
    Ori,
    Andi,
    Slli,
    Srli,
    Srai,
    Addiw,
    Slliw,
    SrliW,
    Sraiw,
    SlliUw,
    Clz,
    Clzw,
    Ctz,
    Ctzw,
    Cpop,
    Cpopw,
    Sextb,
    Sexth,
    Zexth,
    Rori,
    Roriw,
    Rev8,
    Brev8,
    Orcb,
    Bclri,
    Bexti,
    Binvi,
    Bseti,
}

/// Internal type COpcodeSpace: defined at src/isa/riscv64/inst.isle line 683.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum COpcodeSpace {
    C0,
    C1,
    C2,
}

/// Internal type CrOp: defined at src/isa/riscv64/inst.isle line 690.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CrOp {
    CMv,
    CAdd,
    CJr,
    CJalr,
    CEbreak,
}

/// Internal type CaOp: defined at src/isa/riscv64/inst.isle line 701.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CaOp {
    CAnd,
    COr,
    CXor,
    CSub,
    CAddw,
    CSubw,
    CMul,
}

/// Internal type CjOp: defined at src/isa/riscv64/inst.isle line 712.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CjOp {
    CJ,
}

/// Internal type CiOp: defined at src/isa/riscv64/inst.isle line 717.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CiOp {
    CAddi,
    CAddiw,
    CAddi16sp,
    CSlli,
    CLi,
    CLui,
    CLwsp,
    CLdsp,
    CFldsp,
}

/// Internal type CiwOp: defined at src/isa/riscv64/inst.isle line 730.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CiwOp {
    CAddi4spn,
}

/// Internal type CbOp: defined at src/isa/riscv64/inst.isle line 735.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CbOp {
    CSrli,
    CSrai,
    CAndi,
}

/// Internal type CssOp: defined at src/isa/riscv64/inst.isle line 742.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CssOp {
    CSwsp,
    CSdsp,
    CFsdsp,
}

/// Internal type CsOp: defined at src/isa/riscv64/inst.isle line 749.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CsOp {
    CSw,
    CSd,
    CFsd,
}

/// Internal type ClOp: defined at src/isa/riscv64/inst.isle line 756.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ClOp {
    CLw,
    CLd,
    CFld,
}

/// Internal type CsznOp: defined at src/isa/riscv64/inst.isle line 763.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CsznOp {
    CNot,
    CZextb,
    CZexth,
    CZextw,
    CSextb,
    CSexth,
}

/// Internal type ZcbMemOp: defined at src/isa/riscv64/inst.isle line 776.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ZcbMemOp {
    CLbu,
    CLhu,
    CLh,
    CSb,
    CSh,
}

/// Internal type CsrRegOP: defined at src/isa/riscv64/inst.isle line 785.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CsrRegOP {
    CsrRW,
    CsrRS,
    CsrRC,
}

/// Internal type CsrImmOP: defined at src/isa/riscv64/inst.isle line 794.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CsrImmOP {
    CsrRWI,
    CsrRSI,
    CsrRCI,
}

/// Internal type CSR: defined at src/isa/riscv64/inst.isle line 804.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CSR {
    Frm,
}

/// Internal type FRM: defined at src/isa/riscv64/inst.isle line 810.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FRM {
    RNE,
    RTZ,
    RDN,
    RUP,
    RMM,
    Fcsr,
}

/// Internal type FFlagsException: defined at src/isa/riscv64/inst.isle line 830.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FFlagsException {
    NV,
    DZ,
    OF,
    UF,
    NX,
}

/// Internal type ExtendOp: defined at src/isa/riscv64/inst.isle line 2162.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ExtendOp {
    Zero,
    Signed,
}

/// Internal type FCmp: defined at src/isa/riscv64/inst.isle line 2957.
#[derive(Clone, Debug)]
pub enum FCmp {
    One { r: XReg },
    Zero { r: XReg },
}

/// Internal type VecElementWidth: defined at src/isa/riscv64/inst_vector.isle line 2.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecElementWidth {
    E8,
    E16,
    E32,
    E64,
}

/// Internal type VecLmul: defined at src/isa/riscv64/inst_vector.isle line 15.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecLmul {
    LmulF8,
    LmulF4,
    LmulF2,
    Lmul1,
    Lmul2,
    Lmul4,
    Lmul8,
}

/// Internal type VecTailMode: defined at src/isa/riscv64/inst_vector.isle line 28.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecTailMode {
    Agnostic,
    Undisturbed,
}

/// Internal type VecMaskMode: defined at src/isa/riscv64/inst_vector.isle line 38.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecMaskMode {
    Agnostic,
    Undisturbed,
}

/// Internal type VecAvl: defined at src/isa/riscv64/inst_vector.isle line 50.
#[derive(Clone, Debug)]
pub enum VecAvl {
    Static { size: UImm5 },
}

/// Internal type VecOpCategory: defined at src/isa/riscv64/inst_vector.isle line 64.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecOpCategory {
    OPIVV,
    OPFVV,
    OPMVV,
    OPIVI,
    OPIVX,
    OPFVF,
    OPMVX,
    OPCFG,
}

/// Internal type VecOpMasking: defined at src/isa/riscv64/inst_vector.isle line 79.
#[derive(Clone, Debug)]
pub enum VecOpMasking {
    Enabled { reg: Reg },
    Disabled,
}

/// Internal type VecAluOpRRR: defined at src/isa/riscv64/inst_vector.isle line 91.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRRR {
    VaddVV,
    VsaddVV,
    VsadduVV,
    VwaddVV,
    VwaddWV,
    VwadduVV,
    VwadduWV,
    VsubVV,
    VwsubVV,
    VwsubWV,
    VwsubuVV,
    VwsubuWV,
    VssubVV,
    VssubuVV,
    VmulVV,
    VmulhVV,
    VmulhuVV,
    VsmulVV,
    VsllVV,
    VsrlVV,
    VsraVV,
    VandVV,
    VorVV,
    VxorVV,
    VmaxVV,
    VmaxuVV,
    VminVV,
    VminuVV,
    VfaddVV,
    VfsubVV,
    VfmulVV,
    VfdivVV,
    VfminVV,
    VfmaxVV,
    VfsgnjVV,
    VfsgnjnVV,
    VfsgnjxVV,
    VmergeVVM,
    VredmaxuVS,
    VredminuVS,
    VrgatherVV,
    VcompressVM,
    VmseqVV,
    VmsneVV,
    VmsltuVV,
    VmsltVV,
    VmsleuVV,
    VmsleVV,
    VmfeqVV,
    VmfneVV,
    VmfltVV,
    VmfleVV,
    VmandMM,
    VmorMM,
    VmnandMM,
    VmnorMM,
    VaddVX,
    VsaddVX,
    VsadduVX,
    VwaddVX,
    VwaddWX,
    VwadduVX,
    VwadduWX,
    VsubVX,
    VrsubVX,
    VwsubVX,
    VwsubWX,
    VwsubuVX,
    VwsubuWX,
    VssubVX,
    VssubuVX,
    VmulVX,
    VmulhVX,
    VmulhuVX,
    VsmulVX,
    VsllVX,
    VsrlVX,
    VsraVX,
    VandVX,
    VorVX,
    VxorVX,
    VmaxVX,
    VmaxuVX,
    VminVX,
    VminuVX,
    VslidedownVX,
    VfaddVF,
    VfsubVF,
    VfrsubVF,
    VfmulVF,
    VfdivVF,
    VfsgnjVF,
    VfrdivVF,
    VmergeVXM,
    VfmergeVFM,
    VrgatherVX,
    VmseqVX,
    VmsneVX,
    VmsltuVX,
    VmsltVX,
    VmsleuVX,
    VmsleVX,
    VmsgtuVX,
    VmsgtVX,
    VmfeqVF,
    VmfneVF,
    VmfltVF,
    VmfleVF,
    VmfgtVF,
    VmfgeVF,
}

/// Internal type VecAluOpRRRImm5: defined at src/isa/riscv64/inst_vector.isle line 211.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRRRImm5 {
    VslideupVI,
}

/// Internal type VecAluOpRRRR: defined at src/isa/riscv64/inst_vector.isle line 216.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRRRR {
    VmaccVV,
    VnmsacVV,
    VfmaccVV,
    VfnmaccVV,
    VfmsacVV,
    VfnmsacVV,
    VmaccVX,
    VnmsacVX,
    VfmaccVF,
    VfnmaccVF,
    VfmsacVF,
    VfnmsacVF,
}

/// Internal type VecAluOpRRImm5: defined at src/isa/riscv64/inst_vector.isle line 235.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRRImm5 {
    VaddVI,
    VsaddVI,
    VsadduVI,
    VrsubVI,
    VsllVI,
    VsrlVI,
    VsraVI,
    VandVI,
    VorVI,
    VxorVI,
    VssrlVI,
    VslidedownVI,
    VmergeVIM,
    VrgatherVI,
    VmvrV,
    VnclipWI,
    VnclipuWI,
    VmseqVI,
    VmsneVI,
    VmsleuVI,
    VmsleVI,
    VmsgtuVI,
    VmsgtVI,
}

/// Internal type VecAluOpRImm5: defined at src/isa/riscv64/inst_vector.isle line 265.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRImm5 {
    VmvVI,
}

/// Internal type VecAluOpRR: defined at src/isa/riscv64/inst_vector.isle line 272.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRR {
    VmvSX,
    VmvXS,
    VfmvSF,
    VfmvFS,
    VmvVV,
    VmvVX,
    VfmvVF,
    VfsqrtV,
    VsextVF2,
    VsextVF4,
    VsextVF8,
    VzextVF2,
    VzextVF4,
    VzextVF8,
    VfcvtxufV,
    VfcvtxfV,
    VfcvtrtzxufV,
    VfcvtrtzxfV,
    VfcvtfxuV,
    VfcvtfxV,
    VfwcvtffV,
    VfncvtffW,
}

/// Internal type VecAMode: defined at src/isa/riscv64/inst_vector.isle line 304.
#[derive(Clone, Debug)]
pub enum VecAMode {
    UnitStride { base: AMode },
}

// Generated as internal constructor for term output_reg.
pub fn constructor_output_reg<C: Context>(ctx: &mut C, arg0: Reg) -> InstOutput {
    let v1 = C::value_reg(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 73.
    return v2;
}

// Generated as internal constructor for term output_value.
pub fn constructor_output_value<C: Context>(ctx: &mut C, arg0: Value) -> InstOutput {
    let v1 = C::put_in_regs(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 77.
    return v2;
}

// Generated as internal constructor for term temp_reg.
pub fn constructor_temp_reg<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    let v1 = C::temp_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/prelude_lower.isle line 97.
    return v2;
}

// Generated as internal constructor for term value_regs_range.
pub fn constructor_value_regs_range<C: Context>(ctx: &mut C, arg0: ValueRegs) -> Range {
    let v2 = C::value_regs_len(ctx, arg0);
    let v3 = C::range(ctx, 0x0, v2);
    // Rule at src/prelude_lower.isle line 146.
    return v3;
}

// Generated as internal constructor for term lo_reg.
pub fn constructor_lo_reg<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = C::value_regs_get(ctx, v1, 0x0);
    // Rule at src/prelude_lower.isle line 157.
    return v3;
}

// Generated as internal constructor for term multi_reg_to_pair_and_single.
pub fn constructor_multi_reg_to_pair_and_single<C: Context>(
    ctx: &mut C,
    arg0: &MultiReg,
) -> InstOutput {
    if let &MultiReg::Three {
        a: v1,
        b: v2,
        c: v3,
    } = arg0
    {
        let v4 = C::value_regs(ctx, v1, v2);
        let v5 = C::value_reg(ctx, v3);
        let v6 = C::output_pair(ctx, v4, v5);
        // Rule at src/prelude_lower.isle line 168.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair_and_single", "src/prelude_lower.isle line 167"
    )
}

// Generated as internal constructor for term multi_reg_to_pair.
pub fn constructor_multi_reg_to_pair<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::Two { a: v1, b: v2 } = arg0 {
        let v3 = C::value_regs(ctx, v1, v2);
        let v4 = C::output(ctx, v3);
        // Rule at src/prelude_lower.isle line 173.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair", "src/prelude_lower.isle line 172"
    )
}

// Generated as internal constructor for term multi_reg_to_single.
pub fn constructor_multi_reg_to_single<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::One { a: v1 } = arg0 {
        let v2 = C::value_reg(ctx, v1);
        let v3 = C::output(ctx, v2);
        // Rule at src/prelude_lower.isle line 178.
        return v3;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_single", "src/prelude_lower.isle line 177"
    )
}

// Generated as internal constructor for term emit_side_effect.
pub fn constructor_emit_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> Unit {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            let v2 = C::emit(ctx, v1);
            // Rule at src/prelude_lower.isle line 350.
            return v2;
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v3,
            inst2: ref v4,
        } => {
            let v5 = C::emit(ctx, v3);
            let v6 = C::emit(ctx, v4);
            // Rule at src/prelude_lower.isle line 352.
            return v6;
        }
        &SideEffectNoResult::Inst3 {
            inst1: ref v7,
            inst2: ref v8,
            inst3: ref v9,
        } => {
            let v10 = C::emit(ctx, v7);
            let v11 = C::emit(ctx, v8);
            let v12 = C::emit(ctx, v9);
            // Rule at src/prelude_lower.isle line 355.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_side_effect", "src/prelude_lower.isle line 349"
    )
}

// Generated as internal constructor for term side_effect.
pub fn constructor_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> InstOutput {
    let v1 = constructor_emit_side_effect(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 363.
    return v2;
}

// Generated as internal constructor for term side_effect_concat.
pub fn constructor_side_effect_concat<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
    arg1: &SideEffectNoResult,
) -> SideEffectNoResult {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            match arg1 {
                &SideEffectNoResult::Inst { inst: ref v3 } => {
                    let v4 = SideEffectNoResult::Inst2 {
                        inst1: v1.clone(),
                        inst2: v3.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 368.
                    return v4;
                }
                &SideEffectNoResult::Inst2 {
                    inst1: ref v5,
                    inst2: ref v6,
                } => {
                    let v7 = SideEffectNoResult::Inst3 {
                        inst1: v1.clone(),
                        inst2: v5.clone(),
                        inst3: v6.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 370.
                    return v7;
                }
                _ => {}
            }
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v8,
            inst2: ref v9,
        } => {
            if let &SideEffectNoResult::Inst { inst: ref v3 } = arg1 {
                let v10 = SideEffectNoResult::Inst3 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                    inst3: v3.clone(),
                };
                // Rule at src/prelude_lower.isle line 372.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "side_effect_concat", "src/prelude_lower.isle line 367"
    )
}

// Generated as internal constructor for term produces_flags_concat.
pub fn constructor_produces_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ProducesFlags,
) -> ProducesFlags {
    if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } = arg0 {
        if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v3 } = arg1 {
            let v4 = ProducesFlags::ProducesFlagsTwiceSideEffect {
                inst1: v1.clone(),
                inst2: v3.clone(),
            };
            // Rule at src/prelude_lower.isle line 397.
            return v4;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_concat", "src/prelude_lower.isle line 396"
    )
}

// Generated as internal constructor for term produces_flags_get_reg.
pub fn constructor_produces_flags_get_reg<C: Context>(ctx: &mut C, arg0: &ProducesFlags) -> Reg {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            // Rule at src/prelude_lower.isle line 427.
            return v2;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v3,
            result: v4,
        } => {
            // Rule at src/prelude_lower.isle line 428.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_get_reg", "src/prelude_lower.isle line 426"
    )
}

// Generated as internal constructor for term produces_flags_ignore.
pub fn constructor_produces_flags_ignore<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> ProducesFlags {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v1.clone() };
            // Rule at src/prelude_lower.isle line 433.
            return v3;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v4,
            result: v5,
        } => {
            let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v4.clone() };
            // Rule at src/prelude_lower.isle line 435.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_ignore", "src/prelude_lower.isle line 432"
    )
}

// Generated as internal constructor for term consumes_flags_concat.
pub fn constructor_consumes_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ConsumesFlags,
    arg1: &ConsumesFlags,
) -> ConsumesFlags {
    match arg0 {
        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v8 } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } = arg1 {
                let v10 = ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                };
                // Rule at src/prelude_lower.isle line 448.
                return v10;
            }
        }
        &ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            if let &ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: ref v4,
                result: v5,
            } = arg1
            {
                let v6 = C::value_regs(ctx, v2, v5);
                let v7 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: v1.clone(),
                    inst2: v4.clone(),
                    result: v6,
                };
                // Rule at src/prelude_lower.isle line 442.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "consumes_flags_concat", "src/prelude_lower.isle line 441"
    )
}

// Generated as internal constructor for term with_flags.
pub fn constructor_with_flags<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> ValueRegs {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v12 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v16 = C::emit(ctx, v13);
                    let v17 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 479.
                    return v17;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v21 = C::emit(ctx, v18);
                    let v22 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 485.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v28 = C::emit(ctx, v23);
                    let v29 = C::emit(ctx, v24);
                    let v30 = C::emit(ctx, v25);
                    let v31 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 497.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v32,
            inst2: ref v33,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v36 = C::emit(ctx, v13);
                    let v37 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 513.
                    return v37;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v38 = C::emit(ctx, v18);
                    let v39 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 520.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v40 = C::emit(ctx, v23);
                    let v41 = C::emit(ctx, v24);
                    let v42 = C::emit(ctx, v25);
                    let v43 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 533.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v1,
            result: v2,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } => {
                    let v6 = C::emit(ctx, v1);
                    let v10 = C::emit(ctx, v9);
                    let v11 = C::value_reg(ctx, v2);
                    // Rule at src/prelude_lower.isle line 473.
                    return v11;
                }
                &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                    inst: ref v4,
                    result: v5,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v7 = C::emit(ctx, v4);
                    let v8 = C::value_regs(ctx, v2, v5);
                    // Rule at src/prelude_lower.isle line 465.
                    return v8;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags", "src/prelude_lower.isle line 463"
    )
}

// Generated as internal constructor for term with_flags_reg.
pub fn constructor_with_flags_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Reg {
    let v2 = constructor_with_flags(ctx, arg0, arg1);
    let v4 = C::value_regs_get(ctx, v2, 0x0);
    // Rule at src/prelude_lower.isle line 551.
    return v4;
}

// Generated as internal constructor for term flags_to_producesflags.
pub fn constructor_flags_to_producesflags<C: Context>(ctx: &mut C, arg0: Value) -> ProducesFlags {
    let v1 = C::mark_value_used(ctx, arg0);
    // Rule at src/prelude_lower.isle line 558.
    return ProducesFlags::AlreadyExistingFlags;
}

// Generated as internal constructor for term with_flags_side_effect.
pub fn constructor_with_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> SideEffectNoResult {
    match arg0 {
        &ProducesFlags::AlreadyExistingFlags => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v3 = SideEffectNoResult::Inst { inst: v2.clone() };
                    // Rule at src/prelude_lower.isle line 569.
                    return v3;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v6 = SideEffectNoResult::Inst2 {
                        inst1: v4.clone(),
                        inst2: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 574.
                    return v6;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v7 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v8 = SideEffectNoResult::Inst2 {
                        inst1: v7.clone(),
                        inst2: v2.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 579.
                    return v8;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v9 = SideEffectNoResult::Inst3 {
                        inst1: v7.clone(),
                        inst2: v4.clone(),
                        inst3: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 584.
                    return v9;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v10,
            inst2: ref v11,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } = arg1 {
                let v12 = SideEffectNoResult::Inst3 {
                    inst1: v10.clone(),
                    inst2: v11.clone(),
                    inst3: v2.clone(),
                };
                // Rule at src/prelude_lower.isle line 589.
                return v12;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_side_effect", "src/prelude_lower.isle line 567"
    )
}

// Generated as internal constructor for term with_flags_chained.
pub fn constructor_with_flags_chained<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesAndProducesFlags,
    arg2: &ConsumesFlags,
) -> MultiReg {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            // Rule at src/prelude_lower.isle line 598.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            // Rule at src/prelude_lower.isle line 606.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v17 = MultiReg::One { a: v15 };
                            // Rule at src/prelude_lower.isle line 615.
                            return v17;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v27 = MultiReg::Two { a: v24, b: v26 };
                            // Rule at src/prelude_lower.isle line 623.
                            return v27;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v39 = MultiReg::Two { a: v37, b: v38 };
                            // Rule at src/prelude_lower.isle line 632.
                            return v39;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src/prelude_lower.isle line 692.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src/prelude_lower.isle line 700.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v51 = MultiReg::Two { a: v48, b: v15 };
                            // Rule at src/prelude_lower.isle line 709.
                            return v51;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v52 = MultiReg::Three {
                                a: v48,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src/prelude_lower.isle line 717.
                            return v52;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v53 = MultiReg::Three {
                                a: v48,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src/prelude_lower.isle line 726.
                            return v53;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v40,
            result: v41,
        } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src/prelude_lower.isle line 645.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src/prelude_lower.isle line 653.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v44 = MultiReg::Two { a: v41, b: v15 };
                            // Rule at src/prelude_lower.isle line 662.
                            return v44;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v45 = MultiReg::Three {
                                a: v41,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src/prelude_lower.isle line 670.
                            return v45;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v46 = MultiReg::Three {
                                a: v41,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src/prelude_lower.isle line 679.
                            return v46;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src/prelude_lower.isle line 739.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src/prelude_lower.isle line 747.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v55 = MultiReg::Three {
                                a: v41,
                                b: v48,
                                c: v15,
                            };
                            // Rule at src/prelude_lower.isle line 756.
                            return v55;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v56 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v24,
                                d: v26,
                            };
                            // Rule at src/prelude_lower.isle line 764.
                            return v56;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v57 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v37,
                                d: v38,
                            };
                            // Rule at src/prelude_lower.isle line 773.
                            return v57;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v58,
            result: v59,
        } => {
            if let &ConsumesAndProducesFlags::ReturnsReg {
                inst: ref v47,
                result: v48,
            } = arg1
            {
                match arg2 {
                    &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v8 = C::emit(ctx, v5);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src/prelude_lower.isle line 785.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsSideEffect2 {
                        inst1: ref v10,
                        inst2: ref v11,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v12 = C::emit(ctx, v10);
                        let v13 = C::emit(ctx, v11);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src/prelude_lower.isle line 793.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                        inst: ref v63,
                        result: v64,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v65 = C::emit(ctx, v63);
                        let v66 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v64,
                        };
                        // Rule at src/prelude_lower.isle line 810.
                        return v66;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsReg {
                        inst: ref v14,
                        result: v15,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v16 = C::emit(ctx, v14);
                        let v62 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v15,
                        };
                        // Rule at src/prelude_lower.isle line 802.
                        return v62;
                    }
                    &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                        inst1: ref v18,
                        inst2: ref v19,
                        result: v20,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v21 = C::emit(ctx, v18);
                        let v22 = C::emit(ctx, v19);
                        let v24 = C::value_regs_get(ctx, v20, 0x0);
                        let v26 = C::value_regs_get(ctx, v20, 0x1);
                        let v67 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v24,
                            d: v26,
                        };
                        // Rule at src/prelude_lower.isle line 818.
                        return v67;
                    }
                    &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                        inst1: ref v28,
                        inst2: ref v29,
                        inst3: ref v30,
                        inst4: ref v31,
                        result: v32,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v33 = C::emit(ctx, v28);
                        let v34 = C::emit(ctx, v29);
                        let v35 = C::emit(ctx, v30);
                        let v36 = C::emit(ctx, v31);
                        let v37 = C::value_regs_get(ctx, v32, 0x0);
                        let v38 = C::value_regs_get(ctx, v32, 0x1);
                        let v68 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v37,
                            d: v38,
                        };
                        // Rule at src/prelude_lower.isle line 827.
                        return v68;
                    }
                    _ => {}
                }
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_chained", "src/prelude_lower.isle line 595"
    )
}

// Generated as internal constructor for term lower_return.
pub fn constructor_lower_return<C: Context>(ctx: &mut C, arg0: ValueSlice) -> InstOutput {
    let v1 = C::gen_return(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 1027.
    return v2;
}

// Generated as internal constructor for term put_in_xreg.
pub fn constructor_put_in_xreg<C: Context>(ctx: &mut C, arg0: Value) -> XReg {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::xreg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 896.
    return v2;
}

// Generated as internal constructor for term output_xreg.
pub fn constructor_output_xreg<C: Context>(ctx: &mut C, arg0: XReg) -> InstOutput {
    let v1 = C::xreg_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 901.
    return v2;
}

// Generated as internal constructor for term writable_xreg_to_reg.
pub fn constructor_writable_xreg_to_reg<C: Context>(ctx: &mut C, arg0: WritableXReg) -> Reg {
    let v1 = C::writable_xreg_to_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 916.
    return v2;
}

// Generated as internal constructor for term xreg_to_value_regs.
pub fn constructor_xreg_to_value_regs<C: Context>(ctx: &mut C, arg0: XReg) -> ValueRegs {
    let v1 = C::xreg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 926.
    return v2;
}

// Generated as internal constructor for term writable_xreg_to_value_regs.
pub fn constructor_writable_xreg_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableXReg,
) -> ValueRegs {
    let v1 = constructor_writable_xreg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 931.
    return v2;
}

// Generated as internal constructor for term temp_writable_xreg.
pub fn constructor_temp_writable_xreg<C: Context>(ctx: &mut C) -> WritableXReg {
    let v1 = C::temp_writable_reg(ctx, I64);
    let v2 = C::writable_xreg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 936.
    return v2;
}

// Generated as internal constructor for term put_in_freg.
pub fn constructor_put_in_freg<C: Context>(ctx: &mut C, arg0: Value) -> FReg {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::freg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 957.
    return v2;
}

// Generated as internal constructor for term output_freg.
pub fn constructor_output_freg<C: Context>(ctx: &mut C, arg0: FReg) -> InstOutput {
    let v1 = C::freg_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 962.
    return v2;
}

// Generated as internal constructor for term writable_freg_to_reg.
pub fn constructor_writable_freg_to_reg<C: Context>(ctx: &mut C, arg0: WritableFReg) -> Reg {
    let v1 = C::writable_freg_to_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 977.
    return v2;
}

// Generated as internal constructor for term freg_to_value_regs.
pub fn constructor_freg_to_value_regs<C: Context>(ctx: &mut C, arg0: FReg) -> ValueRegs {
    let v1 = C::freg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 987.
    return v2;
}

// Generated as internal constructor for term writable_freg_to_value_regs.
pub fn constructor_writable_freg_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableFReg,
) -> ValueRegs {
    let v1 = constructor_writable_freg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 992.
    return v2;
}

// Generated as internal constructor for term temp_writable_freg.
pub fn constructor_temp_writable_freg<C: Context>(ctx: &mut C) -> WritableFReg {
    let v1 = C::temp_writable_reg(ctx, F64);
    let v2 = C::writable_freg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 997.
    return v2;
}

// Generated as internal constructor for term put_in_vreg.
pub fn constructor_put_in_vreg<C: Context>(ctx: &mut C, arg0: Value) -> VReg {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::vreg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 1019.
    return v2;
}

// Generated as internal constructor for term output_vreg.
pub fn constructor_output_vreg<C: Context>(ctx: &mut C, arg0: VReg) -> InstOutput {
    let v1 = C::vreg_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 1024.
    return v2;
}

// Generated as internal constructor for term writable_vreg_to_reg.
pub fn constructor_writable_vreg_to_reg<C: Context>(ctx: &mut C, arg0: WritableVReg) -> Reg {
    let v1 = C::writable_vreg_to_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 1039.
    return v2;
}

// Generated as internal constructor for term vreg_to_value_regs.
pub fn constructor_vreg_to_value_regs<C: Context>(ctx: &mut C, arg0: VReg) -> ValueRegs {
    let v1 = C::vreg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 1049.
    return v2;
}

// Generated as internal constructor for term writable_vreg_to_value_regs.
pub fn constructor_writable_vreg_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableVReg,
) -> ValueRegs {
    let v1 = constructor_writable_vreg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 1054.
    return v2;
}

// Generated as internal constructor for term temp_writable_vreg.
pub fn constructor_temp_writable_vreg<C: Context>(ctx: &mut C) -> WritableVReg {
    let v1 = C::temp_writable_reg(ctx, I8X16);
    let v2 = C::writable_vreg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 1059.
    return v2;
}

// Generated as internal constructor for term gen_float_round.
pub fn constructor_gen_float_round<C: Context>(
    ctx: &mut C,
    arg0: &FloatRoundOP,
    arg1: Reg,
    arg2: Type,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg2);
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = constructor_temp_writable_freg(ctx);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v7 = C::writable_freg_to_writable_reg(ctx, v5);
    let v8 = MInst::FloatRound {
        op: arg0.clone(),
        rd: v3,
        int_tmp: v6,
        f_tmp: v7,
        rs: arg1,
        ty: arg2,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1093.
    return v10;
}

// Generated as internal constructor for term gen_float_select.
pub fn constructor_gen_float_select<C: Context>(
    ctx: &mut C,
    arg0: &FloatSelectOP,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg3);
    let v5 = constructor_temp_writable_xreg(ctx);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v5);
    let v7 = MInst::FloatSelect {
        op: arg0.clone(),
        rd: v4,
        tmp: v6,
        rs1: arg1,
        rs2: arg2,
        ty: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1103.
    return v9;
}

// Generated as internal constructor for term rv_add.
pub fn constructor_rv_add<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Add, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1118.
    return v6;
}

// Generated as internal constructor for term rv_addi.
pub fn constructor_rv_addi<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Addi, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1124.
    return v5;
}

// Generated as internal constructor for term rv_sub.
pub fn constructor_rv_sub<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sub, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1130.
    return v6;
}

// Generated as internal constructor for term rv_neg.
pub fn constructor_rv_neg<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::zero_reg(ctx);
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, &AluOPRRR::Sub, v2, v3);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1136.
    return v5;
}

// Generated as internal constructor for term rv_sll.
pub fn constructor_rv_sll<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sll, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1142.
    return v6;
}

// Generated as internal constructor for term rv_slli.
pub fn constructor_rv_slli<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Slli, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1148.
    return v5;
}

// Generated as internal constructor for term rv_srl.
pub fn constructor_rv_srl<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Srl, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1154.
    return v6;
}

// Generated as internal constructor for term rv_srli.
pub fn constructor_rv_srli<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Srli, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1160.
    return v5;
}

// Generated as internal constructor for term rv_sra.
pub fn constructor_rv_sra<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sra, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1166.
    return v6;
}

// Generated as internal constructor for term rv_srai.
pub fn constructor_rv_srai<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Srai, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1172.
    return v5;
}

// Generated as internal constructor for term rv_or.
pub fn constructor_rv_or<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Or, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1178.
    return v6;
}

// Generated as internal constructor for term rv_ori.
pub fn constructor_rv_ori<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Ori, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1184.
    return v5;
}

// Generated as internal constructor for term rv_xor.
pub fn constructor_rv_xor<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Xor, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1190.
    return v6;
}

// Generated as internal constructor for term rv_xori.
pub fn constructor_rv_xori<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Xori, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1196.
    return v5;
}

// Generated as internal constructor for term rv_not.
pub fn constructor_rv_not<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::imm12_const(ctx, -0x1);
    let v3 = constructor_rv_xori(ctx, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 1202.
    return v3;
}

// Generated as internal constructor for term rv_and.
pub fn constructor_rv_and<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::And, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1208.
    return v6;
}

// Generated as internal constructor for term rv_andi.
pub fn constructor_rv_andi<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Andi, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1214.
    return v5;
}

// Generated as internal constructor for term rv_sltu.
pub fn constructor_rv_sltu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::SltU, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1220.
    return v6;
}

// Generated as internal constructor for term rv_snez.
pub fn constructor_rv_snez<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v1 = C::zero_reg(ctx);
    let v2 = C::xreg_new(ctx, v1);
    let v3 = constructor_rv_sltu(ctx, v2, arg0);
    // Rule at src/isa/riscv64/inst.isle line 1226.
    return v3;
}

// Generated as internal constructor for term rv_sltiu.
pub fn constructor_rv_sltiu<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::SltiU, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1232.
    return v5;
}

// Generated as internal constructor for term rv_seqz.
pub fn constructor_rv_seqz<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::imm12_const(ctx, 0x1);
    let v3 = constructor_rv_sltiu(ctx, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 1238.
    return v3;
}

// Generated as internal constructor for term rv_addw.
pub fn constructor_rv_addw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Addw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1248.
    return v6;
}

// Generated as internal constructor for term rv_addiw.
pub fn constructor_rv_addiw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Addiw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1254.
    return v5;
}

// Generated as internal constructor for term rv_sextw.
pub fn constructor_rv_sextw<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::imm12_const(ctx, 0x0);
    let v3 = constructor_rv_addiw(ctx, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 1260.
    return v3;
}

// Generated as internal constructor for term rv_subw.
pub fn constructor_rv_subw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Subw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1266.
    return v6;
}

// Generated as internal constructor for term rv_sllw.
pub fn constructor_rv_sllw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sllw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1272.
    return v6;
}

// Generated as internal constructor for term rv_slliw.
pub fn constructor_rv_slliw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Slliw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1278.
    return v5;
}

// Generated as internal constructor for term rv_srlw.
pub fn constructor_rv_srlw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Srlw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1284.
    return v6;
}

// Generated as internal constructor for term rv_srliw.
pub fn constructor_rv_srliw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::SrliW, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1290.
    return v5;
}

// Generated as internal constructor for term rv_sraw.
pub fn constructor_rv_sraw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sraw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1296.
    return v6;
}

// Generated as internal constructor for term rv_sraiw.
pub fn constructor_rv_sraiw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Sraiw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1302.
    return v5;
}

// Generated as internal constructor for term rv_mul.
pub fn constructor_rv_mul<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Mul, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1312.
    return v6;
}

// Generated as internal constructor for term rv_mulh.
pub fn constructor_rv_mulh<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Mulh, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1318.
    return v6;
}

// Generated as internal constructor for term rv_mulhu.
pub fn constructor_rv_mulhu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Mulhu, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1324.
    return v6;
}

// Generated as internal constructor for term rv_div.
pub fn constructor_rv_div<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Div, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1330.
    return v6;
}

// Generated as internal constructor for term rv_divu.
pub fn constructor_rv_divu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::DivU, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1336.
    return v6;
}

// Generated as internal constructor for term rv_rem.
pub fn constructor_rv_rem<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Rem, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1342.
    return v6;
}

// Generated as internal constructor for term rv_remu.
pub fn constructor_rv_remu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::RemU, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1348.
    return v6;
}

// Generated as internal constructor for term rv_mulw.
pub fn constructor_rv_mulw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Mulw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1357.
    return v6;
}

// Generated as internal constructor for term rv_divw.
pub fn constructor_rv_divw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Divw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1363.
    return v6;
}

// Generated as internal constructor for term rv_divuw.
pub fn constructor_rv_divuw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Divuw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1369.
    return v6;
}

// Generated as internal constructor for term rv_remw.
pub fn constructor_rv_remw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Remw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1375.
    return v6;
}

// Generated as internal constructor for term rv_remuw.
pub fn constructor_rv_remuw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Remuw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1381.
    return v6;
}

// Generated as internal constructor for term rv_fadd.
pub fn constructor_rv_fadd<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FaddS, F32, v5, v6);
            let v8 = C::freg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1390.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FaddD, F64, v5, v6);
            let v12 = C::freg_new(ctx, v11);
            // Rule at src/isa/riscv64/inst.isle line 1391.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fadd", "src/isa/riscv64/inst.isle line 1389"
    )
}

// Generated as internal constructor for term rv_fsub.
pub fn constructor_rv_fsub<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsubS, F32, v5, v6);
            let v8 = C::freg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1395.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsubD, F64, v5, v6);
            let v12 = C::freg_new(ctx, v11);
            // Rule at src/isa/riscv64/inst.isle line 1396.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsub", "src/isa/riscv64/inst.isle line 1394"
    )
}

// Generated as internal constructor for term rv_fmul.
pub fn constructor_rv_fmul<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FmulS, F32, v5, v6);
            let v8 = C::freg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1400.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FmulD, F64, v5, v6);
            let v12 = C::freg_new(ctx, v11);
            // Rule at src/isa/riscv64/inst.isle line 1401.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fmul", "src/isa/riscv64/inst.isle line 1399"
    )
}

// Generated as internal constructor for term rv_fdiv.
pub fn constructor_rv_fdiv<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FdivS, F32, v5, v6);
            let v8 = C::freg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1405.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FdivD, F64, v5, v6);
            let v12 = C::freg_new(ctx, v11);
            // Rule at src/isa/riscv64/inst.isle line 1406.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fdiv", "src/isa/riscv64/inst.isle line 1404"
    )
}

// Generated as internal constructor for term rv_fsqrt.
pub fn constructor_rv_fsqrt<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v4 = C::freg_to_reg(ctx, arg1);
            let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FsqrtS, F32, v4);
            let v6 = C::freg_new(ctx, v5);
            // Rule at src/isa/riscv64/inst.isle line 1410.
            return v6;
        }
        F64 => {
            let v4 = C::freg_to_reg(ctx, arg1);
            let v9 = constructor_fpu_rr(ctx, &FpuOPRR::FsqrtD, F64, v4);
            let v10 = C::freg_new(ctx, v9);
            // Rule at src/isa/riscv64/inst.isle line 1411.
            return v10;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsqrt", "src/isa/riscv64/inst.isle line 1409"
    )
}

// Generated as internal constructor for term rv_fmadd.
pub fn constructor_rv_fmadd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: FReg,
    arg2: FReg,
    arg3: FReg,
) -> FReg {
    match arg0 {
        F32 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = C::freg_to_reg(ctx, arg3);
            let v9 = constructor_fpu_rrrr(ctx, &FpuOPRRRR::FmaddS, F32, v6, v7, v8);
            let v10 = C::freg_new(ctx, v9);
            // Rule at src/isa/riscv64/inst.isle line 1415.
            return v10;
        }
        F64 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = C::freg_to_reg(ctx, arg3);
            let v13 = constructor_fpu_rrrr(ctx, &FpuOPRRRR::FmaddD, F64, v6, v7, v8);
            let v14 = C::freg_new(ctx, v13);
            // Rule at src/isa/riscv64/inst.isle line 1416.
            return v14;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fmadd", "src/isa/riscv64/inst.isle line 1414"
    )
}

// Generated as internal constructor for term rv_fmvxw.
pub fn constructor_rv_fmvxw<C: Context>(ctx: &mut C, arg0: FReg) -> XReg {
    let v3 = C::freg_to_reg(ctx, arg0);
    let v4 = constructor_fpu_rr(ctx, &FpuOPRR::FmvXW, I32, v3);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1420.
    return v5;
}

// Generated as internal constructor for term rv_fmvxd.
pub fn constructor_rv_fmvxd<C: Context>(ctx: &mut C, arg0: FReg) -> XReg {
    let v3 = C::freg_to_reg(ctx, arg0);
    let v4 = constructor_fpu_rr(ctx, &FpuOPRR::FmvXD, I64, v3);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1424.
    return v5;
}

// Generated as internal constructor for term rv_fmvwx.
pub fn constructor_rv_fmvwx<C: Context>(ctx: &mut C, arg0: XReg) -> FReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_fpu_rr(ctx, &FpuOPRR::FmvWX, F32, v3);
    let v5 = C::freg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1428.
    return v5;
}

// Generated as internal constructor for term rv_fmvdx.
pub fn constructor_rv_fmvdx<C: Context>(ctx: &mut C, arg0: XReg) -> FReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_fpu_rr(ctx, &FpuOPRR::FmvDX, F64, v3);
    let v5 = C::freg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1432.
    return v5;
}

// Generated as internal constructor for term rv_fcvtds.
pub fn constructor_rv_fcvtds<C: Context>(ctx: &mut C, arg0: FReg) -> FReg {
    let v3 = C::freg_to_reg(ctx, arg0);
    let v4 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtDS, F32, v3);
    let v5 = C::freg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1436.
    return v5;
}

// Generated as internal constructor for term rv_fcvtsd.
pub fn constructor_rv_fcvtsd<C: Context>(ctx: &mut C, arg0: FReg) -> FReg {
    let v3 = C::freg_to_reg(ctx, arg0);
    let v4 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtSD, F64, v3);
    let v5 = C::freg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1440.
    return v5;
}

// Generated as internal constructor for term rv_fcvtsw.
pub fn constructor_rv_fcvtsw<C: Context>(ctx: &mut C, arg0: XReg) -> FReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtSw, F32, v3);
    let v5 = C::freg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1444.
    return v5;
}

// Generated as internal constructor for term rv_fcvtswu.
pub fn constructor_rv_fcvtswu<C: Context>(ctx: &mut C, arg0: XReg) -> FReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtSwU, F32, v3);
    let v5 = C::freg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1448.
    return v5;
}

// Generated as internal constructor for term rv_fcvtdw.
pub fn constructor_rv_fcvtdw<C: Context>(ctx: &mut C, arg0: XReg) -> FReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtDW, F32, v3);
    let v5 = C::freg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1452.
    return v5;
}

// Generated as internal constructor for term rv_fcvtdwu.
pub fn constructor_rv_fcvtdwu<C: Context>(ctx: &mut C, arg0: XReg) -> FReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtDWU, F32, v3);
    let v5 = C::freg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1456.
    return v5;
}

// Generated as internal constructor for term rv_fcvtsl.
pub fn constructor_rv_fcvtsl<C: Context>(ctx: &mut C, arg0: XReg) -> FReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtSL, F32, v3);
    let v5 = C::freg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1460.
    return v5;
}

// Generated as internal constructor for term rv_fcvtslu.
pub fn constructor_rv_fcvtslu<C: Context>(ctx: &mut C, arg0: XReg) -> FReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtSLU, F32, v3);
    let v5 = C::freg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1464.
    return v5;
}

// Generated as internal constructor for term rv_fcvtdl.
pub fn constructor_rv_fcvtdl<C: Context>(ctx: &mut C, arg0: XReg) -> FReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtDL, F32, v3);
    let v5 = C::freg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1468.
    return v5;
}

// Generated as internal constructor for term rv_fcvtdlu.
pub fn constructor_rv_fcvtdlu<C: Context>(ctx: &mut C, arg0: XReg) -> FReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtDLu, F32, v3);
    let v5 = C::freg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1472.
    return v5;
}

// Generated as internal constructor for term rv_fsgnj.
pub fn constructor_rv_fsgnj<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjS, F32, v5, v6);
            let v8 = C::freg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1478.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjD, F64, v5, v6);
            let v12 = C::freg_new(ctx, v11);
            // Rule at src/isa/riscv64/inst.isle line 1479.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsgnj", "src/isa/riscv64/inst.isle line 1477"
    )
}

// Generated as internal constructor for term rv_fsgnjn.
pub fn constructor_rv_fsgnjn<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjnS, F32, v5, v6);
            let v8 = C::freg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1485.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjnD, F64, v5, v6);
            let v12 = C::freg_new(ctx, v11);
            // Rule at src/isa/riscv64/inst.isle line 1486.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsgnjn", "src/isa/riscv64/inst.isle line 1484"
    )
}

// Generated as internal constructor for term rv_fneg.
pub fn constructor_rv_fneg<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg) -> FReg {
    let v2 = constructor_rv_fsgnjn(ctx, arg0, arg1, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1491.
    return v2;
}

// Generated as internal constructor for term rv_fsgnjx.
pub fn constructor_rv_fsgnjx<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjxS, F32, v5, v6);
            let v8 = C::freg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1497.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjxD, F64, v5, v6);
            let v12 = C::freg_new(ctx, v11);
            // Rule at src/isa/riscv64/inst.isle line 1498.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsgnjx", "src/isa/riscv64/inst.isle line 1496"
    )
}

// Generated as internal constructor for term rv_fabs.
pub fn constructor_rv_fabs<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg) -> FReg {
    let v2 = constructor_rv_fsgnjx(ctx, arg0, arg1, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1503.
    return v2;
}

// Generated as internal constructor for term rv_feq.
pub fn constructor_rv_feq<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FeqS, I64, v5, v6);
            let v8 = C::xreg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1507.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v10 = constructor_fpu_rrr(ctx, &FpuOPRRR::FeqD, I64, v5, v6);
            let v11 = C::xreg_new(ctx, v10);
            // Rule at src/isa/riscv64/inst.isle line 1508.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_feq", "src/isa/riscv64/inst.isle line 1506"
    )
}

// Generated as internal constructor for term rv_flt.
pub fn constructor_rv_flt<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FltS, I64, v5, v6);
            let v8 = C::xreg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1512.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v10 = constructor_fpu_rrr(ctx, &FpuOPRRR::FltD, I64, v5, v6);
            let v11 = C::xreg_new(ctx, v10);
            // Rule at src/isa/riscv64/inst.isle line 1513.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_flt", "src/isa/riscv64/inst.isle line 1511"
    )
}

// Generated as internal constructor for term rv_fle.
pub fn constructor_rv_fle<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FleS, I64, v5, v6);
            let v8 = C::xreg_new(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 1517.
            return v8;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg1);
            let v6 = C::freg_to_reg(ctx, arg2);
            let v10 = constructor_fpu_rrr(ctx, &FpuOPRRR::FleD, I64, v5, v6);
            let v11 = C::xreg_new(ctx, v10);
            // Rule at src/isa/riscv64/inst.isle line 1518.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fle", "src/isa/riscv64/inst.isle line 1516"
    )
}

// Generated as internal constructor for term rv_fgt.
pub fn constructor_rv_fgt<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    let v3 = constructor_rv_flt(ctx, arg0, arg2, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1523.
    return v3;
}

// Generated as internal constructor for term rv_fge.
pub fn constructor_rv_fge<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    let v3 = constructor_rv_fle(ctx, arg0, arg2, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1528.
    return v3;
}

// Generated as internal constructor for term rv_adduw.
pub fn constructor_rv_adduw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Adduw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1536.
    return v6;
}

// Generated as internal constructor for term rv_zextw.
pub fn constructor_rv_zextw<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v1 = C::zero_reg(ctx);
    let v2 = C::xreg_new(ctx, v1);
    let v3 = constructor_rv_adduw(ctx, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 1543.
    return v3;
}

// Generated as internal constructor for term rv_slliuw.
pub fn constructor_rv_slliuw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::SlliUw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1549.
    return v5;
}

// Generated as internal constructor for term rv_andn.
pub fn constructor_rv_andn<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Andn, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1558.
    return v6;
}

// Generated as internal constructor for term rv_orn.
pub fn constructor_rv_orn<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Orn, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1564.
    return v6;
}

// Generated as internal constructor for term rv_clz.
pub fn constructor_rv_clz<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Clz, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1569.
    return v4;
}

// Generated as internal constructor for term rv_clzw.
pub fn constructor_rv_clzw<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Clzw, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1574.
    return v4;
}

// Generated as internal constructor for term rv_ctz.
pub fn constructor_rv_ctz<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Ctz, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1579.
    return v4;
}

// Generated as internal constructor for term rv_ctzw.
pub fn constructor_rv_ctzw<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Ctzw, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1584.
    return v4;
}

// Generated as internal constructor for term rv_cpop.
pub fn constructor_rv_cpop<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Cpop, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1589.
    return v4;
}

// Generated as internal constructor for term rv_cpopw.
pub fn constructor_rv_cpopw<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Cpopw, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1594.
    return v4;
}

// Generated as internal constructor for term rv_max.
pub fn constructor_rv_max<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Max, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1599.
    return v6;
}

// Generated as internal constructor for term rv_maxu.
pub fn constructor_rv_maxu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Maxu, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1604.
    return v6;
}

// Generated as internal constructor for term rv_min.
pub fn constructor_rv_min<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Max, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1609.
    return v6;
}

// Generated as internal constructor for term rv_minu.
pub fn constructor_rv_minu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Minu, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1614.
    return v6;
}

// Generated as internal constructor for term rv_sextb.
pub fn constructor_rv_sextb<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::imm12_const(ctx, 0x0);
    let v5 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Sextb, v2, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1619.
    return v6;
}

// Generated as internal constructor for term rv_sexth.
pub fn constructor_rv_sexth<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::imm12_const(ctx, 0x0);
    let v5 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Sexth, v2, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1624.
    return v6;
}

// Generated as internal constructor for term rv_zexth.
pub fn constructor_rv_zexth<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::imm12_const(ctx, 0x0);
    let v5 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Zexth, v2, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1629.
    return v6;
}

// Generated as internal constructor for term rv_rol.
pub fn constructor_rv_rol<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Rol, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1634.
    return v6;
}

// Generated as internal constructor for term rv_rolw.
pub fn constructor_rv_rolw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Rolw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1639.
    return v6;
}

// Generated as internal constructor for term rv_ror.
pub fn constructor_rv_ror<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Ror, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1644.
    return v6;
}

// Generated as internal constructor for term rv_rorw.
pub fn constructor_rv_rorw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Rorw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1649.
    return v6;
}

// Generated as internal constructor for term rv_rev8.
pub fn constructor_rv_rev8<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Rev8, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1654.
    return v4;
}

// Generated as internal constructor for term rv_brev8.
pub fn constructor_rv_brev8<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Brev8, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1662.
    return v4;
}

// Generated as internal constructor for term rv_bseti.
pub fn constructor_rv_bseti<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Bseti, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1667.
    return v5;
}

// Generated as internal constructor for term rv_pack.
pub fn constructor_rv_pack<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Pack, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1675.
    return v6;
}

// Generated as internal constructor for term rv_packw.
pub fn constructor_rv_packw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Packw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1680.
    return v6;
}

// Generated as internal constructor for term rv_csrrwi.
pub fn constructor_rv_csrrwi<C: Context>(ctx: &mut C, arg0: &CSR, arg1: UImm5) -> XReg {
    let v3 = constructor_csr_imm(ctx, &CsrImmOP::CsrRWI, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1688.
    return v3;
}

// Generated as internal constructor for term rv_fsrmi.
pub fn constructor_rv_fsrmi<C: Context>(ctx: &mut C, arg0: &FRM) -> XReg {
    let v2 = C::frm_bits(ctx, arg0);
    let v3 = constructor_rv_csrrwi(ctx, &CSR::Frm, v2);
    // Rule at src/isa/riscv64/inst.isle line 1693.
    return v3;
}

// Generated as internal constructor for term rv_csrw.
pub fn constructor_rv_csrw<C: Context>(ctx: &mut C, arg0: &CSR, arg1: XReg) -> Unit {
    let v3 = constructor_csr_reg_dst_zero(ctx, &CsrRegOP::CsrRW, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1699.
    return v3;
}

// Generated as internal constructor for term rv_fsrm.
pub fn constructor_rv_fsrm<C: Context>(ctx: &mut C, arg0: XReg) -> Unit {
    let v2 = constructor_rv_csrw(ctx, &CSR::Frm, arg0);
    // Rule at src/isa/riscv64/inst.isle line 1704.
    return v2;
}

// Generated as internal constructor for term shift_mask.
pub fn constructor_shift_mask<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    let v1 = C::lane_type(ctx, arg0);
    let v2 = C::ty_bits(ctx, v1);
    let v3 = C::u8_as_u64(ctx, v2);
    let v5 = C::u64_sub(ctx, v3, 0x1);
    // Rule at src/isa/riscv64/inst.isle line 1712.
    return v5;
}

// Generated as internal constructor for term imm.
pub fn constructor_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: u64) -> Reg {
    match arg0 {
        R32 => {
            let v3 = constructor_imm(ctx, I32, arg1);
            // Rule at src/isa/riscv64/inst.isle line 1732.
            return v3;
        }
        R64 => {
            let v5 = constructor_imm(ctx, I64, arg1);
            // Rule at src/isa/riscv64/inst.isle line 1733.
            return v5;
        }
        F32 => {
            let v3 = constructor_imm(ctx, I32, arg1);
            let v7 = constructor_gen_bitcast(ctx, v3, I32, F32);
            // Rule at src/isa/riscv64/inst.isle line 1736.
            return v7;
        }
        F64 => {
            let v5 = constructor_imm(ctx, I64, arg1);
            let v9 = constructor_gen_bitcast(ctx, v5, I64, F64);
            // Rule at src/isa/riscv64/inst.isle line 1737.
            return v9;
        }
        _ => {}
    }
    let v10 = C::ty_int(ctx, arg0);
    if let Some(v11) = v10 {
        let v12 = C::i64_sextend_u64(ctx, v11, arg1);
        let v13 = C::i64_generate_imm(ctx, v12);
        if let Some(v14) = v13 {
            let v17 = C::imm20_is_zero(ctx, v14.0);
            if let Some(v18) = v17 {
                let v19 = C::zero_reg(ctx);
                let v20 = C::xreg_new(ctx, v19);
                let v21 = constructor_rv_addi(ctx, v20, v14.1);
                let v22 = C::xreg_to_reg(ctx, v21);
                // Rule at src/isa/riscv64/inst.isle line 1740.
                return v22;
            }
            let v23 = C::imm12_is_zero(ctx, v14.1);
            if let Some(v24) = v23 {
                let v25 = constructor_rv_lui(ctx, v14.0);
                let v26 = C::xreg_to_reg(ctx, v25);
                // Rule at src/isa/riscv64/inst.isle line 1747.
                return v26;
            }
            let v25 = constructor_rv_lui(ctx, v14.0);
            let v27 = constructor_rv_addi(ctx, v25, v14.1);
            let v28 = C::xreg_to_reg(ctx, v27);
            // Rule at src/isa/riscv64/inst.isle line 1753.
            return v28;
        }
        let v29 = C::i64_shift_for_lui(ctx, v12);
        if let Some(v30) = v29 {
            let v33 = C::imm20_from_u64(ctx, v30.0);
            if let Some(v34) = v33 {
                let v35 = constructor_rv_lui(ctx, v34);
                let v36 = constructor_rv_slli(ctx, v35, v30.1);
                let v37 = C::xreg_to_reg(ctx, v36);
                // Rule at src/isa/riscv64/inst.isle line 1758.
                return v37;
            }
        }
        let v38 = C::i64_shift(ctx, v12);
        if let Some(v39) = v38 {
            let v42 = C::i64_generate_imm(ctx, v39.0);
            if let Some(v43) = v42 {
                let v46 = C::i64_as_u64(ctx, v39.0);
                let v47 = constructor_imm(ctx, v11, v46);
                let v48 = C::xreg_new(ctx, v47);
                let v49 = constructor_rv_slli(ctx, v48, v39.1);
                let v50 = C::xreg_to_reg(ctx, v49);
                // Rule at src/isa/riscv64/inst.isle line 1767.
                return v50;
            }
        }
        let v51 = C::emit_u64_le_const(ctx, arg1);
        let v52 = C::gen_const_amode(ctx, v51);
        let v54 = C::mem_flags_trusted(ctx);
        let v55 = constructor_gen_load(ctx, v52, &LoadOP::Ld, v54);
        // Rule at src/isa/riscv64/inst.isle line 1773.
        return v55;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "imm", "src/isa/riscv64/inst.isle line 1729"
    )
}

// Generated as internal constructor for term imm12_zero.
pub fn constructor_imm12_zero<C: Context>(ctx: &mut C) -> Imm12 {
    let v1 = C::imm12_const(ctx, 0x0);
    // Rule at src/isa/riscv64/inst.isle line 1782.
    return v1;
}

// Generated as internal constructor for term load_imm12.
pub fn constructor_load_imm12<C: Context>(ctx: &mut C, arg0: i32) -> Reg {
    let v1 = C::zero_reg(ctx);
    let v2 = C::xreg_new(ctx, v1);
    let v3 = C::imm12_const(ctx, arg0);
    let v4 = constructor_rv_addi(ctx, v2, v3);
    let v5 = C::xreg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1789.
    return v5;
}

// Generated as internal constructor for term u64_to_imm12.
pub fn constructor_u64_to_imm12<C: Context>(ctx: &mut C, arg0: u64) -> Option<Imm12> {
    let v1 = C::imm12_from_u64(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/riscv64/inst.isle line 1818.
        return Some(v2);
    }
    None
}

// Generated as internal constructor for term replicated_imm5.
pub fn constructor_replicated_imm5<C: Context>(ctx: &mut C, arg0: Value) -> Option<Imm5> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        match v3 {
            &InstructionData::Unary {
                opcode: ref v4,
                arg: v5,
            } => {
                if let &Opcode::Splat = v4 {
                    let v6 = C::i64_from_iconst(ctx, v5);
                    if let Some(v7) = v6 {
                        let v8 = C::imm5_from_i64(ctx, v7);
                        if let Some(v9) = v8 {
                            // Rule at src/isa/riscv64/inst.isle line 1850.
                            return Some(v9);
                        }
                    }
                }
            }
            &InstructionData::UnaryConst {
                opcode: ref v10,
                constant_handle: v11,
            } => {
                if let &Opcode::Vconst = v10 {
                    let v12 = C::u128_from_constant(ctx, v11);
                    if let Some(v13) = v12 {
                        let v14 = C::u128_replicated_u64(ctx, v13);
                        if let Some(v15) = v14 {
                            let v16 = C::u64_replicated_u32(ctx, v15);
                            if let Some(v17) = v16 {
                                let v18 = C::u32_replicated_u16(ctx, v17);
                                if let Some(v19) = v18 {
                                    let v20 = C::u16_replicated_u8(ctx, v19);
                                    if let Some(v21) = v20 {
                                        let v22 = C::u8_as_i8(ctx, v21);
                                        let v23 = C::i8_to_imm5(ctx, v22);
                                        if let Some(v24) = v23 {
                                            // Rule at src/isa/riscv64/inst.isle line 1851.
                                            return Some(v24);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            _ => {}
        }
    }
    None
}

// Generated as internal constructor for term replicated_uimm5.
pub fn constructor_replicated_uimm5<C: Context>(ctx: &mut C, arg0: Value) -> Option<UImm5> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        match v3 {
            &InstructionData::Unary {
                opcode: ref v4,
                arg: v5,
            } => {
                if let &Opcode::Splat = v4 {
                    let v6 = C::def_inst(ctx, v5);
                    if let Some(v7) = v6 {
                        let v8 = &C::inst_data(ctx, v7);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v9,
                            imm: v10,
                        } = v8
                        {
                            if let &Opcode::Iconst = v9 {
                                let v11 = C::u64_from_imm64(ctx, v10);
                                let v12 = C::uimm5_from_u64(ctx, v11);
                                if let Some(v13) = v12 {
                                    // Rule at src/isa/riscv64/inst.isle line 1863.
                                    return Some(v13);
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryConst {
                opcode: ref v14,
                constant_handle: v15,
            } => {
                if let &Opcode::Vconst = v14 {
                    let v16 = C::u128_from_constant(ctx, v15);
                    if let Some(v17) = v16 {
                        let v18 = C::u128_replicated_u64(ctx, v17);
                        if let Some(v19) = v18 {
                            let v20 = C::u64_replicated_u32(ctx, v19);
                            if let Some(v21) = v20 {
                                let v22 = C::u32_replicated_u16(ctx, v21);
                                if let Some(v23) = v22 {
                                    let v24 = C::u16_replicated_u8(ctx, v23);
                                    if let Some(v25) = v24 {
                                        let v26 = C::uimm5_from_u8(ctx, v25);
                                        if let Some(v27) = v26 {
                                            // Rule at src/isa/riscv64/inst.isle line 1864.
                                            return Some(v27);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            _ => {}
        }
    }
    None
}

// Generated as internal constructor for term u64_to_uimm5.
pub fn constructor_u64_to_uimm5<C: Context>(ctx: &mut C, arg0: u64) -> Option<UImm5> {
    let v1 = C::uimm5_from_u64(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/riscv64/inst.isle line 1887.
        return Some(v2);
    }
    None
}

// Generated as internal constructor for term canonical_nan_u64.
pub fn constructor_canonical_nan_u64<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    match arg0 {
        F32 => {
            // Rule at src/isa/riscv64/inst.isle line 1896.
            return 0x7FC00000;
        }
        F64 => {
            // Rule at src/isa/riscv64/inst.isle line 1897.
            return 0x7FF8000000000000;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "canonical_nan_u64", "src/isa/riscv64/inst.isle line 1895"
    )
}

// Generated as internal constructor for term fpu_rr.
pub fn constructor_fpu_rr<C: Context>(ctx: &mut C, arg0: &FpuOPRR, arg1: Type, arg2: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg1);
    let v4 = C::gen_default_frm(ctx);
    let v5 = MInst::FpuRR {
        alu_op: arg0.clone(),
        frm: v4,
        rd: v3,
        rs: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1904.
    return v7;
}

// Generated as internal constructor for term alu_rrr.
pub fn constructor_alu_rrr<C: Context>(ctx: &mut C, arg0: &AluOPRRR, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v5 = MInst::AluRRR {
        alu_op: arg0.clone(),
        rd: v4,
        rs1: arg1,
        rs2: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = constructor_writable_xreg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1911.
    return v7;
}

// Generated as internal constructor for term fpu_rrr.
pub fn constructor_fpu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &FpuOPRRR,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg1);
    let v5 = C::gen_default_frm(ctx);
    let v6 = MInst::FpuRRR {
        alu_op: arg0.clone(),
        frm: v5,
        rd: v4,
        rs1: arg2,
        rs2: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1918.
    return v8;
}

// Generated as internal constructor for term fpu_rrrr.
pub fn constructor_fpu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: &FpuOPRRRR,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg1);
    let v6 = C::gen_default_frm(ctx);
    let v7 = MInst::FpuRRRR {
        alu_op: arg0.clone(),
        frm: v6,
        rd: v5,
        rs1: arg2,
        rs2: arg3,
        rs3: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1925.
    return v9;
}

// Generated as internal constructor for term alu_rr_imm12.
pub fn constructor_alu_rr_imm12<C: Context>(
    ctx: &mut C,
    arg0: &AluOPRRI,
    arg1: Reg,
    arg2: Imm12,
) -> Reg {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v5 = MInst::AluRRImm12 {
        alu_op: arg0.clone(),
        rd: v4,
        rs: arg1,
        imm12: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = constructor_writable_xreg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1933.
    return v7;
}

// Generated as internal constructor for term alu_rr_funct12.
pub fn constructor_alu_rr_funct12<C: Context>(ctx: &mut C, arg0: &AluOPRRI, arg1: Reg) -> Reg {
    let v2 = constructor_temp_writable_xreg(ctx);
    let v3 = C::writable_xreg_to_writable_reg(ctx, v2);
    let v4 = constructor_imm12_zero(ctx);
    let v5 = MInst::AluRRImm12 {
        alu_op: arg0.clone(),
        rd: v3,
        rs: arg1,
        imm12: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = constructor_writable_xreg_to_reg(ctx, v2);
    // Rule at src/isa/riscv64/inst.isle line 1941.
    return v7;
}

// Generated as internal constructor for term rv_lui.
pub fn constructor_rv_lui<C: Context>(ctx: &mut C, arg0: Imm20) -> XReg {
    let v1 = constructor_temp_writable_xreg(ctx);
    let v2 = C::writable_xreg_to_writable_reg(ctx, v1);
    let v3 = MInst::Lui { rd: v2, imm: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_xreg_to_xreg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 1950.
    return v5;
}

// Generated as internal constructor for term csr_imm.
pub fn constructor_csr_imm<C: Context>(
    ctx: &mut C,
    arg0: &CsrImmOP,
    arg1: &CSR,
    arg2: UImm5,
) -> XReg {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v5 = MInst::CsrImm {
        op: arg0.clone(),
        rd: v4,
        imm: arg2,
        csr: arg1.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xreg_to_xreg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1957.
    return v7;
}

// Generated as internal constructor for term csr_reg_dst_zero.
pub fn constructor_csr_reg_dst_zero<C: Context>(
    ctx: &mut C,
    arg0: &CsrRegOP,
    arg1: &CSR,
    arg2: XReg,
) -> Unit {
    let v3 = C::writable_zero_reg(ctx);
    let v4 = C::xreg_to_reg(ctx, arg2);
    let v5 = MInst::CsrReg {
        op: arg0.clone(),
        rd: v3,
        rs: v4,
        csr: arg1.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    // Rule at src/isa/riscv64/inst.isle line 1964.
    return v6;
}

// Generated as internal constructor for term select_addi.
pub fn constructor_select_addi<C: Context>(ctx: &mut C, arg0: Type) -> AluOPRRI {
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/riscv64/inst.isle line 1970.
        return AluOPRRI::Addiw;
    }
    let v4 = C::fits_in_64(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/riscv64/inst.isle line 1971.
        return AluOPRRI::Addi;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "select_addi", "src/isa/riscv64/inst.isle line 1969"
    )
}

// Generated as internal constructor for term gen_bnot.
pub fn constructor_gen_bnot<C: Context>(ctx: &mut C, arg0: Type, arg1: ValueRegs) -> ValueRegs {
    let v1 = C::ty_scalar_float(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = C::value_regs_get(ctx, arg1, 0x0);
        let v6 = C::freg_new(ctx, v5);
        let v7 = constructor_move_f_to_x(ctx, v6, v2);
        let v8 = constructor_rv_not(ctx, v7);
        let v9 = constructor_float_int_of_same_size(ctx, v2);
        let v10 = constructor_move_x_to_f(ctx, v8, v9);
        let v11 = C::freg_to_reg(ctx, v10);
        let v12 = C::value_reg(ctx, v11);
        // Rule at src/isa/riscv64/inst.isle line 1975.
        return v12;
    }
    if arg0 == I128 {
        let v5 = C::value_regs_get(ctx, arg1, 0x0);
        let v13 = C::xreg_new(ctx, v5);
        let v14 = constructor_rv_not(ctx, v13);
        let v16 = C::value_regs_get(ctx, arg1, 0x1);
        let v17 = C::xreg_new(ctx, v16);
        let v18 = constructor_rv_not(ctx, v17);
        let v19 = C::xreg_to_reg(ctx, v14);
        let v20 = C::xreg_to_reg(ctx, v18);
        let v21 = C::value_regs(ctx, v19, v20);
        // Rule at src/isa/riscv64/inst.isle line 1982.
        return v21;
    }
    let v22 = C::ty_int_ref_scalar_64_extract(ctx, arg0);
    if let Some(v23) = v22 {
        let v5 = C::value_regs_get(ctx, arg1, 0x0);
        let v13 = C::xreg_new(ctx, v5);
        let v14 = constructor_rv_not(ctx, v13);
        let v19 = C::xreg_to_reg(ctx, v14);
        let v24 = C::value_reg(ctx, v19);
        // Rule at src/isa/riscv64/inst.isle line 1987.
        return v24;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_bnot", "src/isa/riscv64/inst.isle line 1974"
    )
}

// Generated as internal constructor for term gen_and.
pub fn constructor_gen_and<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: ValueRegs,
    arg2: ValueRegs,
) -> ValueRegs {
    if arg0 == I128 {
        let v4 = C::value_regs_get(ctx, arg1, 0x0);
        let v5 = C::xreg_new(ctx, v4);
        let v6 = C::value_regs_get(ctx, arg2, 0x0);
        let v7 = C::xreg_new(ctx, v6);
        let v8 = constructor_rv_and(ctx, v5, v7);
        let v11 = C::value_regs_get(ctx, arg1, 0x1);
        let v12 = C::xreg_new(ctx, v11);
        let v13 = C::value_regs_get(ctx, arg2, 0x1);
        let v14 = C::xreg_new(ctx, v13);
        let v15 = constructor_rv_and(ctx, v12, v14);
        let v9 = C::xreg_to_reg(ctx, v8);
        let v16 = C::xreg_to_reg(ctx, v15);
        let v17 = C::value_regs(ctx, v9, v16);
        // Rule at src/isa/riscv64/inst.isle line 1992.
        return v17;
    }
    let v18 = C::fits_in_64(ctx, arg0);
    if let Some(v19) = v18 {
        let v4 = C::value_regs_get(ctx, arg1, 0x0);
        let v5 = C::xreg_new(ctx, v4);
        let v6 = C::value_regs_get(ctx, arg2, 0x0);
        let v7 = C::xreg_new(ctx, v6);
        let v8 = constructor_rv_and(ctx, v5, v7);
        let v9 = C::xreg_to_reg(ctx, v8);
        let v20 = C::value_reg(ctx, v9);
        // Rule at src/isa/riscv64/inst.isle line 1997.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_and", "src/isa/riscv64/inst.isle line 1991"
    )
}

// Generated as internal constructor for term gen_andi.
pub fn constructor_gen_andi<C: Context>(ctx: &mut C, arg0: XReg, arg1: u64) -> XReg {
    let v2 = C::imm12_from_u64(ctx, arg1);
    if let Some(v3) = v2 {
        let v4 = constructor_rv_andi(ctx, arg0, v3);
        // Rule at src/isa/riscv64/inst.isle line 2002.
        return v4;
    }
    let v6 = constructor_imm(ctx, I64, arg1);
    let v7 = C::xreg_new(ctx, v6);
    let v8 = constructor_rv_and(ctx, arg0, v7);
    // Rule at src/isa/riscv64/inst.isle line 2005.
    return v8;
}

// Generated as internal constructor for term gen_or.
pub fn constructor_gen_or<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: ValueRegs,
    arg2: ValueRegs,
) -> ValueRegs {
    if arg0 == I128 {
        let v4 = C::value_regs_get(ctx, arg1, 0x0);
        let v5 = C::xreg_new(ctx, v4);
        let v6 = C::value_regs_get(ctx, arg2, 0x0);
        let v7 = C::xreg_new(ctx, v6);
        let v8 = constructor_rv_or(ctx, v5, v7);
        let v11 = C::value_regs_get(ctx, arg1, 0x1);
        let v12 = C::xreg_new(ctx, v11);
        let v13 = C::value_regs_get(ctx, arg2, 0x1);
        let v14 = C::xreg_new(ctx, v13);
        let v15 = constructor_rv_or(ctx, v12, v14);
        let v9 = C::xreg_to_reg(ctx, v8);
        let v16 = C::xreg_to_reg(ctx, v15);
        let v17 = C::value_regs(ctx, v9, v16);
        // Rule at src/isa/riscv64/inst.isle line 2010.
        return v17;
    }
    let v18 = C::fits_in_64(ctx, arg0);
    if let Some(v19) = v18 {
        let v4 = C::value_regs_get(ctx, arg1, 0x0);
        let v5 = C::xreg_new(ctx, v4);
        let v6 = C::value_regs_get(ctx, arg2, 0x0);
        let v7 = C::xreg_new(ctx, v6);
        let v8 = constructor_rv_or(ctx, v5, v7);
        let v9 = C::xreg_to_reg(ctx, v8);
        let v20 = C::value_reg(ctx, v9);
        // Rule at src/isa/riscv64/inst.isle line 2015.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_or", "src/isa/riscv64/inst.isle line 2009"
    )
}

// Generated as internal constructor for term lower_bit_reverse.
pub fn constructor_lower_bit_reverse<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    match arg1 {
        I8 => {
            let v3 = constructor_gen_brev8(ctx, arg0, I8);
            // Rule at src/isa/riscv64/inst.isle line 2021.
            return v3;
        }
        I16 => {
            let v5 = constructor_gen_brev8(ctx, arg0, I16);
            let v6 = C::xreg_new(ctx, v5);
            let v7 = constructor_gen_rev8(ctx, v6);
            let v9 = C::imm12_const(ctx, 0x30);
            let v10 = constructor_rv_srli(ctx, v7, v9);
            let v11 = C::xreg_to_reg(ctx, v10);
            // Rule at src/isa/riscv64/inst.isle line 2025.
            return v11;
        }
        I32 => {
            let v13 = constructor_gen_brev8(ctx, arg0, I32);
            let v14 = C::xreg_new(ctx, v13);
            let v15 = constructor_gen_rev8(ctx, v14);
            let v17 = C::imm12_const(ctx, 0x20);
            let v18 = constructor_rv_srli(ctx, v15, v17);
            let v19 = C::xreg_to_reg(ctx, v18);
            // Rule at src/isa/riscv64/inst.isle line 2033.
            return v19;
        }
        I64 => {
            let v20 = C::xreg_new(ctx, arg0);
            let v21 = constructor_gen_rev8(ctx, v20);
            let v22 = C::xreg_to_reg(ctx, v21);
            let v24 = constructor_gen_brev8(ctx, v22, I64);
            // Rule at src/isa/riscv64/inst.isle line 2041.
            return v24;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bit_reverse", "src/isa/riscv64/inst.isle line 2018"
    )
}

// Generated as internal constructor for term lower_ctz.
pub fn constructor_lower_ctz<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v8 = C::has_zbb(ctx);
    if v8 == true {
        match arg0 {
            I32 => {
                let v3 = C::xreg_new(ctx, arg1);
                let v15 = constructor_rv_ctzw(ctx, v3);
                let v16 = C::xreg_to_reg(ctx, v15);
                // Rule at src/isa/riscv64/inst.isle line 2056.
                return v16;
            }
            I64 => {
                let v3 = C::xreg_new(ctx, arg1);
                let v17 = constructor_rv_ctz(ctx, v3);
                let v18 = C::xreg_to_reg(ctx, v17);
                // Rule at src/isa/riscv64/inst.isle line 2060.
                return v18;
            }
            _ => {}
        }
        let v6 = C::fits_in_16(ctx, arg0);
        if let Some(v7) = v6 {
            let v9 = C::ty_bits(ctx, v7);
            let v10 = C::u8_as_u64(ctx, v9);
            let v11 = constructor_gen_bseti(ctx, arg1, v10);
            let v12 = C::xreg_new(ctx, v11);
            let v13 = constructor_rv_ctzw(ctx, v12);
            let v14 = C::xreg_to_reg(ctx, v13);
            // Rule at src/isa/riscv64/inst.isle line 2051.
            return v14;
        }
    }
    let v3 = C::xreg_new(ctx, arg1);
    let v4 = constructor_gen_cltz(ctx, false, v3, arg0);
    let v5 = C::xreg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 2048.
    return v5;
}

// Generated as internal constructor for term gen_cltz.
pub fn constructor_gen_cltz<C: Context>(ctx: &mut C, arg0: bool, arg1: XReg, arg2: Type) -> XReg {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = constructor_temp_writable_xreg(ctx);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v5);
    let v7 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v8 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v9 = C::xreg_to_reg(ctx, arg1);
    let v10 = MInst::Cltz {
        leading: arg0,
        sum: v6,
        step: v7,
        tmp: v8,
        rs: v9,
        ty: arg2,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_xreg_to_xreg(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 2068.
    return v12;
}

// Generated as internal constructor for term zext.
pub fn constructor_zext<C: Context>(ctx: &mut C, arg0: Value) -> XReg {
    let v25 = constructor_val_already_extended(ctx, arg0);
    if let Some(v26) = v25 {
        let v12 = constructor_put_in_xreg(ctx, arg0);
        // Rule at src/isa/riscv64/inst.isle line 2112.
        return v12;
    }
    let v1 = C::value_type(ctx, arg0);
    match v1 {
        I8 => {
            let v12 = constructor_put_in_xreg(ctx, arg0);
            let v14 = C::imm12_const(ctx, 0xFF);
            let v15 = constructor_rv_andi(ctx, v12, v14);
            // Rule at src/isa/riscv64/inst.isle line 2084.
            return v15;
        }
        I16 => {
            let v21 = C::has_zbb(ctx);
            if v21 == true {
                let v12 = constructor_put_in_xreg(ctx, arg0);
                let v22 = constructor_rv_zexth(ctx, v12);
                // Rule at src/isa/riscv64/inst.isle line 2101.
                return v22;
            }
            let v16 = C::has_zbkb(ctx);
            if v16 == true {
                let v12 = constructor_put_in_xreg(ctx, arg0);
                let v17 = C::zero_reg(ctx);
                let v18 = C::xreg_new(ctx, v17);
                let v19 = constructor_rv_packw(ctx, v12, v18);
                // Rule at src/isa/riscv64/inst.isle line 2091.
                return v19;
            }
        }
        I32 => {
            let v23 = C::has_zba(ctx);
            if v23 == true {
                let v12 = constructor_put_in_xreg(ctx, arg0);
                let v24 = constructor_rv_zextw(ctx, v12);
                // Rule at src/isa/riscv64/inst.isle line 2106.
                return v24;
            }
            let v16 = C::has_zbkb(ctx);
            if v16 == true {
                let v12 = constructor_put_in_xreg(ctx, arg0);
                let v17 = C::zero_reg(ctx);
                let v18 = C::xreg_new(ctx, v17);
                let v20 = constructor_rv_pack(ctx, v12, v18);
                // Rule at src/isa/riscv64/inst.isle line 2096.
                return v20;
            }
        }
        _ => {}
    }
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v5 = C::ty_bits(ctx, v3);
        let v6 = C::u8_as_u64(ctx, v5);
        let v7 = C::u64_sub(ctx, 0x40, v6);
        let v8 = C::imm_from_bits(ctx, v7);
        let v9 = constructor_put_in_xreg(ctx, arg0);
        let v10 = constructor_rv_slli(ctx, v9, v8);
        let v11 = constructor_rv_srli(ctx, v10, v8);
        // Rule at src/isa/riscv64/inst.isle line 2079.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "zext", "src/isa/riscv64/inst.isle line 2076"
    )
}

// Generated as internal constructor for term sext.
pub fn constructor_sext<C: Context>(ctx: &mut C, arg0: Value) -> XReg {
    let v17 = constructor_val_already_extended(ctx, arg0);
    if let Some(v18) = v17 {
        let v13 = constructor_put_in_xreg(ctx, arg0);
        // Rule at src/isa/riscv64/inst.isle line 2141.
        return v13;
    }
    let v1 = C::value_type(ctx, arg0);
    match v1 {
        I8 => {
            let v12 = C::has_zbb(ctx);
            if v12 == true {
                let v13 = constructor_put_in_xreg(ctx, arg0);
                let v14 = constructor_rv_sextb(ctx, v13);
                // Rule at src/isa/riscv64/inst.isle line 2125.
                return v14;
            }
        }
        I16 => {
            let v12 = C::has_zbb(ctx);
            if v12 == true {
                let v13 = constructor_put_in_xreg(ctx, arg0);
                let v15 = constructor_rv_sexth(ctx, v13);
                // Rule at src/isa/riscv64/inst.isle line 2130.
                return v15;
            }
        }
        I32 => {
            let v13 = constructor_put_in_xreg(ctx, arg0);
            let v16 = constructor_rv_sextw(ctx, v13);
            // Rule at src/isa/riscv64/inst.isle line 2136.
            return v16;
        }
        _ => {}
    }
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v5 = C::ty_bits(ctx, v3);
        let v6 = C::u8_as_u64(ctx, v5);
        let v7 = C::u64_sub(ctx, 0x40, v6);
        let v8 = C::imm_from_bits(ctx, v7);
        let v9 = constructor_put_in_xreg(ctx, arg0);
        let v10 = constructor_rv_slli(ctx, v9, v8);
        let v11 = constructor_rv_srai(ctx, v10, v8);
        // Rule at src/isa/riscv64/inst.isle line 2120.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sext", "src/isa/riscv64/inst.isle line 2117"
    )
}

// Generated as internal constructor for term val_already_extended.
pub fn constructor_val_already_extended<C: Context>(ctx: &mut C, arg0: Value) -> Option<bool> {
    let v3 = C::def_inst(ctx, arg0);
    if let Some(v4) = v3 {
        let v5 = &C::inst_data(ctx, v4);
        match v5 {
            &InstructionData::FloatCompare {
                opcode: ref v14,
                args: ref v15,
                cond: ref v16,
            } => {
                if let &Opcode::Fcmp = v14 {
                    // Rule at src/isa/riscv64/inst.isle line 2160.
                    return Some(true);
                }
            }
            &InstructionData::IntCompare {
                opcode: ref v8,
                args: ref v9,
                cond: ref v10,
            } => {
                if let &Opcode::Icmp = v8 {
                    // Rule at src/isa/riscv64/inst.isle line 2159.
                    return Some(true);
                }
            }
            &InstructionData::Unary {
                opcode: ref v6,
                arg: v7,
            } => {
                match v6 {
                    &Opcode::Uextend => {
                        // Rule at src/isa/riscv64/inst.isle line 2154.
                        return Some(true);
                    }
                    &Opcode::Sextend => {
                        // Rule at src/isa/riscv64/inst.isle line 2155.
                        return Some(true);
                    }
                    _ => {}
                }
            }
            _ => {}
        }
    }
    let v1 = C::value_type(ctx, arg0);
    if v1 == I64 {
        // Rule at src/isa/riscv64/inst.isle line 2150.
        return Some(true);
    }
    None
}

// Generated as internal constructor for term lower_b128_binary.
pub fn constructor_lower_b128_binary<C: Context>(
    ctx: &mut C,
    arg0: &AluOPRRR,
    arg1: ValueRegs,
    arg2: ValueRegs,
) -> ValueRegs {
    let v4 = C::value_regs_get(ctx, arg1, 0x0);
    let v5 = C::value_regs_get(ctx, arg2, 0x0);
    let v6 = constructor_alu_rrr(ctx, arg0, v4, v5);
    let v7 = C::xreg_new(ctx, v6);
    let v9 = C::value_regs_get(ctx, arg1, 0x1);
    let v10 = C::value_regs_get(ctx, arg2, 0x1);
    let v11 = constructor_alu_rrr(ctx, arg0, v9, v10);
    let v12 = C::xreg_new(ctx, v11);
    let v13 = C::xreg_to_reg(ctx, v7);
    let v14 = C::xreg_to_reg(ctx, v12);
    let v15 = C::value_regs(ctx, v13, v14);
    // Rule at src/isa/riscv64/inst.isle line 2169.
    return v15;
}

// Generated as internal constructor for term lower_smlhi.
pub fn constructor_lower_smlhi<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: XReg,
    arg2: XReg,
) -> XReg {
    if arg0 == I64 {
        let v3 = constructor_rv_mulh(ctx, arg1, arg2);
        // Rule at src/isa/riscv64/inst.isle line 2178.
        return v3;
    }
    let v4 = constructor_rv_mul(ctx, arg1, arg2);
    let v5 = C::ty_bits(ctx, arg0);
    let v6 = C::u8_as_i32(ctx, v5);
    let v7 = C::imm12_const(ctx, v6);
    let v8 = constructor_rv_srli(ctx, v4, v7);
    // Rule at src/isa/riscv64/inst.isle line 2183.
    return v8;
}

// Generated as internal constructor for term lower_rotl.
pub fn constructor_lower_rotl<C: Context>(ctx: &mut C, arg0: Type, arg1: XReg, arg2: XReg) -> XReg {
    match arg0 {
        I32 => {
            let v3 = C::has_zbb(ctx);
            match v3 {
                true => {
                    let v7 = constructor_rv_rolw(ctx, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2201.
                    return v7;
                }
                false => {
                    let v9 = constructor_lower_rotl_shift(ctx, I32, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2207.
                    return v9;
                }
                _ => {}
            }
        }
        I64 => {
            let v3 = C::has_zbb(ctx);
            match v3 {
                true => {
                    let v4 = constructor_rv_rol(ctx, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2191.
                    return v4;
                }
                false => {
                    let v6 = constructor_lower_rotl_shift(ctx, I64, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2197.
                    return v6;
                }
                _ => {}
            }
        }
        _ => {}
    }
    let v10 = constructor_lower_rotl_shift(ctx, arg0, arg1, arg2);
    // Rule at src/isa/riscv64/inst.isle line 2211.
    return v10;
}

// Generated as internal constructor for term lower_rotl_shift.
pub fn constructor_lower_rotl_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: XReg,
    arg2: XReg,
) -> XReg {
    let v3 = C::gen_shamt(ctx, arg0, arg2);
    let v5 = C::value_regs_get(ctx, v3, 0x0);
    let v7 = C::value_regs_get(ctx, v3, 0x1);
    let v8 = C::xreg_new(ctx, v5);
    let v9 = constructor_rv_sll(ctx, arg1, v8);
    let v11 = C::xreg_new(ctx, v7);
    let v12 = constructor_rv_srl(ctx, arg1, v11);
    let v14 = C::xreg_new(ctx, v5);
    let v15 = constructor_cmp_eqz(ctx, v14);
    let v16 = C::zero_reg(ctx);
    let v17 = C::xreg_new(ctx, v16);
    let v13 = C::xreg_to_reg(ctx, v12);
    let v18 = C::xreg_new(ctx, v13);
    let v19 = constructor_gen_select_xreg(ctx, v15, v17, v18);
    let v10 = C::xreg_to_reg(ctx, v9);
    let v21 = C::xreg_new(ctx, v10);
    let v20 = C::xreg_to_reg(ctx, v19);
    let v22 = C::xreg_new(ctx, v20);
    let v23 = constructor_rv_or(ctx, v21, v22);
    // Rule at src/isa/riscv64/inst.isle line 2220.
    return v23;
}

// Generated as internal constructor for term lower_rotr.
pub fn constructor_lower_rotr<C: Context>(ctx: &mut C, arg0: Type, arg1: XReg, arg2: XReg) -> XReg {
    match arg0 {
        I32 => {
            let v3 = C::has_zbb(ctx);
            match v3 {
                true => {
                    let v7 = constructor_rv_rorw(ctx, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2250.
                    return v7;
                }
                false => {
                    let v9 = constructor_lower_rotr_shift(ctx, I32, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2256.
                    return v9;
                }
                _ => {}
            }
        }
        I64 => {
            let v3 = C::has_zbb(ctx);
            match v3 {
                true => {
                    let v4 = constructor_rv_ror(ctx, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2241.
                    return v4;
                }
                false => {
                    let v6 = constructor_lower_rotr_shift(ctx, I64, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2246.
                    return v6;
                }
                _ => {}
            }
        }
        _ => {}
    }
    let v10 = constructor_lower_rotr_shift(ctx, arg0, arg1, arg2);
    // Rule at src/isa/riscv64/inst.isle line 2260.
    return v10;
}

// Generated as internal constructor for term lower_rotr_shift.
pub fn constructor_lower_rotr_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: XReg,
    arg2: XReg,
) -> XReg {
    let v3 = C::gen_shamt(ctx, arg0, arg2);
    let v5 = C::value_regs_get(ctx, v3, 0x0);
    let v6 = C::xreg_new(ctx, v5);
    let v8 = C::value_regs_get(ctx, v3, 0x1);
    let v9 = C::xreg_new(ctx, v8);
    let v10 = constructor_rv_srl(ctx, arg1, v6);
    let v11 = constructor_rv_sll(ctx, arg1, v9);
    let v12 = constructor_cmp_eqz(ctx, v6);
    let v13 = C::zero_reg(ctx);
    let v14 = C::xreg_new(ctx, v13);
    let v15 = constructor_gen_select_xreg(ctx, v12, v14, v11);
    let v16 = constructor_rv_or(ctx, v10, v15);
    // Rule at src/isa/riscv64/inst.isle line 2268.
    return v16;
}

// Generated as internal constructor for term gen_bseti.
pub fn constructor_gen_bseti<C: Context>(ctx: &mut C, arg0: Reg, arg1: u64) -> Reg {
    let v2 = C::has_zbs(ctx);
    match v2 {
        true => {
            let v13 = C::xreg_new(ctx, arg0);
            let v18 = C::u64_as_i32(ctx, arg1);
            let v19 = C::imm12_const(ctx, v18);
            let v20 = constructor_rv_bseti(ctx, v13, v19);
            let v21 = C::xreg_to_reg(ctx, v20);
            // Rule at src/isa/riscv64/inst.isle line 2296.
            return v21;
        }
        false => {
            let v4 = C::u64_le(ctx, arg1, 0xC);
            match v4 {
                true => {
                    let v13 = C::xreg_new(ctx, arg0);
                    let v7 = C::u64_shl(ctx, 0x1, arg1);
                    let v14 = C::u64_as_i32(ctx, v7);
                    let v15 = C::imm12_const(ctx, v14);
                    let v16 = constructor_rv_ori(ctx, v13, v15);
                    let v17 = C::xreg_to_reg(ctx, v16);
                    // Rule at src/isa/riscv64/inst.isle line 2291.
                    return v17;
                }
                false => {
                    let v7 = C::u64_shl(ctx, 0x1, arg1);
                    let v8 = constructor_imm(ctx, I64, v7);
                    let v9 = C::xreg_new(ctx, v8);
                    let v10 = C::xreg_new(ctx, arg0);
                    let v11 = constructor_rv_or(ctx, v10, v9);
                    let v12 = C::xreg_to_reg(ctx, v11);
                    // Rule at src/isa/riscv64/inst.isle line 2285.
                    return v12;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_bseti", "src/isa/riscv64/inst.isle line 2284"
    )
}

// Generated as internal constructor for term gen_popcnt.
pub fn constructor_gen_popcnt<C: Context>(ctx: &mut C, arg0: XReg) -> Reg {
    let v1 = constructor_temp_writable_xreg(ctx);
    let v2 = constructor_temp_writable_xreg(ctx);
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v5 = C::writable_xreg_to_writable_reg(ctx, v2);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v1);
    let v7 = C::xreg_to_reg(ctx, arg0);
    let v9 = MInst::Popcnt {
        sum: v4,
        step: v5,
        tmp: v6,
        rs: v7,
        ty: I64,
    };
    let v10 = C::emit(ctx, &v9);
    let v11 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 2302.
    return v11;
}

// Generated as internal constructor for term lower_i128_rotl.
pub fn constructor_lower_i128_rotl<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v4 = C::value_regs_get(ctx, arg1, 0x0);
    let v5 = C::xreg_new(ctx, v4);
    let v6 = C::gen_shamt(ctx, I128, v5);
    let v7 = C::value_regs_get(ctx, v6, 0x0);
    let v8 = C::xreg_new(ctx, v7);
    let v10 = C::value_regs_get(ctx, v6, 0x1);
    let v11 = C::xreg_new(ctx, v10);
    let v12 = C::value_regs_get(ctx, arg0, 0x0);
    let v13 = C::xreg_new(ctx, v12);
    let v14 = constructor_rv_sll(ctx, v13, v8);
    let v15 = C::value_regs_get(ctx, arg0, 0x1);
    let v16 = C::xreg_new(ctx, v15);
    let v17 = constructor_rv_srl(ctx, v16, v11);
    let v18 = constructor_cmp_eqz(ctx, v8);
    let v19 = C::zero_reg(ctx);
    let v20 = C::xreg_new(ctx, v19);
    let v21 = constructor_gen_select_xreg(ctx, v18, v20, v17);
    let v22 = constructor_rv_or(ctx, v14, v21);
    let v23 = C::value_regs_get(ctx, arg0, 0x1);
    let v24 = C::xreg_new(ctx, v23);
    let v25 = constructor_rv_sll(ctx, v24, v8);
    let v26 = C::value_regs_get(ctx, arg0, 0x0);
    let v27 = C::xreg_new(ctx, v26);
    let v28 = constructor_rv_srl(ctx, v27, v11);
    let v29 = constructor_cmp_eqz(ctx, v8);
    let v30 = C::zero_reg(ctx);
    let v31 = C::xreg_new(ctx, v30);
    let v32 = constructor_gen_select_xreg(ctx, v29, v31, v28);
    let v33 = constructor_rv_or(ctx, v25, v32);
    let v36 = constructor_imm(ctx, I64, 0x40);
    let v37 = C::xreg_new(ctx, v36);
    let v38 = C::value_regs_get(ctx, arg1, 0x0);
    let v39 = C::xreg_new(ctx, v38);
    let v41 = C::imm12_const(ctx, 0x7F);
    let v42 = constructor_rv_andi(ctx, v39, v41);
    let v43 = constructor_cmp_geu(ctx, v42, v37);
    let v44 = C::xreg_to_reg(ctx, v33);
    let v45 = C::xreg_to_reg(ctx, v22);
    let v46 = C::value_regs(ctx, v44, v45);
    let v47 = C::value_regs(ctx, v45, v44);
    let v48 = constructor_gen_select_regs(ctx, v43, v46, v47);
    // Rule at src/isa/riscv64/inst.isle line 2313.
    return v48;
}

// Generated as internal constructor for term lower_i128_rotr.
pub fn constructor_lower_i128_rotr<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v4 = C::value_regs_get(ctx, arg1, 0x0);
    let v5 = C::xreg_new(ctx, v4);
    let v6 = C::gen_shamt(ctx, I128, v5);
    let v7 = C::value_regs_get(ctx, v6, 0x0);
    let v8 = C::xreg_new(ctx, v7);
    let v10 = C::value_regs_get(ctx, v6, 0x1);
    let v11 = C::xreg_new(ctx, v10);
    let v12 = C::value_regs_get(ctx, arg0, 0x0);
    let v13 = C::xreg_new(ctx, v12);
    let v14 = constructor_rv_srl(ctx, v13, v8);
    let v15 = C::value_regs_get(ctx, arg0, 0x1);
    let v16 = C::xreg_new(ctx, v15);
    let v17 = constructor_rv_sll(ctx, v16, v11);
    let v18 = constructor_cmp_eqz(ctx, v8);
    let v19 = C::zero_reg(ctx);
    let v20 = C::xreg_new(ctx, v19);
    let v21 = constructor_gen_select_xreg(ctx, v18, v20, v17);
    let v22 = constructor_rv_or(ctx, v14, v21);
    let v23 = C::value_regs_get(ctx, arg0, 0x1);
    let v24 = C::xreg_new(ctx, v23);
    let v25 = constructor_rv_srl(ctx, v24, v8);
    let v26 = C::value_regs_get(ctx, arg0, 0x0);
    let v27 = C::xreg_new(ctx, v26);
    let v28 = constructor_rv_sll(ctx, v27, v11);
    let v29 = constructor_cmp_eqz(ctx, v8);
    let v30 = C::zero_reg(ctx);
    let v31 = C::xreg_new(ctx, v30);
    let v32 = constructor_gen_select_xreg(ctx, v29, v31, v28);
    let v33 = constructor_rv_or(ctx, v25, v32);
    let v36 = constructor_imm(ctx, I64, 0x40);
    let v37 = C::xreg_new(ctx, v36);
    let v38 = C::value_regs_get(ctx, arg1, 0x0);
    let v39 = C::xreg_new(ctx, v38);
    let v41 = C::imm12_const(ctx, 0x7F);
    let v42 = constructor_rv_andi(ctx, v39, v41);
    let v43 = constructor_cmp_geu(ctx, v42, v37);
    let v44 = C::xreg_to_reg(ctx, v33);
    let v45 = C::xreg_to_reg(ctx, v22);
    let v46 = C::value_regs(ctx, v44, v45);
    let v47 = C::value_regs(ctx, v45, v44);
    let v48 = constructor_gen_select_regs(ctx, v43, v46, v47);
    // Rule at src/isa/riscv64/inst.isle line 2343.
    return v48;
}

// Generated as internal constructor for term amode.
pub fn constructor_amode<C: Context>(ctx: &mut C, arg0: Value, arg1: i32, arg2: Type) -> AMode {
    let v4 = C::def_inst(ctx, arg0);
    if let Some(v5) = v4 {
        let v6 = &C::inst_data(ctx, v5);
        if let &InstructionData::Binary {
            opcode: ref v7,
            args: ref v8,
        } = v6
        {
            if let &Opcode::Iadd = v7 {
                let v9 = C::unpack_value_array_2(ctx, v8);
                let v22 = C::def_inst(ctx, v9.0);
                if let Some(v23) = v22 {
                    let v24 = &C::inst_data(ctx, v23);
                    if let &InstructionData::UnaryImm {
                        opcode: ref v25,
                        imm: v26,
                    } = v24
                    {
                        if let &Opcode::Iconst = v25 {
                            let v27 = C::simm32(ctx, v26);
                            if let Some(v28) = v27 {
                                let v29 = C::s32_add_fallible(ctx, v28, arg1);
                                if let Some(v30) = v29 {
                                    let v31 = constructor_amode_inner(ctx, v9.1, v30, arg2);
                                    // Rule at src/isa/riscv64/inst.isle line 2405.
                                    return v31;
                                }
                            }
                        }
                    }
                }
                let v12 = C::def_inst(ctx, v9.1);
                if let Some(v13) = v12 {
                    let v14 = &C::inst_data(ctx, v13);
                    if let &InstructionData::UnaryImm {
                        opcode: ref v15,
                        imm: v16,
                    } = v14
                    {
                        if let &Opcode::Iconst = v15 {
                            let v17 = C::simm32(ctx, v16);
                            if let Some(v18) = v17 {
                                let v19 = C::s32_add_fallible(ctx, v18, arg1);
                                if let Some(v20) = v19 {
                                    let v21 = constructor_amode_inner(ctx, v9.0, v20, arg2);
                                    // Rule at src/isa/riscv64/inst.isle line 2402.
                                    return v21;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    let v3 = constructor_amode_inner(ctx, arg0, arg1, arg2);
    // Rule at src/isa/riscv64/inst.isle line 2395.
    return v3;
}

// Generated as internal constructor for term amode_inner.
pub fn constructor_amode_inner<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: i32,
    arg2: Type,
) -> AMode {
    let v9 = C::def_inst(ctx, arg0);
    if let Some(v10) = v9 {
        let v11 = &C::inst_data(ctx, v10);
        match v11 {
            &InstructionData::NullAry { opcode: ref v12 } => {
                match v12 {
                    &Opcode::GetFramePointer => {
                        let v7 = C::i32_as_i64(ctx, arg1);
                        let v13 = C::gen_fp_offset_amode(ctx, v7, arg2);
                        // Rule at src/isa/riscv64/inst.isle line 2418.
                        return v13;
                    }
                    &Opcode::GetStackPointer => {
                        let v7 = C::i32_as_i64(ctx, arg1);
                        let v14 = C::gen_sp_offset_amode(ctx, v7, arg2);
                        // Rule at src/isa/riscv64/inst.isle line 2422.
                        return v14;
                    }
                    _ => {}
                }
            }
            &InstructionData::StackLoad {
                opcode: ref v15,
                stack_slot: v16,
                offset: v17,
            } => {
                if let &Opcode::StackAddr = v15 {
                    let v18 = C::offset32_to_i32(ctx, v17);
                    let v19 = C::s32_add_fallible(ctx, v18, arg1);
                    if let Some(v20) = v19 {
                        let v21 = C::i32_as_i64(ctx, v20);
                        let v22 = C::gen_stack_slot_amode(ctx, v16, v21, arg2);
                        // Rule at src/isa/riscv64/inst.isle line 2426.
                        return v22;
                    }
                }
            }
            _ => {}
        }
    }
    let v1 = C::value_type(ctx, arg0);
    let v2 = C::ty_addr64(ctx, v1);
    if let Some(v3) = v2 {
        let v6 = C::put_in_reg(ctx, arg0);
        let v7 = C::i32_as_i64(ctx, arg1);
        let v8 = C::gen_reg_offset_amode(ctx, v6, v7, arg2);
        // Rule at src/isa/riscv64/inst.isle line 2414.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "amode_inner", "src/isa/riscv64/inst.isle line 2411"
    )
}

// Generated as internal constructor for term load_op_reg_type.
pub fn constructor_load_op_reg_type<C: Context>(ctx: &mut C, arg0: &LoadOP) -> Type {
    match arg0 {
        &LoadOP::Flw => {
            // Rule at src/isa/riscv64/inst.isle line 2436.
            return F64;
        }
        &LoadOP::Fld => {
            // Rule at src/isa/riscv64/inst.isle line 2435.
            return F64;
        }
        _ => {}
    }
    // Rule at src/isa/riscv64/inst.isle line 2437.
    return I64;
}

// Generated as internal constructor for term gen_load.
pub fn constructor_gen_load<C: Context>(
    ctx: &mut C,
    arg0: AMode,
    arg1: &LoadOP,
    arg2: MemFlags,
) -> Reg {
    let v3 = constructor_load_op_reg_type(ctx, arg1);
    let v4 = C::temp_writable_reg(ctx, v3);
    let v5 = MInst::Load {
        rd: v4,
        op: arg1.clone(),
        flags: arg2,
        from: arg0,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 2441.
    return v7;
}

// Generated as internal constructor for term gen_store.
pub fn constructor_gen_store<C: Context>(
    ctx: &mut C,
    arg0: AMode,
    arg1: &StoreOP,
    arg2: MemFlags,
    arg3: Reg,
) -> InstOutput {
    let v4 = MInst::Store {
        to: arg0,
        op: arg1.clone(),
        flags: arg2,
        src: arg3,
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    let v6 = constructor_side_effect(ctx, &v5);
    // Rule at src/isa/riscv64/inst.isle line 2448.
    return v6;
}

// Generated as internal constructor for term gen_atomic.
pub fn constructor_gen_atomic<C: Context>(
    ctx: &mut C,
    arg0: &AtomicOP,
    arg1: Reg,
    arg2: Reg,
    arg3: AMO,
) -> Reg {
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v6 = MInst::Atomic {
        op: arg0.clone(),
        rd: v5,
        addr: arg1,
        src: arg2,
        amo: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = constructor_writable_xreg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 2461.
    return v8;
}

// Generated as internal constructor for term get_atomic_rmw_op.
pub fn constructor_get_atomic_rmw_op<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AtomicRmwOp,
) -> AtomicOP {
    match arg0 {
        I32 => {
            match arg1 {
                &AtomicRmwOp::Add => {
                    // Rule at src/isa/riscv64/inst.isle line 2470.
                    return AtomicOP::AmoaddW;
                }
                &AtomicRmwOp::And => {
                    // Rule at src/isa/riscv64/inst.isle line 2477.
                    return AtomicOP::AmoandW;
                }
                &AtomicRmwOp::Or => {
                    // Rule at src/isa/riscv64/inst.isle line 2485.
                    return AtomicOP::AmoorW;
                }
                &AtomicRmwOp::Smax => {
                    // Rule at src/isa/riscv64/inst.isle line 2493.
                    return AtomicOP::AmomaxW;
                }
                &AtomicRmwOp::Smin => {
                    // Rule at src/isa/riscv64/inst.isle line 2501.
                    return AtomicOP::AmominW;
                }
                &AtomicRmwOp::Umax => {
                    // Rule at src/isa/riscv64/inst.isle line 2509.
                    return AtomicOP::AmomaxuW;
                }
                &AtomicRmwOp::Umin => {
                    // Rule at src/isa/riscv64/inst.isle line 2518.
                    return AtomicOP::AmominuW;
                }
                &AtomicRmwOp::Xchg => {
                    // Rule at src/isa/riscv64/inst.isle line 2526.
                    return AtomicOP::AmoswapW;
                }
                &AtomicRmwOp::Xor => {
                    // Rule at src/isa/riscv64/inst.isle line 2534.
                    return AtomicOP::AmoxorW;
                }
                _ => {}
            }
        }
        I64 => {
            match arg1 {
                &AtomicRmwOp::Add => {
                    // Rule at src/isa/riscv64/inst.isle line 2473.
                    return AtomicOP::AmoaddD;
                }
                &AtomicRmwOp::And => {
                    // Rule at src/isa/riscv64/inst.isle line 2481.
                    return AtomicOP::AmoandD;
                }
                &AtomicRmwOp::Or => {
                    // Rule at src/isa/riscv64/inst.isle line 2489.
                    return AtomicOP::AmoorD;
                }
                &AtomicRmwOp::Smax => {
                    // Rule at src/isa/riscv64/inst.isle line 2497.
                    return AtomicOP::AmomaxD;
                }
                &AtomicRmwOp::Smin => {
                    // Rule at src/isa/riscv64/inst.isle line 2505.
                    return AtomicOP::AmominD;
                }
                &AtomicRmwOp::Umax => {
                    // Rule at src/isa/riscv64/inst.isle line 2514.
                    return AtomicOP::AmomaxuD;
                }
                &AtomicRmwOp::Umin => {
                    // Rule at src/isa/riscv64/inst.isle line 2522.
                    return AtomicOP::AmominuD;
                }
                &AtomicRmwOp::Xchg => {
                    // Rule at src/isa/riscv64/inst.isle line 2530.
                    return AtomicOP::AmoswapD;
                }
                &AtomicRmwOp::Xor => {
                    // Rule at src/isa/riscv64/inst.isle line 2538.
                    return AtomicOP::AmoxorD;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "get_atomic_rmw_op", "src/isa/riscv64/inst.isle line 2468"
    )
}

// Generated as internal constructor for term gen_atomic_load.
pub fn constructor_gen_atomic_load<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v2 = constructor_temp_writable_xreg(ctx);
    let v3 = C::writable_xreg_to_writable_reg(ctx, v2);
    let v4 = MInst::AtomicLoad {
        rd: v3,
        ty: arg1,
        p: arg0,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 2547.
    return v6;
}

// Generated as internal constructor for term gen_atomic_store.
pub fn constructor_gen_atomic_store<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Type,
    arg2: Reg,
) -> InstOutput {
    let v3 = MInst::AtomicStore {
        src: arg2,
        ty: arg1,
        p: arg0,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    let v5 = constructor_side_effect(ctx, &v4);
    // Rule at src/isa/riscv64/inst.isle line 2556.
    return v5;
}

// Generated as internal constructor for term gen_select_xreg.
pub fn constructor_gen_select_xreg<C: Context>(
    ctx: &mut C,
    arg0: IntegerCompare,
    arg1: XReg,
    arg2: XReg,
) -> XReg {
    let v1 = C::int_compare_decompose(ctx, arg0);
    let v7 = &C::intcc_without_eq(ctx, &v1.0);
    match v7 {
        &IntCC::SignedGreaterThan => {
            let v8 = C::has_zbb(ctx);
            if v8 == true {
                if v1.1 == arg1 {
                    if v1.2 == arg2 {
                        let v12 = constructor_rv_max(ctx, v1.1, v1.2);
                        // Rule at src/isa/riscv64/inst.isle line 2581.
                        return v12;
                    }
                }
            }
        }
        &IntCC::SignedLessThan => {
            let v8 = C::has_zbb(ctx);
            if v8 == true {
                if v1.1 == arg1 {
                    if v1.2 == arg2 {
                        let v10 = constructor_rv_min(ctx, v1.1, v1.2);
                        // Rule at src/isa/riscv64/inst.isle line 2571.
                        return v10;
                    }
                }
            }
        }
        &IntCC::UnsignedGreaterThan => {
            let v8 = C::has_zbb(ctx);
            if v8 == true {
                if v1.1 == arg1 {
                    if v1.2 == arg2 {
                        let v11 = constructor_rv_maxu(ctx, v1.1, v1.2);
                        // Rule at src/isa/riscv64/inst.isle line 2576.
                        return v11;
                    }
                }
            }
        }
        &IntCC::UnsignedLessThan => {
            let v8 = C::has_zbb(ctx);
            if v8 == true {
                if v1.1 == arg1 {
                    if v1.2 == arg2 {
                        let v9 = constructor_rv_minu(ctx, v1.1, v1.2);
                        // Rule at src/isa/riscv64/inst.isle line 2566.
                        return v9;
                    }
                }
            }
        }
        _ => {}
    }
    let v13 = constructor_temp_writable_xreg(ctx);
    let v14 = C::writable_xreg_to_writable_reg(ctx, v13);
    let v15 = C::writable_value_reg(ctx, v14);
    let v16 = C::xreg_to_reg(ctx, arg1);
    let v17 = C::value_reg(ctx, v16);
    let v18 = C::xreg_to_reg(ctx, arg2);
    let v19 = C::value_reg(ctx, v18);
    let v20 = MInst::Select {
        dst: v15,
        condition: arg0,
        x: v17,
        y: v19,
    };
    let v21 = C::emit(ctx, &v20);
    let v22 = C::writable_reg_to_reg(ctx, v14);
    let v23 = C::xreg_new(ctx, v22);
    // Rule at src/isa/riscv64/inst.isle line 2586.
    return v23;
}

// Generated as internal constructor for term gen_select_vreg.
pub fn constructor_gen_select_vreg<C: Context>(
    ctx: &mut C,
    arg0: IntegerCompare,
    arg1: VReg,
    arg2: VReg,
) -> VReg {
    let v3 = constructor_temp_writable_vreg(ctx);
    let v4 = C::writable_vreg_to_writable_reg(ctx, v3);
    let v5 = C::writable_value_reg(ctx, v4);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = C::value_reg(ctx, v6);
    let v8 = C::vreg_to_reg(ctx, arg2);
    let v9 = C::value_reg(ctx, v8);
    let v10 = MInst::Select {
        dst: v5,
        condition: arg0,
        x: v7,
        y: v9,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_reg_to_reg(ctx, v4);
    let v13 = C::vreg_new(ctx, v12);
    // Rule at src/isa/riscv64/inst.isle line 2594.
    return v13;
}

// Generated as internal constructor for term gen_select_freg.
pub fn constructor_gen_select_freg<C: Context>(
    ctx: &mut C,
    arg0: IntegerCompare,
    arg1: FReg,
    arg2: FReg,
) -> FReg {
    let v3 = constructor_temp_writable_freg(ctx);
    let v4 = C::writable_freg_to_writable_reg(ctx, v3);
    let v5 = C::writable_value_reg(ctx, v4);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = C::value_reg(ctx, v6);
    let v8 = C::freg_to_reg(ctx, arg2);
    let v9 = C::value_reg(ctx, v8);
    let v10 = MInst::Select {
        dst: v5,
        condition: arg0,
        x: v7,
        y: v9,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_reg_to_reg(ctx, v4);
    let v13 = C::freg_new(ctx, v12);
    // Rule at src/isa/riscv64/inst.isle line 2600.
    return v13;
}

// Generated as internal constructor for term gen_select_regs.
pub fn constructor_gen_select_regs<C: Context>(
    ctx: &mut C,
    arg0: IntegerCompare,
    arg1: ValueRegs,
    arg2: ValueRegs,
) -> ValueRegs {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v5 = constructor_temp_writable_xreg(ctx);
    let v4 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v5);
    let v7 = C::writable_value_regs(ctx, v4, v6);
    let v8 = MInst::Select {
        dst: v7,
        condition: arg0,
        x: arg1,
        y: arg2,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v4);
    let v11 = C::writable_reg_to_reg(ctx, v6);
    let v12 = C::value_regs(ctx, v10, v11);
    // Rule at src/isa/riscv64/inst.isle line 2606.
    return v12;
}

// Generated as internal constructor for term udf.
pub fn constructor_udf<C: Context>(ctx: &mut C, arg0: &TrapCode) -> InstOutput {
    let v1 = MInst::Udf {
        trap_code: arg0.clone(),
    };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    let v3 = constructor_side_effect(ctx, &v2);
    // Rule at src/isa/riscv64/inst.isle line 2615.
    return v3;
}

// Generated as internal constructor for term elf_tls_get_addr.
pub fn constructor_elf_tls_get_addr<C: Context>(ctx: &mut C, arg0: ExternalName) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = C::box_external_name(ctx, arg0);
    let v4 = MInst::ElfTlsGetAddr { rd: v2, name: v3 };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/riscv64/inst.isle line 2630.
    return v6;
}

// Generated as internal constructor for term gen_fcvt_int.
pub fn constructor_gen_fcvt_int<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: FReg,
    arg2: bool,
    arg3: Type,
    arg4: Type,
) -> XReg {
    let v5 = C::temp_writable_reg(ctx, arg4);
    let v6 = constructor_temp_writable_freg(ctx);
    let v7 = C::writable_freg_to_writable_reg(ctx, v6);
    let v8 = C::freg_to_reg(ctx, arg1);
    let v9 = MInst::FcvtToInt {
        is_sat: arg0,
        rd: v5,
        tmp: v7,
        rs: v8,
        is_signed: arg2,
        in_type: arg3,
        out_type: arg4,
    };
    let v10 = C::emit(ctx, &v9);
    let v11 = C::writable_reg_to_reg(ctx, v5);
    let v12 = C::xreg_new(ctx, v11);
    // Rule at src/isa/riscv64/inst.isle line 2638.
    return v12;
}

// Generated as internal constructor for term lower_float_binary.
pub fn constructor_lower_float_binary<C: Context>(
    ctx: &mut C,
    arg0: &AluOPRRR,
    arg1: FReg,
    arg2: FReg,
    arg3: Type,
) -> FReg {
    let v4 = constructor_move_f_to_x(ctx, arg1, arg3);
    let v5 = constructor_move_f_to_x(ctx, arg2, arg3);
    let v6 = C::xreg_to_reg(ctx, v4);
    let v7 = C::xreg_to_reg(ctx, v5);
    let v8 = constructor_alu_rrr(ctx, arg0, v6, v7);
    let v9 = C::xreg_new(ctx, v8);
    let v10 = constructor_float_int_of_same_size(ctx, arg3);
    let v11 = constructor_move_x_to_f(ctx, v9, v10);
    // Rule at src/isa/riscv64/inst.isle line 2651.
    return v11;
}

// Generated as internal constructor for term i128_sub.
pub fn constructor_i128_sub<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0);
    let v4 = C::xreg_new(ctx, v3);
    let v5 = C::value_regs_get(ctx, arg1, 0x0);
    let v6 = C::xreg_new(ctx, v5);
    let v7 = constructor_rv_sub(ctx, v4, v6);
    let v8 = C::value_regs_get(ctx, arg0, 0x0);
    let v9 = C::xreg_new(ctx, v8);
    let v10 = constructor_rv_sltu(ctx, v9, v7);
    let v12 = C::value_regs_get(ctx, arg0, 0x1);
    let v13 = C::xreg_new(ctx, v12);
    let v14 = C::value_regs_get(ctx, arg1, 0x1);
    let v15 = C::xreg_new(ctx, v14);
    let v16 = constructor_rv_sub(ctx, v13, v15);
    let v17 = constructor_rv_sub(ctx, v16, v10);
    let v18 = C::xreg_to_reg(ctx, v7);
    let v19 = C::xreg_to_reg(ctx, v17);
    let v20 = C::value_regs(ctx, v18, v19);
    // Rule at src/isa/riscv64/inst.isle line 2660.
    return v20;
}

// Generated as internal constructor for term cond_br.
pub fn constructor_cond_br<C: Context>(
    ctx: &mut C,
    arg0: IntegerCompare,
    arg1: CondBrTarget,
    arg2: CondBrTarget,
) -> SideEffectNoResult {
    let v3 = MInst::CondBr {
        taken: arg1,
        not_taken: arg2,
        kind: arg0,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/riscv64/inst.isle line 2678.
    return v4;
}

// Generated as internal constructor for term rv_j.
pub fn constructor_rv_j<C: Context>(ctx: &mut C, arg0: MachLabel) -> SideEffectNoResult {
    let v1 = MInst::Jal { label: arg0 };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/riscv64/inst.isle line 2684.
    return v2;
}

// Generated as internal constructor for term cmp_eqz.
pub fn constructor_cmp_eqz<C: Context>(ctx: &mut C, arg0: XReg) -> IntegerCompare {
    let v2 = C::zero_reg(ctx);
    let v3 = C::xreg_new(ctx, v2);
    let v4 = C::int_compare(ctx, &IntCC::Equal, arg0, v3);
    // Rule at src/isa/riscv64/inst.isle line 2700.
    return v4;
}

// Generated as internal constructor for term cmp_nez.
pub fn constructor_cmp_nez<C: Context>(ctx: &mut C, arg0: XReg) -> IntegerCompare {
    let v2 = C::zero_reg(ctx);
    let v3 = C::xreg_new(ctx, v2);
    let v4 = C::int_compare(ctx, &IntCC::NotEqual, arg0, v3);
    // Rule at src/isa/riscv64/inst.isle line 2703.
    return v4;
}

// Generated as internal constructor for term cmp_eq.
pub fn constructor_cmp_eq<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::Equal, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2706.
    return v3;
}

// Generated as internal constructor for term cmp_ne.
pub fn constructor_cmp_ne<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::NotEqual, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2709.
    return v3;
}

// Generated as internal constructor for term cmp_lt.
pub fn constructor_cmp_lt<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::SignedLessThan, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2712.
    return v3;
}

// Generated as internal constructor for term cmp_ltz.
pub fn constructor_cmp_ltz<C: Context>(ctx: &mut C, arg0: XReg) -> IntegerCompare {
    let v2 = C::zero_reg(ctx);
    let v3 = C::xreg_new(ctx, v2);
    let v4 = C::int_compare(ctx, &IntCC::SignedLessThan, arg0, v3);
    // Rule at src/isa/riscv64/inst.isle line 2715.
    return v4;
}

// Generated as internal constructor for term cmp_gt.
pub fn constructor_cmp_gt<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::SignedGreaterThan, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2718.
    return v3;
}

// Generated as internal constructor for term cmp_ge.
pub fn constructor_cmp_ge<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::SignedGreaterThanOrEqual, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2721.
    return v3;
}

// Generated as internal constructor for term cmp_le.
pub fn constructor_cmp_le<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::SignedLessThanOrEqual, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2724.
    return v3;
}

// Generated as internal constructor for term cmp_gtu.
pub fn constructor_cmp_gtu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::UnsignedGreaterThan, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2727.
    return v3;
}

// Generated as internal constructor for term cmp_geu.
pub fn constructor_cmp_geu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::UnsignedGreaterThanOrEqual, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2730.
    return v3;
}

// Generated as internal constructor for term cmp_ltu.
pub fn constructor_cmp_ltu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::UnsignedLessThan, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2733.
    return v3;
}

// Generated as internal constructor for term cmp_leu.
pub fn constructor_cmp_leu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::UnsignedLessThanOrEqual, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2736.
    return v3;
}

// Generated as internal constructor for term lower_int_compare.
pub fn constructor_lower_int_compare<C: Context>(ctx: &mut C, arg0: Value) -> IntegerCompare {
    let v18 = C::maybe_uextend(ctx, arg0);
    if let Some(v19) = v18 {
        let v20 = C::def_inst(ctx, v19);
        if let Some(v21) = v20 {
            let v22 = &C::inst_data(ctx, v21);
            match v22 {
                &InstructionData::FloatCompare {
                    opcode: ref v40,
                    args: ref v41,
                    cond: ref v42,
                } => {
                    if let &Opcode::Fcmp = v40 {
                        let v43 = C::unpack_value_array_2(ctx, v41);
                        let v47 = constructor_put_in_freg(ctx, v43.0);
                        let v48 = constructor_put_in_freg(ctx, v43.1);
                        let v46 = C::value_type(ctx, v43.0);
                        let v49 = &constructor_emit_fcmp(ctx, v42, v46, v47, v48);
                        let v50 = constructor_fcmp_to_compare(ctx, v49);
                        // Rule at src/isa/riscv64/inst.isle line 2786.
                        return v50;
                    }
                }
                &InstructionData::IntCompare {
                    opcode: ref v23,
                    args: ref v24,
                    cond: ref v25,
                } => {
                    if let &Opcode::Icmp = v23 {
                        match v25 {
                            &IntCC::Equal => {
                                let v26 = C::unpack_value_array_2(ctx, v24);
                                let v29 = C::value_type(ctx, v26.1);
                                if v29 == I32 {
                                    let v37 = constructor_sext(ctx, v26.0);
                                    let v38 = constructor_sext(ctx, v26.1);
                                    let v39 = C::int_compare(ctx, v25, v37, v38);
                                    // Rule at src/isa/riscv64/inst.isle line 2778.
                                    return v39;
                                }
                            }
                            &IntCC::NotEqual => {
                                let v26 = C::unpack_value_array_2(ctx, v24);
                                let v29 = C::value_type(ctx, v26.1);
                                if v29 == I32 {
                                    let v37 = constructor_sext(ctx, v26.0);
                                    let v38 = constructor_sext(ctx, v26.1);
                                    let v39 = C::int_compare(ctx, v25, v37, v38);
                                    // Rule at src/isa/riscv64/inst.isle line 2780.
                                    return v39;
                                }
                            }
                            _ => {}
                        }
                        let v26 = C::unpack_value_array_2(ctx, v24);
                        let v29 = C::value_type(ctx, v26.1);
                        let v30 = C::fits_in_64(ctx, v29);
                        if let Some(v31) = v30 {
                            let v35 = &C::signed_cond_code(ctx, v25);
                            if let Some(v36) = v35 {
                                let v37 = constructor_sext(ctx, v26.0);
                                let v38 = constructor_sext(ctx, v26.1);
                                let v39 = C::int_compare(ctx, v25, v37, v38);
                                // Rule at src/isa/riscv64/inst.isle line 2775.
                                return v39;
                            }
                            let v32 = constructor_zext(ctx, v26.0);
                            let v33 = constructor_zext(ctx, v26.1);
                            let v34 = C::int_compare(ctx, v25, v32, v33);
                            // Rule at src/isa/riscv64/inst.isle line 2773.
                            return v34;
                        }
                    }
                }
                _ => {}
            }
        }
    }
    let v1 = C::value_type(ctx, arg0);
    match v1 {
        I8 => {
            let v6 = constructor_zext(ctx, arg0);
            let v7 = constructor_cmp_nez(ctx, v6);
            // Rule at src/isa/riscv64/inst.isle line 2757.
            return v7;
        }
        I128 => {
            let v8 = C::put_in_regs(ctx, arg0);
            let v10 = C::value_regs_get(ctx, v8, 0x0);
            let v11 = C::xreg_new(ctx, v10);
            let v12 = C::put_in_regs(ctx, arg0);
            let v14 = C::value_regs_get(ctx, v12, 0x1);
            let v15 = C::xreg_new(ctx, v14);
            let v16 = constructor_rv_or(ctx, v11, v15);
            let v17 = constructor_cmp_nez(ctx, v16);
            // Rule at src/isa/riscv64/inst.isle line 2759.
            return v17;
        }
        _ => {}
    }
    let v2 = C::fits_in_64(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = constructor_sext(ctx, arg0);
        let v5 = constructor_cmp_nez(ctx, v4);
        // Rule at src/isa/riscv64/inst.isle line 2755.
        return v5;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_int_compare", "src/isa/riscv64/inst.isle line 2744"
    )
}

// Generated as internal constructor for term lower_branch.
pub fn constructor_lower_branch<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: &MachLabelSlice,
) -> Option<Unit> {
    let v1 = &C::inst_data(ctx, arg0);
    match v1 {
        &InstructionData::BranchTable {
            opcode: ref v24,
            arg: v25,
            table: v26,
        } => {
            if let &Opcode::BrTable = v24 {
                let v27 = C::put_in_reg(ctx, v25);
                let v28 = C::lower_br_table(ctx, v27, arg1);
                // Rule at src/isa/riscv64/inst.isle line 2799.
                return Some(v28);
            }
        }
        &InstructionData::Brif {
            opcode: ref v9,
            arg: v10,
            blocks: ref v11,
        } => {
            if let &Opcode::Brif = v9 {
                let v15 = C::two_targets(ctx, arg1);
                if let Some(v16) = v15 {
                    let v19 = constructor_lower_int_compare(ctx, v10);
                    let v20 = C::label_to_br_target(ctx, v16.0);
                    let v21 = C::label_to_br_target(ctx, v16.1);
                    let v22 = &constructor_cond_br(ctx, v19, v20, v21);
                    let v23 = constructor_emit_side_effect(ctx, v22);
                    // Rule at src/isa/riscv64/inst.isle line 2793.
                    return Some(v23);
                }
            }
        }
        &InstructionData::Jump {
            opcode: ref v2,
            destination: v3,
        } => {
            if let &Opcode::Jump = v2 {
                let v5 = C::single_target(ctx, arg1);
                if let Some(v6) = v5 {
                    let v7 = &constructor_rv_j(ctx, v6);
                    let v8 = constructor_emit_side_effect(ctx, v7);
                    // Rule at src/isa/riscv64/inst.isle line 2790.
                    return Some(v8);
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term gen_bitcast.
pub fn constructor_gen_bitcast<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type, arg2: Type) -> Reg {
    match arg1 {
        I32 => {
            if arg2 == F32 {
                let v8 = C::xreg_new(ctx, arg0);
                let v9 = constructor_rv_fmvwx(ctx, v8);
                let v10 = C::freg_to_reg(ctx, v9);
                // Rule at src/isa/riscv64/inst.isle line 2811.
                return v10;
            }
        }
        I64 => {
            if arg2 == F64 {
                let v8 = C::xreg_new(ctx, arg0);
                let v11 = constructor_rv_fmvdx(ctx, v8);
                let v12 = C::freg_to_reg(ctx, v11);
                // Rule at src/isa/riscv64/inst.isle line 2812.
                return v12;
            }
        }
        F32 => {
            if arg2 == I32 {
                let v3 = C::freg_new(ctx, arg0);
                let v4 = constructor_rv_fmvxw(ctx, v3);
                let v5 = C::xreg_to_reg(ctx, v4);
                // Rule at src/isa/riscv64/inst.isle line 2809.
                return v5;
            }
        }
        F64 => {
            if arg2 == I64 {
                let v3 = C::freg_new(ctx, arg0);
                let v6 = constructor_rv_fmvxd(ctx, v3);
                let v7 = C::xreg_to_reg(ctx, v6);
                // Rule at src/isa/riscv64/inst.isle line 2810.
                return v7;
            }
        }
        _ => {}
    }
    // Rule at src/isa/riscv64/inst.isle line 2813.
    return arg0;
}

// Generated as internal constructor for term move_f_to_x.
pub fn constructor_move_f_to_x<C: Context>(ctx: &mut C, arg0: FReg, arg1: Type) -> XReg {
    match arg1 {
        F32 => {
            let v2 = C::freg_to_reg(ctx, arg0);
            let v5 = constructor_gen_bitcast(ctx, v2, F32, I32);
            let v6 = C::xreg_new(ctx, v5);
            // Rule at src/isa/riscv64/inst.isle line 2816.
            return v6;
        }
        F64 => {
            let v2 = C::freg_to_reg(ctx, arg0);
            let v9 = constructor_gen_bitcast(ctx, v2, F64, I64);
            let v10 = C::xreg_new(ctx, v9);
            // Rule at src/isa/riscv64/inst.isle line 2817.
            return v10;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "move_f_to_x", "src/isa/riscv64/inst.isle line 2815"
    )
}

// Generated as internal constructor for term move_x_to_f.
pub fn constructor_move_x_to_f<C: Context>(ctx: &mut C, arg0: XReg, arg1: Type) -> FReg {
    match arg1 {
        I32 => {
            let v2 = C::xreg_to_reg(ctx, arg0);
            let v5 = constructor_gen_bitcast(ctx, v2, I32, F32);
            let v6 = C::freg_new(ctx, v5);
            // Rule at src/isa/riscv64/inst.isle line 2820.
            return v6;
        }
        I64 => {
            let v2 = C::xreg_to_reg(ctx, arg0);
            let v9 = constructor_gen_bitcast(ctx, v2, I64, F64);
            let v10 = C::freg_new(ctx, v9);
            // Rule at src/isa/riscv64/inst.isle line 2821.
            return v10;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "move_x_to_f", "src/isa/riscv64/inst.isle line 2819"
    )
}

// Generated as internal constructor for term float_int_of_same_size.
pub fn constructor_float_int_of_same_size<C: Context>(ctx: &mut C, arg0: Type) -> Type {
    match arg0 {
        F32 => {
            // Rule at src/isa/riscv64/inst.isle line 2824.
            return I32;
        }
        F64 => {
            // Rule at src/isa/riscv64/inst.isle line 2825.
            return I64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "float_int_of_same_size", "src/isa/riscv64/inst.isle line 2823"
    )
}

// Generated as internal constructor for term gen_rev8.
pub fn constructor_gen_rev8<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v1 = C::has_zbb(ctx);
    match v1 {
        true => {
            let v2 = constructor_rv_rev8(ctx, arg0);
            // Rule at src/isa/riscv64/inst.isle line 2829.
            return v2;
        }
        false => {
            let v3 = constructor_temp_writable_xreg(ctx);
            let v4 = constructor_temp_writable_xreg(ctx);
            let v5 = constructor_temp_writable_xreg(ctx);
            let v6 = C::xreg_to_reg(ctx, arg0);
            let v7 = C::writable_xreg_to_writable_reg(ctx, v5);
            let v8 = C::writable_xreg_to_writable_reg(ctx, v4);
            let v9 = C::writable_xreg_to_writable_reg(ctx, v3);
            let v10 = MInst::Rev8 {
                rs: v6,
                step: v7,
                tmp: v8,
                rd: v9,
            };
            let v11 = C::emit(ctx, &v10);
            let v12 = C::writable_reg_to_reg(ctx, v9);
            let v13 = C::xreg_new(ctx, v12);
            // Rule at src/isa/riscv64/inst.isle line 2835.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_rev8", "src/isa/riscv64/inst.isle line 2828"
    )
}

// Generated as internal constructor for term gen_brev8.
pub fn constructor_gen_brev8<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v2 = C::has_zbkb(ctx);
    match v2 {
        true => {
            let v3 = C::xreg_new(ctx, arg0);
            let v4 = constructor_rv_brev8(ctx, v3);
            let v5 = C::xreg_to_reg(ctx, v4);
            // Rule at src/isa/riscv64/inst.isle line 2846.
            return v5;
        }
        false => {
            let v6 = constructor_temp_writable_xreg(ctx);
            let v7 = constructor_temp_writable_xreg(ctx);
            let v8 = constructor_temp_writable_xreg(ctx);
            let v9 = constructor_temp_writable_xreg(ctx);
            let v10 = C::writable_xreg_to_writable_reg(ctx, v8);
            let v11 = C::writable_xreg_to_writable_reg(ctx, v6);
            let v12 = C::writable_xreg_to_writable_reg(ctx, v7);
            let v13 = C::writable_xreg_to_writable_reg(ctx, v9);
            let v14 = MInst::Brev8 {
                rs: arg0,
                ty: arg1,
                step: v10,
                tmp: v11,
                tmp2: v12,
                rd: v13,
            };
            let v15 = C::emit(ctx, &v14);
            let v16 = C::writable_reg_to_reg(ctx, v13);
            // Rule at src/isa/riscv64/inst.isle line 2851.
            return v16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_brev8", "src/isa/riscv64/inst.isle line 2845"
    )
}

// Generated as internal constructor for term neg.
pub fn constructor_neg<C: Context>(ctx: &mut C, arg0: Type, arg1: ValueRegs) -> ValueRegs {
    if arg0 == I128 {
        let v12 = constructor_value_regs_zero(ctx);
        let v13 = constructor_i128_sub(ctx, v12, arg1);
        // Rule at src/isa/riscv64/inst.isle line 2868.
        return v13;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::ty_int(ctx, v2);
        if let Some(v4) = v3 {
            let v7 = C::value_regs_get(ctx, arg1, 0x0);
            let v8 = C::xreg_new(ctx, v7);
            let v9 = constructor_rv_neg(ctx, v8);
            let v10 = C::xreg_to_reg(ctx, v9);
            let v11 = C::value_reg(ctx, v10);
            // Rule at src/isa/riscv64/inst.isle line 2864.
            return v11;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "neg", "src/isa/riscv64/inst.isle line 2863"
    )
}

// Generated as internal constructor for term gen_trapif.
pub fn constructor_gen_trapif<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: XReg,
    arg2: XReg,
    arg3: &TrapCode,
) -> InstOutput {
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = C::xreg_to_reg(ctx, arg2);
    let v6 = MInst::TrapIf {
        rs1: v4,
        rs2: v5,
        cc: arg0.clone(),
        trap_code: arg3.clone(),
    };
    let v7 = SideEffectNoResult::Inst { inst: v6 };
    let v8 = constructor_side_effect(ctx, &v7);
    // Rule at src/isa/riscv64/inst.isle line 2874.
    return v8;
}

// Generated as internal constructor for term gen_trapnz.
pub fn constructor_gen_trapnz<C: Context>(ctx: &mut C, arg0: XReg, arg1: &TrapCode) -> InstOutput {
    let v3 = C::zero_reg(ctx);
    let v4 = C::xreg_new(ctx, v3);
    let v5 = constructor_gen_trapif(ctx, &IntCC::NotEqual, arg0, v4, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2879.
    return v5;
}

// Generated as internal constructor for term gen_trapz.
pub fn constructor_gen_trapz<C: Context>(ctx: &mut C, arg0: XReg, arg1: &TrapCode) -> InstOutput {
    let v3 = C::zero_reg(ctx);
    let v4 = C::xreg_new(ctx, v3);
    let v5 = constructor_gen_trapif(ctx, &IntCC::Equal, arg0, v4, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2884.
    return v5;
}

// Generated as internal constructor for term madd.
pub fn constructor_madd<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg, arg2: XReg) -> XReg {
    let v3 = constructor_rv_mul(ctx, arg0, arg1);
    let v4 = constructor_rv_add(ctx, v3, arg2);
    // Rule at src/isa/riscv64/inst.isle line 2898.
    return v4;
}

// Generated as internal constructor for term gen_bmask.
pub fn constructor_gen_bmask<C: Context>(ctx: &mut C, arg0: Value) -> XReg {
    let v1 = C::value_type(ctx, arg0);
    if v1 == I128 {
        let v7 = C::put_in_regs(ctx, arg0);
        let v9 = C::value_regs_get(ctx, v7, 0x0);
        let v10 = C::xreg_new(ctx, v9);
        let v11 = C::put_in_regs(ctx, arg0);
        let v13 = C::value_regs_get(ctx, v11, 0x1);
        let v14 = C::xreg_new(ctx, v13);
        let v15 = constructor_rv_or(ctx, v10, v14);
        let v16 = constructor_rv_snez(ctx, v15);
        let v17 = constructor_rv_neg(ctx, v16);
        // Rule at src/isa/riscv64/inst.isle line 2910.
        return v17;
    }
    let v2 = C::fits_in_64(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = constructor_sext(ctx, arg0);
        let v5 = constructor_rv_snez(ctx, v4);
        let v6 = constructor_rv_neg(ctx, v5);
        // Rule at src/isa/riscv64/inst.isle line 2907.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_bmask", "src/isa/riscv64/inst.isle line 2906"
    )
}

// Generated as internal constructor for term lower_bmask.
pub fn constructor_lower_bmask<C: Context>(ctx: &mut C, arg0: Value, arg1: Type) -> ValueRegs {
    if arg1 == I128 {
        let v4 = constructor_gen_bmask(ctx, arg0);
        let v5 = C::xreg_to_reg(ctx, v4);
        let v7 = C::value_regs(ctx, v5, v5);
        // Rule at src/isa/riscv64/inst.isle line 2917.
        return v7;
    }
    let v2 = C::fits_in_64(ctx, arg1);
    if let Some(v3) = v2 {
        let v4 = constructor_gen_bmask(ctx, arg0);
        let v5 = C::xreg_to_reg(ctx, v4);
        let v6 = C::value_reg(ctx, v5);
        // Rule at src/isa/riscv64/inst.isle line 2915.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bmask", "src/isa/riscv64/inst.isle line 2914"
    )
}

// Generated as internal constructor for term gen_mov_from_preg.
pub fn constructor_gen_mov_from_preg<C: Context>(ctx: &mut C, arg0: PReg) -> Reg {
    let v1 = constructor_temp_writable_xreg(ctx);
    let v2 = C::writable_xreg_to_writable_reg(ctx, v1);
    let v3 = MInst::MovFromPReg { rd: v2, rm: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_xreg_to_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 2926.
    return v5;
}

// Generated as internal constructor for term value_regs_zero.
pub fn constructor_value_regs_zero<C: Context>(ctx: &mut C) -> ValueRegs {
    let v2 = constructor_imm(ctx, I64, 0x0);
    let v3 = constructor_imm(ctx, I64, 0x0);
    let v4 = C::value_regs(ctx, v2, v3);
    // Rule at src/isa/riscv64/inst.isle line 2942.
    return v4;
}

// Generated as internal constructor for term is_not_nan.
pub fn constructor_is_not_nan<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg) -> XReg {
    let v2 = constructor_rv_feq(ctx, arg0, arg1, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2952.
    return v2;
}

// Generated as internal constructor for term ordered.
pub fn constructor_ordered<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    let v3 = constructor_is_not_nan(ctx, arg0, arg1);
    let v4 = constructor_is_not_nan(ctx, arg0, arg2);
    let v5 = constructor_rv_and(ctx, v3, v4);
    // Rule at src/isa/riscv64/inst.isle line 2955.
    return v5;
}

// Generated as internal constructor for term fcmp_invert.
pub fn constructor_fcmp_invert<C: Context>(ctx: &mut C, arg0: &FCmp) -> FCmp {
    match arg0 {
        &FCmp::One { r: v1 } => {
            let v2 = FCmp::Zero { r: v1 };
            // Rule at src/isa/riscv64/inst.isle line 2965.
            return v2;
        }
        &FCmp::Zero { r: v3 } => {
            let v4 = FCmp::One { r: v3 };
            // Rule at src/isa/riscv64/inst.isle line 2966.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcmp_invert", "src/isa/riscv64/inst.isle line 2964"
    )
}

// Generated as internal constructor for term fcmp_to_compare.
pub fn constructor_fcmp_to_compare<C: Context>(ctx: &mut C, arg0: &FCmp) -> IntegerCompare {
    match arg0 {
        &FCmp::One { r: v1 } => {
            let v2 = constructor_cmp_nez(ctx, v1);
            // Rule at src/isa/riscv64/inst.isle line 2969.
            return v2;
        }
        &FCmp::Zero { r: v3 } => {
            let v4 = constructor_cmp_eqz(ctx, v3);
            // Rule at src/isa/riscv64/inst.isle line 2970.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcmp_to_compare", "src/isa/riscv64/inst.isle line 2968"
    )
}

// Generated as internal constructor for term emit_fcmp.
pub fn constructor_emit_fcmp<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Type,
    arg2: FReg,
    arg3: FReg,
) -> FCmp {
    match arg0 {
        &FloatCC::Equal => {
            let v10 = constructor_rv_feq(ctx, arg1, arg2, arg3);
            let v11 = FCmp::One { r: v10 };
            // Rule at src/isa/riscv64/inst.isle line 2988.
            return v11;
        }
        &FloatCC::GreaterThan => {
            let v20 = constructor_rv_fgt(ctx, arg1, arg2, arg3);
            let v21 = FCmp::One { r: v20 };
            // Rule at src/isa/riscv64/inst.isle line 3009.
            return v21;
        }
        &FloatCC::GreaterThanOrEqual => {
            let v22 = constructor_rv_fge(ctx, arg1, arg2, arg3);
            let v23 = FCmp::One { r: v22 };
            // Rule at src/isa/riscv64/inst.isle line 3013.
            return v23;
        }
        &FloatCC::LessThan => {
            let v13 = constructor_rv_flt(ctx, arg1, arg2, arg3);
            let v17 = FCmp::One { r: v13 };
            // Rule at src/isa/riscv64/inst.isle line 3001.
            return v17;
        }
        &FloatCC::LessThanOrEqual => {
            let v18 = constructor_rv_fle(ctx, arg1, arg2, arg3);
            let v19 = FCmp::One { r: v18 };
            // Rule at src/isa/riscv64/inst.isle line 3005.
            return v19;
        }
        &FloatCC::NotEqual => {
            let v10 = constructor_rv_feq(ctx, arg1, arg2, arg3);
            let v12 = FCmp::Zero { r: v10 };
            // Rule at src/isa/riscv64/inst.isle line 2993.
            return v12;
        }
        &FloatCC::Ordered => {
            let v8 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v9 = FCmp::One { r: v8 };
            // Rule at src/isa/riscv64/inst.isle line 2984.
            return v9;
        }
        &FloatCC::OrderedNotEqual => {
            let v13 = constructor_rv_flt(ctx, arg1, arg2, arg3);
            let v14 = constructor_rv_fgt(ctx, arg1, arg2, arg3);
            let v15 = constructor_rv_or(ctx, v13, v14);
            let v16 = FCmp::One { r: v15 };
            // Rule at src/isa/riscv64/inst.isle line 2997.
            return v16;
        }
        _ => {}
    }
    let v4 = C::floatcc_unordered(ctx, arg0);
    if v4 == true {
        let v5 = &C::floatcc_complement(ctx, arg0);
        let v6 = &constructor_emit_fcmp(ctx, v5, arg1, arg2, arg3);
        let v7 = &constructor_fcmp_invert(ctx, v6);
        // Rule at src/isa/riscv64/inst.isle line 2979.
        return v7.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_fcmp", "src/isa/riscv64/inst.isle line 2974"
    )
}

// Generated as internal constructor for term masked.
pub fn constructor_masked<C: Context>(ctx: &mut C, arg0: VReg) -> VecOpMasking {
    let v1 = C::vreg_to_reg(ctx, arg0);
    let v2 = VecOpMasking::Enabled { reg: v1 };
    // Rule at src/isa/riscv64/inst_vector.isle line 85.
    return v2;
}

// Generated as internal constructor for term unmasked.
pub fn constructor_unmasked<C: Context>(ctx: &mut C) -> VecOpMasking {
    // Rule at src/isa/riscv64/inst_vector.isle line 88.
    return VecOpMasking::Disabled;
}

// Generated as internal constructor for term element_width_from_type.
pub fn constructor_element_width_from_type<C: Context>(ctx: &mut C, arg0: Type) -> VecElementWidth {
    let v1 = C::lane_type(ctx, arg0);
    match v1 {
        I8 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 330.
            return VecElementWidth::E8;
        }
        I16 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 333.
            return VecElementWidth::E16;
        }
        I32 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 336.
            return VecElementWidth::E32;
        }
        I64 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 342.
            return VecElementWidth::E64;
        }
        F32 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 339.
            return VecElementWidth::E32;
        }
        F64 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 345.
            return VecElementWidth::E64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "element_width_from_type", "src/isa/riscv64/inst_vector.isle line 329"
    )
}

// Generated as internal constructor for term vec_alu_rrrr.
pub fn constructor_vec_alu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRRR,
    arg1: VReg,
    arg2: VReg,
    arg3: Reg,
    arg4: &VecOpMasking,
    arg5: VState,
) -> VReg {
    let v6 = constructor_temp_writable_vreg(ctx);
    let v7 = C::writable_vreg_to_writable_reg(ctx, v6);
    let v8 = C::vreg_to_reg(ctx, arg1);
    let v9 = C::vreg_to_reg(ctx, arg2);
    let v10 = MInst::VecAluRRRR {
        op: arg0.clone(),
        vd: v7,
        vd_src: v8,
        vs2: v9,
        vs1: arg3,
        mask: arg4.clone(),
        vstate: arg5,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_vreg_to_vreg(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 368.
    return v12;
}

// Generated as internal constructor for term vec_alu_rrr_imm5.
pub fn constructor_vec_alu_rrr_imm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRRImm5,
    arg1: VReg,
    arg2: VReg,
    arg3: Imm5,
    arg4: &VecOpMasking,
    arg5: VState,
) -> VReg {
    let v6 = constructor_temp_writable_vreg(ctx);
    let v7 = C::writable_vreg_to_writable_reg(ctx, v6);
    let v8 = C::vreg_to_reg(ctx, arg1);
    let v9 = C::vreg_to_reg(ctx, arg2);
    let v10 = MInst::VecAluRRRImm5 {
        op: arg0.clone(),
        vd: v7,
        vd_src: v8,
        vs2: v9,
        imm: arg3,
        mask: arg4.clone(),
        vstate: arg5,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_vreg_to_vreg(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 376.
    return v12;
}

// Generated as internal constructor for term vec_alu_rrr_uimm5.
pub fn constructor_vec_alu_rrr_uimm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRRImm5,
    arg1: VReg,
    arg2: VReg,
    arg3: UImm5,
    arg4: &VecOpMasking,
    arg5: VState,
) -> VReg {
    let v6 = C::uimm5_bitcast_to_imm5(ctx, arg3);
    let v7 = constructor_vec_alu_rrr_imm5(ctx, arg0, arg1, arg2, v6, arg4, arg5);
    // Rule at src/isa/riscv64/inst_vector.isle line 384.
    return v7;
}

// Generated as internal constructor for term vec_alu_rrr.
pub fn constructor_vec_alu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRR,
    arg1: Reg,
    arg2: Reg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> Reg {
    let v5 = constructor_temp_writable_vreg(ctx);
    let v6 = C::writable_vreg_to_writable_reg(ctx, v5);
    let v7 = MInst::VecAluRRR {
        op: arg0.clone(),
        vd: v6,
        vs2: arg1,
        vs1: arg2,
        mask: arg3.clone(),
        vstate: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = constructor_writable_vreg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 389.
    return v9;
}

// Generated as internal constructor for term vec_alu_rr_imm5.
pub fn constructor_vec_alu_rr_imm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRImm5,
    arg1: Reg,
    arg2: Imm5,
    arg3: &VecOpMasking,
    arg4: VState,
) -> Reg {
    let v5 = constructor_temp_writable_vreg(ctx);
    let v6 = C::writable_vreg_to_writable_reg(ctx, v5);
    let v7 = MInst::VecAluRRImm5 {
        op: arg0.clone(),
        vd: v6,
        vs2: arg1,
        imm: arg2,
        mask: arg3.clone(),
        vstate: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = constructor_writable_vreg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 396.
    return v9;
}

// Generated as internal constructor for term vec_alu_rr_uimm5.
pub fn constructor_vec_alu_rr_uimm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRImm5,
    arg1: Reg,
    arg2: UImm5,
    arg3: &VecOpMasking,
    arg4: VState,
) -> Reg {
    let v5 = C::uimm5_bitcast_to_imm5(ctx, arg2);
    let v6 = constructor_vec_alu_rr_imm5(ctx, arg0, arg1, v5, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 404.
    return v6;
}

// Generated as internal constructor for term vec_alu_rr.
pub fn constructor_vec_alu_rr<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRR,
    arg1: Reg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> Reg {
    let v4 = C::vec_alu_rr_dst_type(ctx, arg0);
    let v5 = C::temp_writable_reg(ctx, v4);
    let v6 = MInst::VecAluRR {
        op: arg0.clone(),
        vd: v5,
        vs: arg1,
        mask: arg2.clone(),
        vstate: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 410.
    return v8;
}

// Generated as internal constructor for term vec_alu_r_imm5.
pub fn constructor_vec_alu_r_imm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRImm5,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> Reg {
    let v4 = constructor_temp_writable_vreg(ctx);
    let v5 = C::writable_vreg_to_writable_reg(ctx, v4);
    let v6 = MInst::VecAluRImm5 {
        op: arg0.clone(),
        vd: v5,
        imm: arg1,
        mask: arg2.clone(),
        vstate: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = constructor_writable_vreg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst_vector.isle line 417.
    return v8;
}

// Generated as internal constructor for term vec_load.
pub fn constructor_vec_load<C: Context>(
    ctx: &mut C,
    arg0: &VecElementWidth,
    arg1: &VecAMode,
    arg2: MemFlags,
    arg3: &VecOpMasking,
    arg4: VState,
) -> Reg {
    let v5 = constructor_temp_writable_vreg(ctx);
    let v6 = C::writable_vreg_to_writable_reg(ctx, v5);
    let v7 = MInst::VecLoad {
        eew: arg0.clone(),
        to: v6,
        from: arg1.clone(),
        flags: arg2,
        mask: arg3.clone(),
        vstate: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = constructor_writable_vreg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 424.
    return v9;
}

// Generated as internal constructor for term vec_store.
pub fn constructor_vec_store<C: Context>(
    ctx: &mut C,
    arg0: &VecElementWidth,
    arg1: &VecAMode,
    arg2: VReg,
    arg3: MemFlags,
    arg4: &VecOpMasking,
    arg5: VState,
) -> InstOutput {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = MInst::VecStore {
        eew: arg0.clone(),
        to: arg1.clone(),
        from: v6,
        flags: arg3,
        mask: arg4.clone(),
        vstate: arg5,
    };
    let v8 = SideEffectNoResult::Inst { inst: v7 };
    let v9 = constructor_side_effect(ctx, &v8);
    // Rule at src/isa/riscv64/inst_vector.isle line 431.
    return v9;
}

// Generated as internal constructor for term rv_vadd_vv.
pub fn constructor_rv_vadd_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VaddVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 437.
    return v8;
}

// Generated as internal constructor for term rv_vadd_vx.
pub fn constructor_rv_vadd_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VaddVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 442.
    return v8;
}

// Generated as internal constructor for term rv_vadd_vi.
pub fn constructor_rv_vadd_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VaddVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 447.
    return v7;
}

// Generated as internal constructor for term rv_vsadd_vv.
pub fn constructor_rv_vsadd_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsaddVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 452.
    return v8;
}

// Generated as internal constructor for term rv_vsadd_vx.
pub fn constructor_rv_vsadd_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsaddVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 457.
    return v8;
}

// Generated as internal constructor for term rv_vsadd_vi.
pub fn constructor_rv_vsadd_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VsaddVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 462.
    return v7;
}

// Generated as internal constructor for term rv_vsaddu_vv.
pub fn constructor_rv_vsaddu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsadduVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 467.
    return v8;
}

// Generated as internal constructor for term rv_vsaddu_vx.
pub fn constructor_rv_vsaddu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsadduVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 472.
    return v8;
}

// Generated as internal constructor for term rv_vsaddu_vi.
pub fn constructor_rv_vsaddu_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VsadduVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 477.
    return v7;
}

// Generated as internal constructor for term rv_vwadd_vv.
pub fn constructor_rv_vwadd_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwaddVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 484.
    return v8;
}

// Generated as internal constructor for term rv_vwadd_vx.
pub fn constructor_rv_vwadd_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwaddVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 491.
    return v8;
}

// Generated as internal constructor for term rv_vwadd_wv.
pub fn constructor_rv_vwadd_wv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwaddWV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 498.
    return v8;
}

// Generated as internal constructor for term rv_vwadd_wx.
pub fn constructor_rv_vwadd_wx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwaddWX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 505.
    return v8;
}

// Generated as internal constructor for term rv_vwaddu_vv.
pub fn constructor_rv_vwaddu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwadduVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 512.
    return v8;
}

// Generated as internal constructor for term rv_vwaddu_vx.
pub fn constructor_rv_vwaddu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwadduVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 519.
    return v8;
}

// Generated as internal constructor for term rv_vwaddu_wv.
pub fn constructor_rv_vwaddu_wv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwadduWV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 526.
    return v8;
}

// Generated as internal constructor for term rv_vwaddu_wx.
pub fn constructor_rv_vwaddu_wx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwadduWX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 533.
    return v8;
}

// Generated as internal constructor for term rv_vsub_vv.
pub fn constructor_rv_vsub_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsubVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 538.
    return v8;
}

// Generated as internal constructor for term rv_vsub_vx.
pub fn constructor_rv_vsub_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsubVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 543.
    return v8;
}

// Generated as internal constructor for term rv_vrsub_vx.
pub fn constructor_rv_vrsub_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VrsubVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 548.
    return v8;
}

// Generated as internal constructor for term rv_vwsub_vv.
pub fn constructor_rv_vwsub_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 555.
    return v8;
}

// Generated as internal constructor for term rv_vwsub_vx.
pub fn constructor_rv_vwsub_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 562.
    return v8;
}

// Generated as internal constructor for term rv_vwsub_wv.
pub fn constructor_rv_vwsub_wv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubWV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 569.
    return v8;
}

// Generated as internal constructor for term rv_vwsub_wx.
pub fn constructor_rv_vwsub_wx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubWX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 576.
    return v8;
}

// Generated as internal constructor for term rv_vwsubu_vv.
pub fn constructor_rv_vwsubu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 583.
    return v8;
}

// Generated as internal constructor for term rv_vwsubu_vx.
pub fn constructor_rv_vwsubu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 590.
    return v8;
}

// Generated as internal constructor for term rv_vwsubu_wv.
pub fn constructor_rv_vwsubu_wv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubuWV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 597.
    return v8;
}

// Generated as internal constructor for term rv_vwsubu_wx.
pub fn constructor_rv_vwsubu_wx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubuWX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 604.
    return v8;
}

// Generated as internal constructor for term rv_vssub_vv.
pub fn constructor_rv_vssub_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VssubVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 609.
    return v8;
}

// Generated as internal constructor for term rv_vssub_vx.
pub fn constructor_rv_vssub_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VssubVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 614.
    return v8;
}

// Generated as internal constructor for term rv_vssubu_vv.
pub fn constructor_rv_vssubu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VssubuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 619.
    return v8;
}

// Generated as internal constructor for term rv_vssubu_vx.
pub fn constructor_rv_vssubu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VssubuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 624.
    return v8;
}

// Generated as internal constructor for term rv_vneg_v.
pub fn constructor_rv_vneg_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v5 = C::zero_reg(ctx);
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VrsubVX, v4, v5, arg1, arg2);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 629.
    return v7;
}

// Generated as internal constructor for term rv_vrsub_vi.
pub fn constructor_rv_vrsub_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VrsubVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 634.
    return v7;
}

// Generated as internal constructor for term rv_vmul_vv.
pub fn constructor_rv_vmul_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 639.
    return v8;
}

// Generated as internal constructor for term rv_vmul_vx.
pub fn constructor_rv_vmul_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 644.
    return v8;
}

// Generated as internal constructor for term rv_vmulh_vv.
pub fn constructor_rv_vmulh_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulhVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 649.
    return v8;
}

// Generated as internal constructor for term rv_vmulh_vx.
pub fn constructor_rv_vmulh_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulhVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 654.
    return v8;
}

// Generated as internal constructor for term rv_vmulhu_vv.
pub fn constructor_rv_vmulhu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulhuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 659.
    return v8;
}

// Generated as internal constructor for term rv_vmulhu_vx.
pub fn constructor_rv_vmulhu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulhuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 664.
    return v8;
}

// Generated as internal constructor for term rv_vsmul_vv.
pub fn constructor_rv_vsmul_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsmulVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 672.
    return v8;
}

// Generated as internal constructor for term rv_vsmul_vx.
pub fn constructor_rv_vsmul_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsmulVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 680.
    return v8;
}

// Generated as internal constructor for term rv_vmacc_vv.
pub fn constructor_rv_vmacc_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VmaccVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 688.
    return v7;
}

// Generated as internal constructor for term rv_vmacc_vx.
pub fn constructor_rv_vmacc_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: XReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::xreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VmaccVX, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 696.
    return v7;
}

// Generated as internal constructor for term rv_vnmsac_vv.
pub fn constructor_rv_vnmsac_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VnmsacVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 704.
    return v7;
}

// Generated as internal constructor for term rv_vnmsac_vx.
pub fn constructor_rv_vnmsac_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: XReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::xreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VnmsacVX, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 712.
    return v7;
}

// Generated as internal constructor for term rv_vsll_vv.
pub fn constructor_rv_vsll_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsllVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 717.
    return v8;
}

// Generated as internal constructor for term rv_vsll_vx.
pub fn constructor_rv_vsll_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsllVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 722.
    return v8;
}

// Generated as internal constructor for term rv_vsll_vi.
pub fn constructor_rv_vsll_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VsllVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 727.
    return v7;
}

// Generated as internal constructor for term rv_vsrl_vv.
pub fn constructor_rv_vsrl_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsrlVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 732.
    return v8;
}

// Generated as internal constructor for term rv_vsrl_vx.
pub fn constructor_rv_vsrl_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsrlVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 737.
    return v8;
}

// Generated as internal constructor for term rv_vsrl_vi.
pub fn constructor_rv_vsrl_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VsrlVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 742.
    return v7;
}

// Generated as internal constructor for term rv_vsra_vv.
pub fn constructor_rv_vsra_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsraVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 747.
    return v8;
}

// Generated as internal constructor for term rv_vsra_vx.
pub fn constructor_rv_vsra_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsraVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 752.
    return v8;
}

// Generated as internal constructor for term rv_vsra_vi.
pub fn constructor_rv_vsra_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VsraVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 757.
    return v7;
}

// Generated as internal constructor for term rv_vand_vv.
pub fn constructor_rv_vand_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VandVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 762.
    return v8;
}

// Generated as internal constructor for term rv_vand_vx.
pub fn constructor_rv_vand_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VandVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 767.
    return v8;
}

// Generated as internal constructor for term rv_vand_vi.
pub fn constructor_rv_vand_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VandVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 772.
    return v7;
}

// Generated as internal constructor for term rv_vor_vv.
pub fn constructor_rv_vor_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VorVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 777.
    return v8;
}

// Generated as internal constructor for term rv_vor_vx.
pub fn constructor_rv_vor_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VorVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 782.
    return v8;
}

// Generated as internal constructor for term rv_vor_vi.
pub fn constructor_rv_vor_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VorVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 787.
    return v7;
}

// Generated as internal constructor for term rv_vxor_vv.
pub fn constructor_rv_vxor_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VxorVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 792.
    return v8;
}

// Generated as internal constructor for term rv_vxor_vx.
pub fn constructor_rv_vxor_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VxorVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 797.
    return v8;
}

// Generated as internal constructor for term rv_vxor_vi.
pub fn constructor_rv_vxor_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VxorVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 802.
    return v7;
}

// Generated as internal constructor for term rv_vssrl_vi.
pub fn constructor_rv_vssrl_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VssrlVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 811.
    return v7;
}

// Generated as internal constructor for term rv_vnot_v.
pub fn constructor_rv_vnot_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::i8_to_imm5(ctx, -0x1);
    if let Some(v5) = v4 {
        let v6 = constructor_rv_vxor_vi(ctx, arg0, v5, arg1, arg2);
        // Rule at src/isa/riscv64/inst_vector.isle line 817.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_vnot_v", "src/isa/riscv64/inst_vector.isle line 816"
    )
}

// Generated as internal constructor for term rv_vmax_vv.
pub fn constructor_rv_vmax_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmaxVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 823.
    return v8;
}

// Generated as internal constructor for term rv_vmax_vx.
pub fn constructor_rv_vmax_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmaxVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 828.
    return v8;
}

// Generated as internal constructor for term rv_vmin_vv.
pub fn constructor_rv_vmin_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VminVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 833.
    return v8;
}

// Generated as internal constructor for term rv_vmin_vx.
pub fn constructor_rv_vmin_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VminVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 838.
    return v8;
}

// Generated as internal constructor for term rv_vmaxu_vv.
pub fn constructor_rv_vmaxu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmaxuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 843.
    return v8;
}

// Generated as internal constructor for term rv_vmaxu_vx.
pub fn constructor_rv_vmaxu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmaxuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 848.
    return v8;
}

// Generated as internal constructor for term rv_vminu_vv.
pub fn constructor_rv_vminu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VminuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 853.
    return v8;
}

// Generated as internal constructor for term rv_vminu_vx.
pub fn constructor_rv_vminu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VminuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 858.
    return v8;
}

// Generated as internal constructor for term rv_vfadd_vv.
pub fn constructor_rv_vfadd_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfaddVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 863.
    return v8;
}

// Generated as internal constructor for term rv_vfadd_vf.
pub fn constructor_rv_vfadd_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfaddVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 868.
    return v8;
}

// Generated as internal constructor for term rv_vfsub_vv.
pub fn constructor_rv_vfsub_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsubVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 873.
    return v8;
}

// Generated as internal constructor for term rv_vfsub_vf.
pub fn constructor_rv_vfsub_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsubVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 878.
    return v8;
}

// Generated as internal constructor for term rv_vfrsub_vf.
pub fn constructor_rv_vfrsub_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfrsubVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 883.
    return v8;
}

// Generated as internal constructor for term rv_vfmul_vv.
pub fn constructor_rv_vfmul_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfmulVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 888.
    return v8;
}

// Generated as internal constructor for term rv_vfmul_vf.
pub fn constructor_rv_vfmul_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfmulVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 893.
    return v8;
}

// Generated as internal constructor for term rv_vfmacc_vv.
pub fn constructor_rv_vfmacc_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfmaccVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 901.
    return v7;
}

// Generated as internal constructor for term rv_vfmacc_vf.
pub fn constructor_rv_vfmacc_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: FReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfmaccVF, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 909.
    return v7;
}

// Generated as internal constructor for term rv_vfnmacc_vv.
pub fn constructor_rv_vfnmacc_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfnmaccVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 917.
    return v7;
}

// Generated as internal constructor for term rv_vfnmacc_vf.
pub fn constructor_rv_vfnmacc_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: FReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfnmaccVF, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 925.
    return v7;
}

// Generated as internal constructor for term rv_vfmsac_vv.
pub fn constructor_rv_vfmsac_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfmsacVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 933.
    return v7;
}

// Generated as internal constructor for term rv_vfmsac_vf.
pub fn constructor_rv_vfmsac_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: FReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfmsacVF, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 941.
    return v7;
}

// Generated as internal constructor for term rv_vfnmsac_vv.
pub fn constructor_rv_vfnmsac_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfnmsacVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 949.
    return v7;
}

// Generated as internal constructor for term rv_vfnmsac_vf.
pub fn constructor_rv_vfnmsac_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: FReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfnmsacVF, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 957.
    return v7;
}

// Generated as internal constructor for term rv_vfdiv_vv.
pub fn constructor_rv_vfdiv_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfdivVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 962.
    return v8;
}

// Generated as internal constructor for term rv_vfdiv_vf.
pub fn constructor_rv_vfdiv_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfdivVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 967.
    return v8;
}

// Generated as internal constructor for term rv_vfrdiv_vf.
pub fn constructor_rv_vfrdiv_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfrdivVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 972.
    return v8;
}

// Generated as internal constructor for term rv_vfmin_vv.
pub fn constructor_rv_vfmin_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfminVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 977.
    return v8;
}

// Generated as internal constructor for term rv_vfmax_vv.
pub fn constructor_rv_vfmax_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfmaxVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 982.
    return v8;
}

// Generated as internal constructor for term rv_vfsgnj_vv.
pub fn constructor_rv_vfsgnj_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsgnjVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 988.
    return v8;
}

// Generated as internal constructor for term rv_vfsgnj_vf.
pub fn constructor_rv_vfsgnj_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsgnjVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 993.
    return v8;
}

// Generated as internal constructor for term rv_vfsgnjn_vv.
pub fn constructor_rv_vfsgnjn_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsgnjnVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 999.
    return v8;
}

// Generated as internal constructor for term rv_vfneg_v.
pub fn constructor_rv_vfneg_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v3 = constructor_rv_vfsgnjn_vv(ctx, arg0, arg0, arg1, arg2);
    // Rule at src/isa/riscv64/inst_vector.isle line 1005.
    return v3;
}

// Generated as internal constructor for term rv_vfsgnjx_vv.
pub fn constructor_rv_vfsgnjx_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsgnjxVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1011.
    return v8;
}

// Generated as internal constructor for term rv_vfabs_v.
pub fn constructor_rv_vfabs_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v3 = constructor_rv_vfsgnjx_vv(ctx, arg0, arg0, arg1, arg2);
    // Rule at src/isa/riscv64/inst_vector.isle line 1017.
    return v3;
}

// Generated as internal constructor for term rv_vfsqrt_v.
pub fn constructor_rv_vfsqrt_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfsqrtV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1022.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_xu_f_v.
pub fn constructor_rv_vfcvt_xu_f_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtxufV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1028.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_x_f_v.
pub fn constructor_rv_vfcvt_x_f_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtxfV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1034.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_rtz_xu_f_v.
pub fn constructor_rv_vfcvt_rtz_xu_f_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtrtzxufV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1042.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_rtz_x_f_v.
pub fn constructor_rv_vfcvt_rtz_x_f_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtrtzxfV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1050.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_f_xu_v.
pub fn constructor_rv_vfcvt_f_xu_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtfxuV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1056.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_f_x_v.
pub fn constructor_rv_vfcvt_f_x_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtfxV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1062.
    return v6;
}

// Generated as internal constructor for term rv_vfwcvt_f_f_v.
pub fn constructor_rv_vfwcvt_f_f_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfwcvtffV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1068.
    return v6;
}

// Generated as internal constructor for term rv_vfncvt_f_f_w.
pub fn constructor_rv_vfncvt_f_f_w<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfncvtffW, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1074.
    return v6;
}

// Generated as internal constructor for term rv_vslidedown_vx.
pub fn constructor_rv_vslidedown_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VslidedownVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1081.
    return v8;
}

// Generated as internal constructor for term rv_vslidedown_vi.
pub fn constructor_rv_vslidedown_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VslidedownVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1087.
    return v7;
}

// Generated as internal constructor for term rv_vslideup_vvi.
pub fn constructor_rv_vslideup_vvi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: UImm5,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = constructor_vec_alu_rrr_uimm5(
        ctx,
        &VecAluOpRRRImm5::VslideupVI,
        arg0,
        arg1,
        arg2,
        arg3,
        arg4,
    );
    // Rule at src/isa/riscv64/inst_vector.isle line 1095.
    return v6;
}

// Generated as internal constructor for term rv_vmv_xs.
pub fn constructor_rv_vmv_xs<C: Context>(ctx: &mut C, arg0: VReg, arg1: VState) -> XReg {
    let v3 = C::vreg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VmvXS, v3, v4, arg1);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1102.
    return v6;
}

// Generated as internal constructor for term rv_vfmv_fs.
pub fn constructor_rv_vfmv_fs<C: Context>(ctx: &mut C, arg0: VReg, arg1: VState) -> FReg {
    let v3 = C::vreg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfmvFS, v3, v4, arg1);
    let v6 = C::freg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1109.
    return v6;
}

// Generated as internal constructor for term rv_vmv_sx.
pub fn constructor_rv_vmv_sx<C: Context>(ctx: &mut C, arg0: XReg, arg1: VState) -> VReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VmvSX, v3, v4, arg1);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1116.
    return v6;
}

// Generated as internal constructor for term rv_vfmv_sf.
pub fn constructor_rv_vfmv_sf<C: Context>(ctx: &mut C, arg0: FReg, arg1: VState) -> VReg {
    let v3 = C::freg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfmvSF, v3, v4, arg1);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1123.
    return v6;
}

// Generated as internal constructor for term rv_vmv_vx.
pub fn constructor_rv_vmv_vx<C: Context>(ctx: &mut C, arg0: XReg, arg1: VState) -> VReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VmvVX, v3, v4, arg1);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1130.
    return v6;
}

// Generated as internal constructor for term rv_vfmv_vf.
pub fn constructor_rv_vfmv_vf<C: Context>(ctx: &mut C, arg0: FReg, arg1: VState) -> VReg {
    let v3 = C::freg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfmvVF, v3, v4, arg1);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1137.
    return v6;
}

// Generated as internal constructor for term rv_vmv_vi.
pub fn constructor_rv_vmv_vi<C: Context>(ctx: &mut C, arg0: Imm5, arg1: VState) -> VReg {
    let v3 = &constructor_unmasked(ctx);
    let v4 = constructor_vec_alu_r_imm5(ctx, &VecAluOpRImm5::VmvVI, arg0, v3, arg1);
    let v5 = C::vreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst_vector.isle line 1144.
    return v5;
}

// Generated as internal constructor for term rv_vmerge_vvm.
pub fn constructor_rv_vmerge_vvm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = &constructor_masked(ctx, arg2);
    let v8 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmergeVVM, v5, v6, v7, arg3);
    let v9 = C::vreg_new(ctx, v8);
    // Rule at src/isa/riscv64/inst_vector.isle line 1154.
    return v9;
}

// Generated as internal constructor for term rv_vmerge_vxm.
pub fn constructor_rv_vmerge_vxm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: VReg,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = &constructor_masked(ctx, arg2);
    let v8 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmergeVXM, v5, v6, v7, arg3);
    let v9 = C::vreg_new(ctx, v8);
    // Rule at src/isa/riscv64/inst_vector.isle line 1163.
    return v9;
}

// Generated as internal constructor for term rv_vfmerge_vfm.
pub fn constructor_rv_vfmerge_vfm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: VReg,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = &constructor_masked(ctx, arg2);
    let v8 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfmergeVFM, v5, v6, v7, arg3);
    let v9 = C::vreg_new(ctx, v8);
    // Rule at src/isa/riscv64/inst_vector.isle line 1172.
    return v9;
}

// Generated as internal constructor for term rv_vmerge_vim.
pub fn constructor_rv_vmerge_vim<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: VReg,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = &constructor_masked(ctx, arg2);
    let v7 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmergeVIM, v5, arg1, v6, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1181.
    return v8;
}

// Generated as internal constructor for term rv_vredminu_vs.
pub fn constructor_rv_vredminu_vs<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VredminuVS, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1189.
    return v8;
}

// Generated as internal constructor for term rv_vredmaxu_vs.
pub fn constructor_rv_vredmaxu_vs<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VredmaxuVS, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1196.
    return v8;
}

// Generated as internal constructor for term rv_vrgather_vv.
pub fn constructor_rv_vrgather_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VrgatherVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1203.
    return v8;
}

// Generated as internal constructor for term rv_vrgather_vx.
pub fn constructor_rv_vrgather_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VrgatherVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1210.
    return v8;
}

// Generated as internal constructor for term rv_vrgather_vi.
pub fn constructor_rv_vrgather_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VrgatherVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1215.
    return v7;
}

// Generated as internal constructor for term rv_vcompress_vm.
pub fn constructor_rv_vcompress_vm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VcompressVM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1226.
    return v8;
}

// Generated as internal constructor for term rv_vmseq_vv.
pub fn constructor_rv_vmseq_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmseqVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1231.
    return v8;
}

// Generated as internal constructor for term rv_vmseq_vx.
pub fn constructor_rv_vmseq_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmseqVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1236.
    return v8;
}

// Generated as internal constructor for term rv_vmseq_vi.
pub fn constructor_rv_vmseq_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmseqVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1241.
    return v7;
}

// Generated as internal constructor for term rv_vmsne_vv.
pub fn constructor_rv_vmsne_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsneVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1246.
    return v8;
}

// Generated as internal constructor for term rv_vmsne_vx.
pub fn constructor_rv_vmsne_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsneVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1251.
    return v8;
}

// Generated as internal constructor for term rv_vmsne_vi.
pub fn constructor_rv_vmsne_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsneVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1256.
    return v7;
}

// Generated as internal constructor for term rv_vmsltu_vv.
pub fn constructor_rv_vmsltu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsltuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1261.
    return v8;
}

// Generated as internal constructor for term rv_vmsltu_vx.
pub fn constructor_rv_vmsltu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsltuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1266.
    return v8;
}

// Generated as internal constructor for term rv_vmslt_vv.
pub fn constructor_rv_vmslt_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsltVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1271.
    return v8;
}

// Generated as internal constructor for term rv_vmslt_vx.
pub fn constructor_rv_vmslt_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsltVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1276.
    return v8;
}

// Generated as internal constructor for term rv_vmsleu_vv.
pub fn constructor_rv_vmsleu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsleuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1281.
    return v8;
}

// Generated as internal constructor for term rv_vmsleu_vx.
pub fn constructor_rv_vmsleu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsleuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1286.
    return v8;
}

// Generated as internal constructor for term rv_vmsleu_vi.
pub fn constructor_rv_vmsleu_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsleuVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1291.
    return v7;
}

// Generated as internal constructor for term rv_vmsle_vv.
pub fn constructor_rv_vmsle_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsleVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1296.
    return v8;
}

// Generated as internal constructor for term rv_vmsle_vx.
pub fn constructor_rv_vmsle_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsleVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1301.
    return v8;
}

// Generated as internal constructor for term rv_vmsle_vi.
pub fn constructor_rv_vmsle_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsleVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1306.
    return v7;
}

// Generated as internal constructor for term rv_vmsgtu_vv.
pub fn constructor_rv_vmsgtu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmsltu_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src/isa/riscv64/inst_vector.isle line 1312.
    return v4;
}

// Generated as internal constructor for term rv_vmsgtu_vx.
pub fn constructor_rv_vmsgtu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsgtuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1316.
    return v8;
}

// Generated as internal constructor for term rv_vmsgtu_vi.
pub fn constructor_rv_vmsgtu_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsgtuVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1321.
    return v7;
}

// Generated as internal constructor for term rv_vmsgt_vv.
pub fn constructor_rv_vmsgt_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmslt_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src/isa/riscv64/inst_vector.isle line 1327.
    return v4;
}

// Generated as internal constructor for term rv_vmsgt_vx.
pub fn constructor_rv_vmsgt_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsgtVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1331.
    return v8;
}

// Generated as internal constructor for term rv_vmsgt_vi.
pub fn constructor_rv_vmsgt_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsgtVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1336.
    return v7;
}

// Generated as internal constructor for term rv_vmsgeu_vv.
pub fn constructor_rv_vmsgeu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmsleu_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src/isa/riscv64/inst_vector.isle line 1342.
    return v4;
}

// Generated as internal constructor for term rv_vmsge_vv.
pub fn constructor_rv_vmsge_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmsle_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src/isa/riscv64/inst_vector.isle line 1347.
    return v4;
}

// Generated as internal constructor for term rv_vmfeq_vv.
pub fn constructor_rv_vmfeq_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfeqVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1351.
    return v8;
}

// Generated as internal constructor for term rv_vmfeq_vf.
pub fn constructor_rv_vmfeq_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfeqVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1356.
    return v8;
}

// Generated as internal constructor for term rv_vmfne_vv.
pub fn constructor_rv_vmfne_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfneVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1361.
    return v8;
}

// Generated as internal constructor for term rv_vmfne_vf.
pub fn constructor_rv_vmfne_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfneVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1366.
    return v8;
}

// Generated as internal constructor for term rv_vmflt_vv.
pub fn constructor_rv_vmflt_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfltVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1371.
    return v8;
}

// Generated as internal constructor for term rv_vmflt_vf.
pub fn constructor_rv_vmflt_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfltVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1376.
    return v8;
}

// Generated as internal constructor for term rv_vmfle_vv.
pub fn constructor_rv_vmfle_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfleVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1381.
    return v8;
}

// Generated as internal constructor for term rv_vmfle_vf.
pub fn constructor_rv_vmfle_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfleVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1386.
    return v8;
}

// Generated as internal constructor for term rv_vmfgt_vv.
pub fn constructor_rv_vmfgt_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmflt_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src/isa/riscv64/inst_vector.isle line 1392.
    return v4;
}

// Generated as internal constructor for term rv_vmfgt_vf.
pub fn constructor_rv_vmfgt_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfgtVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1396.
    return v8;
}

// Generated as internal constructor for term rv_vmfge_vv.
pub fn constructor_rv_vmfge_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmfle_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src/isa/riscv64/inst_vector.isle line 1402.
    return v4;
}

// Generated as internal constructor for term rv_vmfge_vf.
pub fn constructor_rv_vmfge_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfgeVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1406.
    return v8;
}

// Generated as internal constructor for term rv_vzext_vf2.
pub fn constructor_rv_vzext_vf2<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VzextVF2, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1412.
    return v6;
}

// Generated as internal constructor for term rv_vzext_vf4.
pub fn constructor_rv_vzext_vf4<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VzextVF4, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1418.
    return v6;
}

// Generated as internal constructor for term rv_vzext_vf8.
pub fn constructor_rv_vzext_vf8<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VzextVF8, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1424.
    return v6;
}

// Generated as internal constructor for term rv_vsext_vf2.
pub fn constructor_rv_vsext_vf2<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VsextVF2, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1430.
    return v6;
}

// Generated as internal constructor for term rv_vsext_vf4.
pub fn constructor_rv_vsext_vf4<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VsextVF4, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1436.
    return v6;
}

// Generated as internal constructor for term rv_vsext_vf8.
pub fn constructor_rv_vsext_vf8<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VsextVF8, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1442.
    return v6;
}

// Generated as internal constructor for term rv_vnclip_wi.
pub fn constructor_rv_vnclip_wi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VnclipWI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1449.
    return v7;
}

// Generated as internal constructor for term rv_vnclipu_wi.
pub fn constructor_rv_vnclipu_wi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VnclipuWI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1456.
    return v7;
}

// Generated as internal constructor for term rv_vmand_mm.
pub fn constructor_rv_vmand_mm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmandMM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1463.
    return v8;
}

// Generated as internal constructor for term rv_vmor_mm.
pub fn constructor_rv_vmor_mm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmorMM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1470.
    return v8;
}

// Generated as internal constructor for term rv_vmnand_mm.
pub fn constructor_rv_vmnand_mm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmnandMM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1477.
    return v8;
}

// Generated as internal constructor for term rv_vmnot_m.
pub fn constructor_rv_vmnot_m<C: Context>(ctx: &mut C, arg0: VReg, arg1: VState) -> VReg {
    let v2 = constructor_rv_vmnand_mm(ctx, arg0, arg0, arg1);
    // Rule at src/isa/riscv64/inst_vector.isle line 1485.
    return v2;
}

// Generated as internal constructor for term rv_vmnor_mm.
pub fn constructor_rv_vmnor_mm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmnorMM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1491.
    return v8;
}

// Generated as internal constructor for term gen_extractlane.
pub fn constructor_gen_extractlane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: VReg,
    arg2: u8,
) -> Reg {
    let v1 = C::ty_vec_fits_in_register(ctx, arg0);
    if let Some(v2) = v1 {
        if arg2 == 0x0 {
            let v5 = C::ty_vector_float(ctx, v2);
            if let Some(v6) = v5 {
                let v7 = C::vstate_from_type(ctx, v2);
                let v8 = constructor_rv_vfmv_fs(ctx, arg1, v7);
                let v9 = C::freg_to_reg(ctx, v8);
                // Rule at src/isa/riscv64/inst_vector.isle line 1499.
                return v9;
            }
            let v10 = C::ty_vector_not_float(ctx, v2);
            if let Some(v11) = v10 {
                let v7 = C::vstate_from_type(ctx, v2);
                let v12 = constructor_rv_vmv_xs(ctx, arg1, v7);
                let v13 = C::xreg_to_reg(ctx, v12);
                // Rule at src/isa/riscv64/inst_vector.isle line 1504.
                return v13;
            }
        }
        let v14 = C::uimm5_from_u8(ctx, arg2);
        if let Some(v15) = v14 {
            let v16 = &constructor_unmasked(ctx);
            let v7 = C::vstate_from_type(ctx, v2);
            let v17 = constructor_rv_vslidedown_vi(ctx, arg1, v15, v16, v7);
            let v19 = constructor_gen_extractlane(ctx, v2, v17, 0x0);
            // Rule at src/isa/riscv64/inst_vector.isle line 1511.
            return v19;
        }
        let v21 = C::u8_as_u64(ctx, arg2);
        let v22 = constructor_imm(ctx, I64, v21);
        let v23 = C::xreg_new(ctx, v22);
        let v16 = &constructor_unmasked(ctx);
        let v7 = C::vstate_from_type(ctx, v2);
        let v24 = constructor_rv_vslidedown_vx(ctx, arg1, v23, v16, v7);
        let v25 = constructor_gen_extractlane(ctx, v2, v24, 0x0);
        // Rule at src/isa/riscv64/inst_vector.isle line 1515.
        return v25;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_extractlane", "src/isa/riscv64/inst_vector.isle line 1496"
    )
}

// Generated as internal constructor for term gen_vec_mask.
pub fn constructor_gen_vec_mask<C: Context>(ctx: &mut C, arg0: u64) -> VReg {
    let v1 = C::imm5_from_u64(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::vstate_from_type(ctx, I64X2);
        let v5 = constructor_rv_vmv_vi(ctx, v2, v4);
        // Rule at src/isa/riscv64/inst_vector.isle line 1525.
        return v5;
    }
    let v7 = constructor_imm(ctx, I64, arg0);
    let v8 = C::xreg_new(ctx, v7);
    let v4 = C::vstate_from_type(ctx, I64X2);
    let v9 = constructor_rv_vmv_sx(ctx, v8, v4);
    // Rule at src/isa/riscv64/inst_vector.isle line 1530.
    return v9;
}

// Generated as internal constructor for term gen_constant.
pub fn constructor_gen_constant<C: Context>(ctx: &mut C, arg0: Type, arg1: VCodeConstant) -> VReg {
    let v3 = C::gen_const_amode(ctx, arg1);
    let v2 = &constructor_element_width_from_type(ctx, arg0);
    let v4 = VecAMode::UnitStride { base: v3 };
    let v5 = C::mem_flags_trusted(ctx);
    let v6 = &constructor_unmasked(ctx);
    let v7 = C::vstate_from_type(ctx, arg0);
    let v8 = constructor_vec_load(ctx, v2, &v4, v5, v6, v7);
    let v9 = C::vreg_new(ctx, v8);
    // Rule at src/isa/riscv64/inst_vector.isle line 1541.
    return v9;
}

// Generated as internal constructor for term gen_slidedown_half.
pub fn constructor_gen_slidedown_half<C: Context>(ctx: &mut C, arg0: Type, arg1: VReg) -> VReg {
    let v1 = C::ty_vec_fits_in_register(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::ty_lane_count(ctx, v2);
        let v6 = C::u64_udiv(ctx, v4, 0x2);
        if let Some(v7) = v6 {
            let v8 = C::uimm5_from_u64(ctx, v7);
            if let Some(v9) = v8 {
                let v10 = &constructor_unmasked(ctx);
                let v11 = C::vstate_from_type(ctx, v2);
                let v12 = constructor_rv_vslidedown_vi(ctx, arg1, v9, v10, v11);
                // Rule at src/isa/riscv64/inst_vector.isle line 1554.
                return v12;
            }
            let v14 = constructor_imm(ctx, I64, v7);
            let v15 = C::xreg_new(ctx, v14);
            let v10 = &constructor_unmasked(ctx);
            let v11 = C::vstate_from_type(ctx, v2);
            let v16 = constructor_rv_vslidedown_vx(ctx, arg1, v15, v10, v11);
            // Rule at src/isa/riscv64/inst_vector.isle line 1559.
            return v16;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_slidedown_half", "src/isa/riscv64/inst_vector.isle line 1551"
    )
}

// Generated as internal constructor for term gen_expand_mask.
pub fn constructor_gen_expand_mask<C: Context>(ctx: &mut C, arg0: Type, arg1: VReg) -> VReg {
    let v3 = C::i8_to_imm5(ctx, 0x0);
    if let Some(v4) = v3 {
        let v6 = C::i8_to_imm5(ctx, -0x1);
        if let Some(v7) = v6 {
            let v8 = C::vstate_from_type(ctx, arg0);
            let v9 = constructor_rv_vmv_vi(ctx, v4, v8);
            let v10 = constructor_rv_vmerge_vim(ctx, v9, v7, arg1, v8);
            // Rule at src/isa/riscv64/inst_vector.isle line 1567.
            return v10;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_expand_mask", "src/isa/riscv64/inst_vector.isle line 1566"
    )
}

// Generated as internal constructor for term gen_icmp_mask.
pub fn constructor_gen_icmp_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &IntCC,
    arg2: Value,
    arg3: Value,
) -> VReg {
    let v1 = C::ty_vec_fits_in_register(ctx, arg0);
    if let Some(v2) = v1 {
        match arg1 {
            &IntCC::Equal => {
                let v29 = constructor_replicated_imm5(ctx, arg2);
                if let Some(v30) = v29 {
                    let v23 = constructor_put_in_vreg(ctx, arg3);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v31 = constructor_rv_vmseq_vi(ctx, v23, v30, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1592.
                    return v31;
                }
                let v26 = constructor_replicated_imm5(ctx, arg3);
                if let Some(v27) = v26 {
                    let v6 = constructor_put_in_vreg(ctx, arg2);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v28 = constructor_rv_vmseq_vi(ctx, v6, v27, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1588.
                    return v28;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v25 = constructor_rv_vmseq_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1585.
                            return v25;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v17 = constructor_rv_vmseq_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1582.
                            return v17;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v10 = constructor_rv_vmseq_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1579.
                return v10;
            }
            &IntCC::NotEqual => {
                let v29 = constructor_replicated_imm5(ctx, arg2);
                if let Some(v30) = v29 {
                    let v23 = constructor_put_in_vreg(ctx, arg3);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v36 = constructor_rv_vmsne_vi(ctx, v23, v30, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1611.
                    return v36;
                }
                let v26 = constructor_replicated_imm5(ctx, arg3);
                if let Some(v27) = v26 {
                    let v6 = constructor_put_in_vreg(ctx, arg2);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v35 = constructor_rv_vmsne_vi(ctx, v6, v27, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1607.
                    return v35;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v34 = constructor_rv_vmsne_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1604.
                            return v34;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v33 = constructor_rv_vmsne_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1601.
                            return v33;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v32 = constructor_rv_vmsne_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1598.
                return v32;
            }
            &IntCC::SignedGreaterThan => {
                let v26 = constructor_replicated_imm5(ctx, arg3);
                if let Some(v27) = v26 {
                    let v6 = constructor_put_in_vreg(ctx, arg2);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v58 = constructor_rv_vmsgt_vi(ctx, v6, v27, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1695.
                    return v58;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v57 = constructor_rv_vmslt_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1692.
                            return v57;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v56 = constructor_rv_vmsgt_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1689.
                            return v56;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v55 = constructor_rv_vmsgt_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1686.
                return v55;
            }
            &IntCC::SignedGreaterThanOrEqual => {
                let v29 = constructor_replicated_imm5(ctx, arg2);
                if let Some(v30) = v29 {
                    let v23 = constructor_put_in_vreg(ctx, arg3);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v64 = constructor_rv_vmsle_vi(ctx, v23, v30, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1719.
                    return v64;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v63 = constructor_rv_vmsle_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1716.
                            return v63;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v62 = constructor_rv_vmsge_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1713.
                return v62;
            }
            &IntCC::SignedLessThan => {
                let v29 = constructor_replicated_imm5(ctx, arg2);
                if let Some(v30) = v29 {
                    let v23 = constructor_put_in_vreg(ctx, arg3);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v44 = constructor_rv_vmsgt_vi(ctx, v23, v30, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1641.
                    return v44;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v43 = constructor_rv_vmsgt_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1638.
                            return v43;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v42 = constructor_rv_vmslt_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1635.
                            return v42;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v41 = constructor_rv_vmslt_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1632.
                return v41;
            }
            &IntCC::SignedLessThanOrEqual => {
                let v26 = constructor_replicated_imm5(ctx, arg3);
                if let Some(v27) = v26 {
                    let v6 = constructor_put_in_vreg(ctx, arg2);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v50 = constructor_rv_vmsle_vi(ctx, v6, v27, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1665.
                    return v50;
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v49 = constructor_rv_vmsle_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1662.
                            return v49;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v48 = constructor_rv_vmsle_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1659.
                return v48;
            }
            &IntCC::UnsignedGreaterThan => {
                let v26 = constructor_replicated_imm5(ctx, arg3);
                if let Some(v27) = v26 {
                    let v6 = constructor_put_in_vreg(ctx, arg2);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v54 = constructor_rv_vmsgtu_vi(ctx, v6, v27, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1680.
                    return v54;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v53 = constructor_rv_vmsltu_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1677.
                            return v53;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v52 = constructor_rv_vmsgtu_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1674.
                            return v52;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v51 = constructor_rv_vmsgtu_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1671.
                return v51;
            }
            &IntCC::UnsignedGreaterThanOrEqual => {
                let v29 = constructor_replicated_imm5(ctx, arg2);
                if let Some(v30) = v29 {
                    let v23 = constructor_put_in_vreg(ctx, arg3);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v61 = constructor_rv_vmsleu_vi(ctx, v23, v30, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1707.
                    return v61;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v60 = constructor_rv_vmsleu_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1704.
                            return v60;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v59 = constructor_rv_vmsgeu_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1701.
                return v59;
            }
            &IntCC::UnsignedLessThan => {
                let v29 = constructor_replicated_imm5(ctx, arg2);
                if let Some(v30) = v29 {
                    let v23 = constructor_put_in_vreg(ctx, arg3);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v40 = constructor_rv_vmsgtu_vi(ctx, v23, v30, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1626.
                    return v40;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v39 = constructor_rv_vmsgtu_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1623.
                            return v39;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v38 = constructor_rv_vmsltu_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1620.
                            return v38;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v37 = constructor_rv_vmsltu_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1617.
                return v37;
            }
            &IntCC::UnsignedLessThanOrEqual => {
                let v26 = constructor_replicated_imm5(ctx, arg3);
                if let Some(v27) = v26 {
                    let v6 = constructor_put_in_vreg(ctx, arg2);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v47 = constructor_rv_vmsleu_vi(ctx, v6, v27, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1653.
                    return v47;
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v46 = constructor_rv_vmsleu_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1650.
                            return v46;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v45 = constructor_rv_vmsleu_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1647.
                return v45;
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_icmp_mask", "src/isa/riscv64/inst_vector.isle line 1575"
    )
}

// Generated as internal constructor for term gen_fcmp_mask.
pub fn constructor_gen_fcmp_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FloatCC,
    arg2: Value,
    arg3: Value,
) -> VReg {
    let v1 = C::ty_vec_fits_in_register(ctx, arg0);
    if let Some(v2) = v1 {
        match arg1 {
            &FloatCC::Equal => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v25 = constructor_rv_vmfeq_vf(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1736.
                            return v25;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v17 = constructor_rv_vmfeq_vf(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1733.
                            return v17;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v10 = constructor_rv_vmfeq_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1730.
                return v10;
            }
            &FloatCC::GreaterThan => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v37 = constructor_rv_vmflt_vf(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1781.
                            return v37;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v36 = constructor_rv_vmfgt_vf(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1778.
                            return v36;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v35 = constructor_rv_vmfgt_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1775.
                return v35;
            }
            &FloatCC::GreaterThanOrEqual => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v40 = constructor_rv_vmfle_vf(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1792.
                            return v40;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v39 = constructor_rv_vmfge_vf(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1789.
                            return v39;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v38 = constructor_rv_vmfge_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1786.
                return v38;
            }
            &FloatCC::LessThan => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v31 = constructor_rv_vmfgt_vf(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1759.
                            return v31;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v30 = constructor_rv_vmflt_vf(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1756.
                            return v30;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v29 = constructor_rv_vmflt_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1753.
                return v29;
            }
            &FloatCC::LessThanOrEqual => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v34 = constructor_rv_vmfge_vf(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1770.
                            return v34;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v33 = constructor_rv_vmfle_vf(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1767.
                            return v33;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v32 = constructor_rv_vmfle_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1764.
                return v32;
            }
            &FloatCC::NotEqual => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v28 = constructor_rv_vmfne_vf(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1748.
                            return v28;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v27 = constructor_rv_vmfne_vf(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1745.
                            return v27;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v26 = constructor_rv_vmfne_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1742.
                return v26;
            }
            &FloatCC::Ordered => {
                let v42 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::Equal, arg2, arg2);
                let v43 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::Equal, arg3, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v44 = constructor_rv_vmand_mm(ctx, v42, v43, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1797.
                return v44;
            }
            &FloatCC::OrderedNotEqual => {
                let v50 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg2, arg3);
                let v51 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg3, arg2);
                let v9 = C::vstate_from_type(ctx, v2);
                let v52 = constructor_rv_vmor_mm(ctx, v50, v51, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1813.
                return v52;
            }
            &FloatCC::Unordered => {
                let v46 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::NotEqual, arg2, arg2);
                let v47 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::NotEqual, arg3, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v48 = constructor_rv_vmor_mm(ctx, v46, v47, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1805.
                return v48;
            }
            &FloatCC::UnorderedOrEqual => {
                let v50 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg2, arg3);
                let v51 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg3, arg2);
                let v9 = C::vstate_from_type(ctx, v2);
                let v53 = constructor_rv_vmnor_mm(ctx, v50, v51, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1821.
                return v53;
            }
            &FloatCC::UnorderedOrGreaterThan => {
                let v55 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThanOrEqual, arg2, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v56 = constructor_rv_vmnot_m(ctx, v55, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1829.
                return v56;
            }
            &FloatCC::UnorderedOrGreaterThanOrEqual => {
                let v50 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg2, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v57 = constructor_rv_vmnot_m(ctx, v50, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1834.
                return v57;
            }
            &FloatCC::UnorderedOrLessThan => {
                let v59 =
                    constructor_gen_fcmp_mask(ctx, v2, &FloatCC::GreaterThanOrEqual, arg2, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v60 = constructor_rv_vmnot_m(ctx, v59, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1839.
                return v60;
            }
            &FloatCC::UnorderedOrLessThanOrEqual => {
                let v62 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::GreaterThan, arg2, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v63 = constructor_rv_vmnot_m(ctx, v62, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1844.
                return v63;
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_fcmp_mask", "src/isa/riscv64/inst_vector.isle line 1726"
    )
}

// Generated as internal constructor for term gen_vfcvt_x_f.
pub fn constructor_gen_vfcvt_x_f<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &FRM,
    arg2: VState,
) -> VReg {
    if let &FRM::RTZ = arg1 {
        let v3 = &constructor_unmasked(ctx);
        let v4 = constructor_rv_vfcvt_rtz_x_f_v(ctx, arg0, v3, arg2);
        // Rule at src/isa/riscv64/inst_vector.isle line 1852.
        return v4;
    }
    let v5 = constructor_rv_fsrmi(ctx, arg1);
    let v3 = &constructor_unmasked(ctx);
    let v6 = constructor_rv_vfcvt_x_f_v(ctx, arg0, v3, arg2);
    let v7 = constructor_rv_fsrm(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1856.
    return v6;
}

// Generated as internal constructor for term float_int_max.
pub fn constructor_float_int_max<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    match arg0 {
        F32 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 1867.
            return 0x4B000000;
        }
        F64 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 1868.
            return 0x4330000000000000;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "float_int_max", "src/isa/riscv64/inst_vector.isle line 1866"
    )
}

// Generated as internal constructor for term gen_vec_round.
pub fn constructor_gen_vec_round<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &FRM,
    arg2: Type,
) -> VReg {
    let v3 = C::ty_vec_fits_in_register(ctx, arg2);
    if let Some(v4) = v3 {
        let v6 = &constructor_unmasked(ctx);
        let v7 = C::vstate_from_type(ctx, v4);
        let v8 = constructor_rv_vfabs_v(ctx, arg0, v6, v7);
        let v5 = C::lane_type(ctx, v4);
        let v9 = constructor_float_int_max(ctx, v5);
        let v10 = constructor_imm(ctx, v5, v9);
        let v11 = C::freg_new(ctx, v10);
        let v12 = constructor_rv_vmflt_vf(ctx, v8, v11, v6, v7);
        let v13 = constructor_gen_vfcvt_x_f(ctx, arg0, arg1, v7);
        let v14 = constructor_rv_vfcvt_f_x_v(ctx, v13, v6, v7);
        let v15 = constructor_rv_vfsgnj_vv(ctx, v14, arg0, v6, v7);
        let v16 = C::zero_reg(ctx);
        let v17 = constructor_float_int_of_same_size(ctx, v5);
        let v18 = constructor_gen_bitcast(ctx, v16, v17, v5);
        let v19 = C::freg_new(ctx, v18);
        let v20 = constructor_rv_vfadd_vf(ctx, arg0, v19, v6, v7);
        let v21 = constructor_rv_vmerge_vvm(ctx, v20, v15, v12, v7);
        // Rule at src/isa/riscv64/inst_vector.isle line 1877.
        return v21;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_vec_round", "src/isa/riscv64/inst_vector.isle line 1871"
    )
}

// Generated as internal constructor for term lower.
pub fn constructor_lower<C: Context>(ctx: &mut C, arg0: Inst) -> Option<InstOutput> {
    let v4 = &C::inst_data(ctx, arg0);
    match v4 {
        &InstructionData::AtomicCas {
            opcode: ref v1262,
            args: ref v1263,
            flags: v1264,
        } => {
            if let &Opcode::AtomicCas = v1262 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v1201 = C::valid_atomic_transaction(ctx, v3);
                    if let Some(v1202) = v1201 {
                        let v1232 = C::temp_writable_reg(ctx, v1202);
                        let v1269 = C::temp_writable_reg(ctx, v1202);
                        let v1265 = C::unpack_value_array_3(ctx, v1263);
                        let v1270 = constructor_put_in_xreg(ctx, v1265.0);
                        let v1271 = constructor_gen_atomic_offset(ctx, v1270, v1202);
                        let v1273 = constructor_zext(ctx, v1265.1);
                        let v1275 = constructor_put_in_xreg(ctx, v1265.0);
                        let v1276 = constructor_gen_atomic_p(ctx, v1275, v1202);
                        let v1278 = C::put_in_reg(ctx, v1265.2);
                        let v1272 = C::xreg_to_reg(ctx, v1271);
                        let v1274 = C::xreg_to_reg(ctx, v1273);
                        let v1277 = C::xreg_to_reg(ctx, v1276);
                        let v1279 = MInst::AtomicCas {
                            offset: v1272,
                            t0: v1232,
                            dst: v1269,
                            e: v1274,
                            addr: v1277,
                            v: v1278,
                            ty: v1202,
                        };
                        let v1280 = C::emit(ctx, &v1279);
                        let v1281 = C::writable_reg_to_reg(ctx, v1269);
                        let v1282 = constructor_output_reg(ctx, v1281);
                        // Rule at src/isa/riscv64/lower.isle line 1414.
                        return Some(v1282);
                    }
                }
            }
        }
        &InstructionData::AtomicRmw {
            opcode: ref v1203,
            args: ref v1204,
            flags: v1205,
            op: ref v1206,
        } => {
            if let &Opcode::AtomicRmw = v1203 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v1201 = C::valid_atomic_transaction(ctx, v3);
                    if let Some(v1202) = v1201 {
                        let v1216 = C::fits_in_16(ctx, v1202);
                        if let Some(v1217) = v1216 {
                            let v1222 = C::is_atomic_rmw_max_etc(ctx, v1206);
                            if let Some(v1223) = v1222 {
                                match v1223.1 {
                                    true => {
                                        let v1207 = C::unpack_value_array_2(ctx, v1204);
                                        let v1218 = constructor_put_in_xreg(ctx, v1207.0);
                                        let v1226 = constructor_sext(ctx, v1207.1);
                                        let v1227 = constructor_gen_atomic_rmw_loop(
                                            ctx, &v1223.0, v1217, v1218, v1226,
                                        );
                                        let v1228 = constructor_output_xreg(ctx, v1227);
                                        // Rule at src/isa/riscv64/lower.isle line 1346.
                                        return Some(v1228);
                                    }
                                    false => {
                                        let v1207 = C::unpack_value_array_2(ctx, v1204);
                                        let v1218 = constructor_put_in_xreg(ctx, v1207.0);
                                        let v1229 = constructor_zext(ctx, v1207.1);
                                        let v1230 = constructor_gen_atomic_rmw_loop(
                                            ctx, &v1223.0, v1217, v1218, v1229,
                                        );
                                        let v1231 = constructor_output_xreg(ctx, v1230);
                                        // Rule at src/isa/riscv64/lower.isle line 1352.
                                        return Some(v1231);
                                    }
                                    _ => {}
                                }
                            }
                            let v1207 = C::unpack_value_array_2(ctx, v1204);
                            let v1218 = constructor_put_in_xreg(ctx, v1207.0);
                            let v1219 = constructor_put_in_xreg(ctx, v1207.1);
                            let v1220 =
                                constructor_gen_atomic_rmw_loop(ctx, v1206, v1217, v1218, v1219);
                            let v1221 = constructor_output_xreg(ctx, v1220);
                            // Rule at src/isa/riscv64/lower.isle line 1339.
                            return Some(v1221);
                        }
                        match v1206 {
                            &AtomicRmwOp::Nand => {
                                let v1207 = C::unpack_value_array_2(ctx, v1204);
                                let v1218 = constructor_put_in_xreg(ctx, v1207.0);
                                let v1219 = constructor_put_in_xreg(ctx, v1207.1);
                                let v1242 = constructor_gen_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRmwOp::Nand,
                                    v1202,
                                    v1218,
                                    v1219,
                                );
                                let v1243 = constructor_output_xreg(ctx, v1242);
                                // Rule at src/isa/riscv64/lower.isle line 1379.
                                return Some(v1243);
                            }
                            &AtomicRmwOp::Sub => {
                                let v1232 = C::temp_writable_reg(ctx, v1202);
                                let v1207 = C::unpack_value_array_2(ctx, v1204);
                                let v1219 = constructor_put_in_xreg(ctx, v1207.1);
                                let v1233 = constructor_rv_neg(ctx, v1219);
                                let v1236 =
                                    &constructor_get_atomic_rmw_op(ctx, v1202, &AtomicRmwOp::Add);
                                let v1237 = C::put_in_reg(ctx, v1207.0);
                                let v1238 = C::atomic_amo(ctx);
                                let v1234 = C::xreg_to_reg(ctx, v1233);
                                let v1239 = constructor_gen_atomic(ctx, v1236, v1237, v1234, v1238);
                                let v1240 = constructor_output_reg(ctx, v1239);
                                // Rule at src/isa/riscv64/lower.isle line 1361.
                                return Some(v1240);
                            }
                            _ => {}
                        }
                        let v1210 = &constructor_get_atomic_rmw_op(ctx, v1202, v1206);
                        let v1207 = C::unpack_value_array_2(ctx, v1204);
                        let v1211 = C::put_in_reg(ctx, v1207.0);
                        let v1212 = C::put_in_reg(ctx, v1207.1);
                        let v1213 = C::atomic_amo(ctx);
                        let v1214 = constructor_gen_atomic(ctx, v1210, v1211, v1212, v1213);
                        let v1215 = constructor_output_reg(ctx, v1214);
                        // Rule at src/isa/riscv64/lower.isle line 1332.
                        return Some(v1215);
                    }
                }
            }
        }
        &InstructionData::Binary {
            opcode: ref v36,
            args: ref v37,
        } => {
            match v36 {
                &Opcode::Swizzle => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v1935 = constructor_replicated_uimm5(ctx, v38.1);
                            if let Some(v1936) = v1935 {
                                let v161 = constructor_put_in_vreg(ctx, v38.0);
                                let v163 = &constructor_unmasked(ctx);
                                let v164 = C::vstate_from_type(ctx, v11);
                                let v1937 =
                                    constructor_rv_vrgather_vi(ctx, v161, v1936, v163, v164);
                                let v1938 = constructor_output_vreg(ctx, v1937);
                                // Rule at src/isa/riscv64/lower.isle line 2231.
                                return Some(v1938);
                            }
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v167 = constructor_put_in_xreg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1933 =
                                            constructor_rv_vrgather_vx(ctx, v161, v167, v163, v164);
                                        let v1934 = constructor_output_vreg(ctx, v1933);
                                        // Rule at src/isa/riscv64/lower.isle line 2228.
                                        return Some(v1934);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1931 = constructor_rv_vrgather_vv(ctx, v161, v162, v163, v164);
                            let v1932 = constructor_output_vreg(ctx, v1931);
                            // Rule at src/isa/riscv64/lower.isle line 2225.
                            return Some(v1932);
                        }
                    }
                }
                &Opcode::Smin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v191 = constructor_put_in_vreg(ctx, v38.1);
                                        let v192 = constructor_put_in_xreg(ctx, v75);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1485 =
                                            constructor_rv_vmin_vx(ctx, v191, v192, v163, v164);
                                        let v1486 = constructor_output_vreg(ctx, v1485);
                                        // Rule at src/isa/riscv64/lower.isle line 1668.
                                        return Some(v1486);
                                    }
                                }
                            }
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v167 = constructor_put_in_xreg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1483 =
                                            constructor_rv_vmin_vx(ctx, v161, v167, v163, v164);
                                        let v1484 = constructor_output_vreg(ctx, v1483);
                                        // Rule at src/isa/riscv64/lower.isle line 1665.
                                        return Some(v1484);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1481 = constructor_rv_vmin_vv(ctx, v161, v162, v163, v164);
                            let v1482 = constructor_output_vreg(ctx, v1481);
                            // Rule at src/isa/riscv64/lower.isle line 1662.
                            return Some(v1482);
                        }
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v136 = C::put_in_regs(ctx, v38.0);
                            let v398 = C::put_in_regs(ctx, v38.1);
                            let v1477 =
                                constructor_gen_icmp(ctx, &IntCC::SignedLessThan, v136, v398, I128);
                            let v1478 = constructor_cmp_nez(ctx, v1477);
                            let v1464 = C::put_in_regs(ctx, v38.0);
                            let v461 = C::put_in_regs(ctx, v38.1);
                            let v1479 = constructor_gen_select_regs(ctx, v1478, v1464, v461);
                            let v1480 = C::output(ctx, v1479);
                            // Rule at src/isa/riscv64/lower.isle line 1659.
                            return Some(v1480);
                        }
                        let v575 = C::fits_in_64(ctx, v3);
                        if let Some(v576) = v575 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v482 = constructor_sext(ctx, v38.0);
                            let v483 = constructor_sext(ctx, v38.1);
                            let v1473 = constructor_cmp_lt(ctx, v482, v483);
                            let v1474 = constructor_gen_select_xreg(ctx, v1473, v482, v483);
                            let v1475 = constructor_output_xreg(ctx, v1474);
                            // Rule at src/isa/riscv64/lower.isle line 1654.
                            return Some(v1475);
                        }
                    }
                }
                &Opcode::Umin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v191 = constructor_put_in_vreg(ctx, v38.1);
                                        let v192 = constructor_put_in_xreg(ctx, v75);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1512 =
                                            constructor_rv_vminu_vx(ctx, v191, v192, v163, v164);
                                        let v1513 = constructor_output_vreg(ctx, v1512);
                                        // Rule at src/isa/riscv64/lower.isle line 1706.
                                        return Some(v1513);
                                    }
                                }
                            }
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v167 = constructor_put_in_xreg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1510 =
                                            constructor_rv_vminu_vx(ctx, v161, v167, v163, v164);
                                        let v1511 = constructor_output_vreg(ctx, v1510);
                                        // Rule at src/isa/riscv64/lower.isle line 1703.
                                        return Some(v1511);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1508 = constructor_rv_vminu_vv(ctx, v161, v162, v163, v164);
                            let v1509 = constructor_output_vreg(ctx, v1508);
                            // Rule at src/isa/riscv64/lower.isle line 1700.
                            return Some(v1509);
                        }
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v136 = C::put_in_regs(ctx, v38.0);
                            let v398 = C::put_in_regs(ctx, v38.1);
                            let v1504 = constructor_gen_icmp(
                                ctx,
                                &IntCC::UnsignedLessThan,
                                v136,
                                v398,
                                I128,
                            );
                            let v1505 = constructor_cmp_nez(ctx, v1504);
                            let v1464 = C::put_in_regs(ctx, v38.0);
                            let v461 = C::put_in_regs(ctx, v38.1);
                            let v1506 = constructor_gen_select_regs(ctx, v1505, v1464, v461);
                            let v1507 = C::output(ctx, v1506);
                            // Rule at src/isa/riscv64/lower.isle line 1697.
                            return Some(v1507);
                        }
                        let v575 = C::fits_in_64(ctx, v3);
                        if let Some(v576) = v575 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v492 = constructor_zext(ctx, v38.0);
                            let v493 = constructor_zext(ctx, v38.1);
                            let v1501 = constructor_cmp_ltu(ctx, v492, v493);
                            let v1502 = constructor_gen_select_xreg(ctx, v1501, v492, v493);
                            let v1503 = constructor_output_xreg(ctx, v1502);
                            // Rule at src/isa/riscv64/lower.isle line 1692.
                            return Some(v1503);
                        }
                    }
                }
                &Opcode::Smax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v191 = constructor_put_in_vreg(ctx, v38.1);
                                        let v192 = constructor_put_in_xreg(ctx, v75);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1471 =
                                            constructor_rv_vmax_vx(ctx, v191, v192, v163, v164);
                                        let v1472 = constructor_output_vreg(ctx, v1471);
                                        // Rule at src/isa/riscv64/lower.isle line 1649.
                                        return Some(v1472);
                                    }
                                }
                            }
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v167 = constructor_put_in_xreg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1469 =
                                            constructor_rv_vmax_vx(ctx, v161, v167, v163, v164);
                                        let v1470 = constructor_output_vreg(ctx, v1469);
                                        // Rule at src/isa/riscv64/lower.isle line 1646.
                                        return Some(v1470);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1467 = constructor_rv_vmax_vv(ctx, v161, v162, v163, v164);
                            let v1468 = constructor_output_vreg(ctx, v1467);
                            // Rule at src/isa/riscv64/lower.isle line 1643.
                            return Some(v1468);
                        }
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v136 = C::put_in_regs(ctx, v38.0);
                            let v398 = C::put_in_regs(ctx, v38.1);
                            let v1462 = constructor_gen_icmp(
                                ctx,
                                &IntCC::SignedGreaterThan,
                                v136,
                                v398,
                                I128,
                            );
                            let v1463 = constructor_cmp_nez(ctx, v1462);
                            let v1464 = C::put_in_regs(ctx, v38.0);
                            let v461 = C::put_in_regs(ctx, v38.1);
                            let v1465 = constructor_gen_select_regs(ctx, v1463, v1464, v461);
                            let v1466 = C::output(ctx, v1465);
                            // Rule at src/isa/riscv64/lower.isle line 1640.
                            return Some(v1466);
                        }
                        let v575 = C::fits_in_64(ctx, v3);
                        if let Some(v576) = v575 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v482 = constructor_sext(ctx, v38.0);
                            let v483 = constructor_sext(ctx, v38.1);
                            let v1458 = constructor_cmp_gt(ctx, v482, v483);
                            let v1459 = constructor_gen_select_xreg(ctx, v1458, v482, v483);
                            let v1460 = constructor_output_xreg(ctx, v1459);
                            // Rule at src/isa/riscv64/lower.isle line 1635.
                            return Some(v1460);
                        }
                    }
                }
                &Opcode::Umax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v191 = constructor_put_in_vreg(ctx, v38.1);
                                        let v192 = constructor_put_in_xreg(ctx, v75);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1499 =
                                            constructor_rv_vmaxu_vx(ctx, v191, v192, v163, v164);
                                        let v1500 = constructor_output_vreg(ctx, v1499);
                                        // Rule at src/isa/riscv64/lower.isle line 1687.
                                        return Some(v1500);
                                    }
                                }
                            }
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v167 = constructor_put_in_xreg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1497 =
                                            constructor_rv_vmaxu_vx(ctx, v161, v167, v163, v164);
                                        let v1498 = constructor_output_vreg(ctx, v1497);
                                        // Rule at src/isa/riscv64/lower.isle line 1684.
                                        return Some(v1498);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1495 = constructor_rv_vmaxu_vv(ctx, v161, v162, v163, v164);
                            let v1496 = constructor_output_vreg(ctx, v1495);
                            // Rule at src/isa/riscv64/lower.isle line 1681.
                            return Some(v1496);
                        }
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v136 = C::put_in_regs(ctx, v38.0);
                            let v398 = C::put_in_regs(ctx, v38.1);
                            let v1491 = constructor_gen_icmp(
                                ctx,
                                &IntCC::UnsignedGreaterThan,
                                v136,
                                v398,
                                I128,
                            );
                            let v1492 = constructor_cmp_nez(ctx, v1491);
                            let v1464 = C::put_in_regs(ctx, v38.0);
                            let v461 = C::put_in_regs(ctx, v38.1);
                            let v1493 = constructor_gen_select_regs(ctx, v1492, v1464, v461);
                            let v1494 = C::output(ctx, v1493);
                            // Rule at src/isa/riscv64/lower.isle line 1678.
                            return Some(v1494);
                        }
                        let v575 = C::fits_in_64(ctx, v3);
                        if let Some(v576) = v575 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v492 = constructor_zext(ctx, v38.0);
                            let v493 = constructor_zext(ctx, v38.1);
                            let v1487 = constructor_cmp_gtu(ctx, v492, v493);
                            let v1488 = constructor_gen_select_xreg(ctx, v1487, v492, v493);
                            let v1489 = constructor_output_xreg(ctx, v1488);
                            // Rule at src/isa/riscv64/lower.isle line 1673.
                            return Some(v1489);
                        }
                    }
                }
                &Opcode::AvgRound => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v907 = constructor_u64_to_uimm5(ctx, 0x1);
                            if let Some(v908) = v907 {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v161 = constructor_put_in_vreg(ctx, v38.0);
                                let v162 = constructor_put_in_vreg(ctx, v38.1);
                                let v163 = &constructor_unmasked(ctx);
                                let v164 = C::vstate_from_type(ctx, v11);
                                let v628 = constructor_rv_vand_vv(ctx, v161, v162, v163, v164);
                                let v2026 = constructor_put_in_vreg(ctx, v38.0);
                                let v2027 = constructor_put_in_vreg(ctx, v38.1);
                                let v2028 = constructor_rv_vxor_vv(ctx, v2026, v2027, v163, v164);
                                let v2029 = constructor_rv_vssrl_vi(ctx, v2028, v908, v163, v164);
                                let v2030 = constructor_rv_vadd_vv(ctx, v628, v2029, v163, v164);
                                let v2031 = constructor_output_vreg(ctx, v2030);
                                // Rule at src/isa/riscv64/lower.isle line 2346.
                                return Some(v2031);
                            }
                        }
                    }
                }
                &Opcode::UaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v207 = constructor_replicated_imm5(ctx, v38.0);
                            if let Some(v208) = v207 {
                                let v191 = constructor_put_in_vreg(ctx, v38.1);
                                let v163 = &constructor_unmasked(ctx);
                                let v164 = C::vstate_from_type(ctx, v11);
                                let v1888 = constructor_rv_vsaddu_vi(ctx, v191, v208, v163, v164);
                                let v1889 = constructor_output_vreg(ctx, v1888);
                                // Rule at src/isa/riscv64/lower.isle line 2136.
                                return Some(v1889);
                            }
                            let v187 = constructor_replicated_imm5(ctx, v38.1);
                            if let Some(v188) = v187 {
                                let v161 = constructor_put_in_vreg(ctx, v38.0);
                                let v163 = &constructor_unmasked(ctx);
                                let v164 = C::vstate_from_type(ctx, v11);
                                let v1886 = constructor_rv_vsaddu_vi(ctx, v161, v188, v163, v164);
                                let v1887 = constructor_output_vreg(ctx, v1886);
                                // Rule at src/isa/riscv64/lower.isle line 2132.
                                return Some(v1887);
                            }
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v191 = constructor_put_in_vreg(ctx, v38.1);
                                        let v192 = constructor_put_in_xreg(ctx, v75);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1884 =
                                            constructor_rv_vsaddu_vx(ctx, v191, v192, v163, v164);
                                        let v1885 = constructor_output_vreg(ctx, v1884);
                                        // Rule at src/isa/riscv64/lower.isle line 2129.
                                        return Some(v1885);
                                    }
                                }
                            }
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v167 = constructor_put_in_xreg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1882 =
                                            constructor_rv_vsaddu_vx(ctx, v161, v167, v163, v164);
                                        let v1883 = constructor_output_vreg(ctx, v1882);
                                        // Rule at src/isa/riscv64/lower.isle line 2126.
                                        return Some(v1883);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1880 = constructor_rv_vsaddu_vv(ctx, v161, v162, v163, v164);
                            let v1881 = constructor_output_vreg(ctx, v1880);
                            // Rule at src/isa/riscv64/lower.isle line 2123.
                            return Some(v1881);
                        }
                    }
                }
                &Opcode::SaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v207 = constructor_replicated_imm5(ctx, v38.0);
                            if let Some(v208) = v207 {
                                let v191 = constructor_put_in_vreg(ctx, v38.1);
                                let v163 = &constructor_unmasked(ctx);
                                let v164 = C::vstate_from_type(ctx, v11);
                                let v1898 = constructor_rv_vsadd_vi(ctx, v191, v208, v163, v164);
                                let v1899 = constructor_output_vreg(ctx, v1898);
                                // Rule at src/isa/riscv64/lower.isle line 2155.
                                return Some(v1899);
                            }
                            let v187 = constructor_replicated_imm5(ctx, v38.1);
                            if let Some(v188) = v187 {
                                let v161 = constructor_put_in_vreg(ctx, v38.0);
                                let v163 = &constructor_unmasked(ctx);
                                let v164 = C::vstate_from_type(ctx, v11);
                                let v1896 = constructor_rv_vsadd_vi(ctx, v161, v188, v163, v164);
                                let v1897 = constructor_output_vreg(ctx, v1896);
                                // Rule at src/isa/riscv64/lower.isle line 2151.
                                return Some(v1897);
                            }
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v191 = constructor_put_in_vreg(ctx, v38.1);
                                        let v192 = constructor_put_in_xreg(ctx, v75);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1894 =
                                            constructor_rv_vsadd_vx(ctx, v191, v192, v163, v164);
                                        let v1895 = constructor_output_vreg(ctx, v1894);
                                        // Rule at src/isa/riscv64/lower.isle line 2148.
                                        return Some(v1895);
                                    }
                                }
                            }
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v167 = constructor_put_in_xreg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1892 =
                                            constructor_rv_vsadd_vx(ctx, v161, v167, v163, v164);
                                        let v1893 = constructor_output_vreg(ctx, v1892);
                                        // Rule at src/isa/riscv64/lower.isle line 2145.
                                        return Some(v1893);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1890 = constructor_rv_vsadd_vv(ctx, v161, v162, v163, v164);
                            let v1891 = constructor_output_vreg(ctx, v1890);
                            // Rule at src/isa/riscv64/lower.isle line 2142.
                            return Some(v1891);
                        }
                    }
                }
                &Opcode::UsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v167 = constructor_put_in_xreg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1902 =
                                            constructor_rv_vssubu_vx(ctx, v161, v167, v163, v164);
                                        let v1903 = constructor_output_vreg(ctx, v1902);
                                        // Rule at src/isa/riscv64/lower.isle line 2164.
                                        return Some(v1903);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1900 = constructor_rv_vssubu_vv(ctx, v161, v162, v163, v164);
                            let v1901 = constructor_output_vreg(ctx, v1900);
                            // Rule at src/isa/riscv64/lower.isle line 2161.
                            return Some(v1901);
                        }
                    }
                }
                &Opcode::SsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v167 = constructor_put_in_xreg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1906 =
                                            constructor_rv_vssub_vx(ctx, v161, v167, v163, v164);
                                        let v1907 = constructor_output_vreg(ctx, v1906);
                                        // Rule at src/isa/riscv64/lower.isle line 2172.
                                        return Some(v1907);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1904 = constructor_rv_vssub_vv(ctx, v161, v162, v163, v164);
                            let v1905 = constructor_output_vreg(ctx, v1904);
                            // Rule at src/isa/riscv64/lower.isle line 2169.
                            return Some(v1905);
                        }
                    }
                }
                &Opcode::Iadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v207 = constructor_replicated_imm5(ctx, v38.0);
                            if let Some(v208) = v207 {
                                let v191 = constructor_put_in_vreg(ctx, v38.1);
                                let v163 = &constructor_unmasked(ctx);
                                let v164 = C::vstate_from_type(ctx, v11);
                                let v209 = constructor_rv_vadd_vi(ctx, v191, v208, v163, v164);
                                let v210 = constructor_output_vreg(ctx, v209);
                                // Rule at src/isa/riscv64/lower.isle line 140.
                                return Some(v210);
                            }
                            let v187 = constructor_replicated_imm5(ctx, v38.1);
                            if let Some(v188) = v187 {
                                let v161 = constructor_put_in_vreg(ctx, v38.0);
                                let v163 = &constructor_unmasked(ctx);
                                let v164 = C::vstate_from_type(ctx, v11);
                                let v189 = constructor_rv_vadd_vi(ctx, v161, v188, v163, v164);
                                let v190 = constructor_output_vreg(ctx, v189);
                                // Rule at src/isa/riscv64/lower.isle line 122.
                                return Some(v190);
                            }
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                match v73 {
                                    &InstructionData::Binary {
                                        opcode: ref v97,
                                        args: ref v98,
                                    } => {
                                        if let &Opcode::Imul = v97 {
                                            let v99 = C::unpack_value_array_2(ctx, v98);
                                            let v125 = C::def_inst(ctx, v99.0);
                                            if let Some(v126) = v125 {
                                                let v127 = &C::inst_data(ctx, v126);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v128,
                                                    arg: v129,
                                                } = v127
                                                {
                                                    if let &Opcode::Splat = v128 {
                                                        let v191 =
                                                            constructor_put_in_vreg(ctx, v38.1);
                                                        let v312 =
                                                            constructor_put_in_vreg(ctx, v99.1);
                                                        let v313 =
                                                            constructor_put_in_xreg(ctx, v129);
                                                        let v163 = &constructor_unmasked(ctx);
                                                        let v164 = C::vstate_from_type(ctx, v11);
                                                        let v314 = constructor_rv_vmacc_vx(
                                                            ctx, v191, v312, v313, v163, v164,
                                                        );
                                                        let v315 =
                                                            constructor_output_vreg(ctx, v314);
                                                        // Rule at src/isa/riscv64/lower.isle line 275.
                                                        return Some(v315);
                                                    }
                                                }
                                            }
                                            let v304 = C::def_inst(ctx, v99.1);
                                            if let Some(v305) = v304 {
                                                let v306 = &C::inst_data(ctx, v305);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v307,
                                                    arg: v308,
                                                } = v306
                                                {
                                                    if let &Opcode::Splat = v307 {
                                                        let v191 =
                                                            constructor_put_in_vreg(ctx, v38.1);
                                                        let v300 =
                                                            constructor_put_in_vreg(ctx, v99.0);
                                                        let v309 =
                                                            constructor_put_in_xreg(ctx, v308);
                                                        let v163 = &constructor_unmasked(ctx);
                                                        let v164 = C::vstate_from_type(ctx, v11);
                                                        let v310 = constructor_rv_vmacc_vx(
                                                            ctx, v191, v300, v309, v163, v164,
                                                        );
                                                        let v311 =
                                                            constructor_output_vreg(ctx, v310);
                                                        // Rule at src/isa/riscv64/lower.isle line 272.
                                                        return Some(v311);
                                                    }
                                                }
                                            }
                                            let v191 = constructor_put_in_vreg(ctx, v38.1);
                                            let v300 = constructor_put_in_vreg(ctx, v99.0);
                                            let v301 = constructor_put_in_vreg(ctx, v99.1);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v164 = C::vstate_from_type(ctx, v11);
                                            let v302 = constructor_rv_vmacc_vv(
                                                ctx, v191, v300, v301, v163, v164,
                                            );
                                            let v303 = constructor_output_vreg(ctx, v302);
                                            // Rule at src/isa/riscv64/lower.isle line 269.
                                            return Some(v303);
                                        }
                                    }
                                    &InstructionData::Unary {
                                        opcode: ref v74,
                                        arg: v75,
                                    } => {
                                        match v74 {
                                            &Opcode::Splat => {
                                                let v195 = C::def_inst(ctx, v75);
                                                if let Some(v196) = v195 {
                                                    let v197 = &C::inst_data(ctx, v196);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v198,
                                                        arg: v199,
                                                    } = v197
                                                    {
                                                        match v198 {
                                                            &Opcode::Uextend => {
                                                                let v60 = C::def_inst(ctx, v38.1);
                                                                if let Some(v61) = v60 {
                                                                    let v62 =
                                                                        &C::inst_data(ctx, v61);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v63,
                                                                        arg: v64,
                                                                    } = v62 {
                                                                        match v63 {
                                                                            &Opcode::UwidenLow => {
                                                                                let v65 = C::value_type(ctx, v64);
                                                                                let v232 = C::lane_type(ctx, v65);
                                                                                let v200 = C::value_type(ctx, v199);
                                                                                let v233 = C::ty_equal(ctx, v232, v200);
                                                                                if v233 == true {
                                                                                    let v234 = constructor_put_in_vreg(ctx, v64);
                                                                                    let v202 = constructor_put_in_xreg(ctx, v199);
                                                                                    let v163 = &constructor_unmasked(ctx);
                                                                                    let v212 = C::ty_half_lanes(ctx, v65);
                                                                                    let v213 = v212?;
                                                                                    let v214 = C::vstate_from_type(ctx, v213);
                                                                                    let v215 = C::vstate_mf2(ctx, v214);
                                                                                    let v263 = constructor_rv_vwaddu_vx(ctx, v234, v202, v163, v215);
                                                                                    let v264 = constructor_output_vreg(ctx, v263);
                                                                                    // Rule at src/isa/riscv64/lower.isle line 206.
                                                                                    return Some(v264);
                                                                                }
                                                                            }
                                                                            &Opcode::UwidenHigh => {
                                                                                let v65 = C::value_type(ctx, v64);
                                                                                let v232 = C::lane_type(ctx, v65);
                                                                                let v200 = C::value_type(ctx, v199);
                                                                                let v233 = C::ty_equal(ctx, v232, v200);
                                                                                if v233 == true {
                                                                                    let v234 = constructor_put_in_vreg(ctx, v64);
                                                                                    let v251 = constructor_gen_slidedown_half(ctx, v65, v234);
                                                                                    let v252 = constructor_put_in_xreg(ctx, v199);
                                                                                    let v163 = &constructor_unmasked(ctx);
                                                                                    let v212 = C::ty_half_lanes(ctx, v65);
                                                                                    let v213 = v212?;
                                                                                    let v214 = C::vstate_from_type(ctx, v213);
                                                                                    let v215 = C::vstate_mf2(ctx, v214);
                                                                                    let v273 = constructor_rv_vwaddu_vx(ctx, v251, v252, v163, v215);
                                                                                    let v274 = constructor_output_vreg(ctx, v273);
                                                                                    // Rule at src/isa/riscv64/lower.isle line 229.
                                                                                    return Some(v274);
                                                                                }
                                                                            }
                                                                            _ => {}
                                                                        }
                                                                    }
                                                                }
                                                                let v176 =
                                                                    C::ty_half_width(ctx, v11);
                                                                if let Some(v177) = v176 {
                                                                    let v178 =
                                                                        C::lane_type(ctx, v177);
                                                                    let v200 =
                                                                        C::value_type(ctx, v199);
                                                                    let v201 = C::ty_equal(
                                                                        ctx, v178, v200,
                                                                    );
                                                                    if v201 == true {
                                                                        let v191 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v38.1,
                                                                            );
                                                                        let v202 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v199,
                                                                            );
                                                                        let v163 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v181 =
                                                                            C::vstate_from_type(
                                                                                ctx, v177,
                                                                            );
                                                                        let v182 = C::vstate_mf2(
                                                                            ctx, v181,
                                                                        );
                                                                        let v205 = constructor_rv_vwaddu_wx(ctx, v191, v202, v163, v182);
                                                                        let v206 =
                                                                            constructor_output_vreg(
                                                                                ctx, v205,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 135.
                                                                        return Some(v206);
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::Sextend => {
                                                                let v60 = C::def_inst(ctx, v38.1);
                                                                if let Some(v61) = v60 {
                                                                    let v62 =
                                                                        &C::inst_data(ctx, v61);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v63,
                                                                        arg: v64,
                                                                    } = v62 {
                                                                        match v63 {
                                                                            &Opcode::SwidenLow => {
                                                                                let v65 = C::value_type(ctx, v64);
                                                                                let v232 = C::lane_type(ctx, v65);
                                                                                let v200 = C::value_type(ctx, v199);
                                                                                let v233 = C::ty_equal(ctx, v232, v200);
                                                                                if v233 == true {
                                                                                    let v234 = constructor_put_in_vreg(ctx, v64);
                                                                                    let v202 = constructor_put_in_xreg(ctx, v199);
                                                                                    let v163 = &constructor_unmasked(ctx);
                                                                                    let v212 = C::ty_half_lanes(ctx, v65);
                                                                                    let v213 = v212?;
                                                                                    let v214 = C::vstate_from_type(ctx, v213);
                                                                                    let v215 = C::vstate_mf2(ctx, v214);
                                                                                    let v235 = constructor_rv_vwadd_vx(ctx, v234, v202, v163, v215);
                                                                                    let v236 = constructor_output_vreg(ctx, v235);
                                                                                    // Rule at src/isa/riscv64/lower.isle line 161.
                                                                                    return Some(v236);
                                                                                }
                                                                            }
                                                                            &Opcode::SwidenHigh => {
                                                                                let v65 = C::value_type(ctx, v64);
                                                                                let v232 = C::lane_type(ctx, v65);
                                                                                let v200 = C::value_type(ctx, v199);
                                                                                let v233 = C::ty_equal(ctx, v232, v200);
                                                                                if v233 == true {
                                                                                    let v234 = constructor_put_in_vreg(ctx, v64);
                                                                                    let v251 = constructor_gen_slidedown_half(ctx, v65, v234);
                                                                                    let v252 = constructor_put_in_xreg(ctx, v199);
                                                                                    let v163 = &constructor_unmasked(ctx);
                                                                                    let v212 = C::ty_half_lanes(ctx, v65);
                                                                                    let v213 = v212?;
                                                                                    let v214 = C::vstate_from_type(ctx, v213);
                                                                                    let v215 = C::vstate_mf2(ctx, v214);
                                                                                    let v253 = constructor_rv_vwadd_vx(ctx, v251, v252, v163, v215);
                                                                                    let v254 = constructor_output_vreg(ctx, v253);
                                                                                    // Rule at src/isa/riscv64/lower.isle line 184.
                                                                                    return Some(v254);
                                                                                }
                                                                            }
                                                                            _ => {}
                                                                        }
                                                                    }
                                                                }
                                                                let v176 =
                                                                    C::ty_half_width(ctx, v11);
                                                                if let Some(v177) = v176 {
                                                                    let v178 =
                                                                        C::lane_type(ctx, v177);
                                                                    let v200 =
                                                                        C::value_type(ctx, v199);
                                                                    let v201 = C::ty_equal(
                                                                        ctx, v178, v200,
                                                                    );
                                                                    if v201 == true {
                                                                        let v191 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v38.1,
                                                                            );
                                                                        let v202 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v199,
                                                                            );
                                                                        let v163 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v181 =
                                                                            C::vstate_from_type(
                                                                                ctx, v177,
                                                                            );
                                                                        let v182 = C::vstate_mf2(
                                                                            ctx, v181,
                                                                        );
                                                                        let v203 =
                                                                            constructor_rv_vwadd_wx(
                                                                                ctx, v191, v202,
                                                                                v163, v182,
                                                                            );
                                                                        let v204 =
                                                                            constructor_output_vreg(
                                                                                ctx, v203,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 130.
                                                                        return Some(v204);
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v191 = constructor_put_in_vreg(ctx, v38.1);
                                                let v192 = constructor_put_in_xreg(ctx, v75);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v164 = C::vstate_from_type(ctx, v11);
                                                let v193 = constructor_rv_vadd_vx(
                                                    ctx, v191, v192, v163, v164,
                                                );
                                                let v194 = constructor_output_vreg(ctx, v193);
                                                // Rule at src/isa/riscv64/lower.isle line 127.
                                                return Some(v194);
                                            }
                                            &Opcode::Ineg => {
                                                let v195 = C::def_inst(ctx, v75);
                                                if let Some(v196) = v195 {
                                                    let v197 = &C::inst_data(ctx, v196);
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v342,
                                                        args: ref v343,
                                                    } = v197
                                                    {
                                                        if let &Opcode::Imul = v342 {
                                                            let v344 =
                                                                C::unpack_value_array_2(ctx, v343);
                                                            let v359 = C::def_inst(ctx, v344.0);
                                                            if let Some(v360) = v359 {
                                                                let v361 = &C::inst_data(ctx, v360);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v362,
                                                                    arg: v363,
                                                                } = v361
                                                                {
                                                                    if let &Opcode::Splat = v362 {
                                                                        let v191 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v38.1,
                                                                            );
                                                                        let v364 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v344.1,
                                                                            );
                                                                        let v365 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v363,
                                                                            );
                                                                        let v163 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v164 =
                                                                            C::vstate_from_type(
                                                                                ctx, v11,
                                                                            );
                                                                        let v366 = constructor_rv_vnmsac_vx(ctx, v191, v364, v365, v163, v164);
                                                                        let v367 =
                                                                            constructor_output_vreg(
                                                                                ctx, v366,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 295.
                                                                        return Some(v367);
                                                                    }
                                                                }
                                                            }
                                                            let v351 = C::def_inst(ctx, v344.1);
                                                            if let Some(v352) = v351 {
                                                                let v353 = &C::inst_data(ctx, v352);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v354,
                                                                    arg: v355,
                                                                } = v353
                                                                {
                                                                    if let &Opcode::Splat = v354 {
                                                                        let v191 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v38.1,
                                                                            );
                                                                        let v347 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v344.0,
                                                                            );
                                                                        let v356 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v355,
                                                                            );
                                                                        let v163 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v164 =
                                                                            C::vstate_from_type(
                                                                                ctx, v11,
                                                                            );
                                                                        let v357 = constructor_rv_vnmsac_vx(ctx, v191, v347, v356, v163, v164);
                                                                        let v358 =
                                                                            constructor_output_vreg(
                                                                                ctx, v357,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 292.
                                                                        return Some(v358);
                                                                    }
                                                                }
                                                            }
                                                            let v191 =
                                                                constructor_put_in_vreg(ctx, v38.1);
                                                            let v347 = constructor_put_in_vreg(
                                                                ctx, v344.0,
                                                            );
                                                            let v348 = constructor_put_in_vreg(
                                                                ctx, v344.1,
                                                            );
                                                            let v163 = &constructor_unmasked(ctx);
                                                            let v164 =
                                                                C::vstate_from_type(ctx, v11);
                                                            let v349 = constructor_rv_vnmsac_vv(
                                                                ctx, v191, v347, v348, v163, v164,
                                                            );
                                                            let v350 =
                                                                constructor_output_vreg(ctx, v349);
                                                            // Rule at src/isa/riscv64/lower.isle line 289.
                                                            return Some(v350);
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::SwidenLow => {
                                                let v60 = C::def_inst(ctx, v38.1);
                                                if let Some(v61) = v60 {
                                                    let v62 = &C::inst_data(ctx, v61);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v63,
                                                        arg: v64,
                                                    } = v62
                                                    {
                                                        match v63 {
                                                            &Opcode::Splat => {
                                                                let v170 = C::def_inst(ctx, v64);
                                                                if let Some(v171) = v170 {
                                                                    let v172 =
                                                                        &C::inst_data(ctx, v171);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v173,
                                                                        arg: v174,
                                                                    } = v172 {
                                                                        if let &Opcode::Sextend = v173 {
                                                                            let v76 = C::value_type(ctx, v75);
                                                                            let v228 = C::lane_type(ctx, v76);
                                                                            let v175 = C::value_type(ctx, v174);
                                                                            let v229 = C::ty_equal(ctx, v228, v175);
                                                                            if v229 == true {
                                                                                let v225 = constructor_put_in_vreg(ctx, v75);
                                                                                let v180 = constructor_put_in_xreg(ctx, v174);
                                                                                let v163 = &constructor_unmasked(ctx);
                                                                                let v219 = C::ty_half_lanes(ctx, v76);
                                                                                let v220 = v219?;
                                                                                let v221 = C::vstate_from_type(ctx, v220);
                                                                                let v222 = C::vstate_mf2(ctx, v221);
                                                                                let v230 = constructor_rv_vwadd_vx(ctx, v225, v180, v163, v222);
                                                                                let v231 = constructor_output_vreg(ctx, v230);
                                                                                // Rule at src/isa/riscv64/lower.isle line 156.
                                                                                return Some(v231);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::SwidenLow => {
                                                                let v225 = constructor_put_in_vreg(
                                                                    ctx, v75,
                                                                );
                                                                let v211 = constructor_put_in_vreg(
                                                                    ctx, v64,
                                                                );
                                                                let v163 =
                                                                    &constructor_unmasked(ctx);
                                                                let v76 = C::value_type(ctx, v75);
                                                                let v219 =
                                                                    C::ty_half_lanes(ctx, v76);
                                                                let v220 = v219?;
                                                                let v221 =
                                                                    C::vstate_from_type(ctx, v220);
                                                                let v222 = C::vstate_mf2(ctx, v221);
                                                                let v226 = constructor_rv_vwadd_vv(
                                                                    ctx, v225, v211, v163, v222,
                                                                );
                                                                let v227 = constructor_output_vreg(
                                                                    ctx, v226,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 152.
                                                                return Some(v227);
                                                            }
                                                            &Opcode::SwidenHigh => {
                                                                let v225 = constructor_put_in_vreg(
                                                                    ctx, v75,
                                                                );
                                                                let v211 = constructor_put_in_vreg(
                                                                    ctx, v64,
                                                                );
                                                                let v76 = C::value_type(ctx, v75);
                                                                let v275 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v76, v211,
                                                                    );
                                                                let v163 =
                                                                    &constructor_unmasked(ctx);
                                                                let v219 =
                                                                    C::ty_half_lanes(ctx, v76);
                                                                let v220 = v219?;
                                                                let v221 =
                                                                    C::vstate_from_type(ctx, v220);
                                                                let v222 = C::vstate_mf2(ctx, v221);
                                                                let v276 = constructor_rv_vwadd_vv(
                                                                    ctx, v225, v275, v163, v222,
                                                                );
                                                                let v277 = constructor_output_vreg(
                                                                    ctx, v276,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 236.
                                                                return Some(v277);
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v191 = constructor_put_in_vreg(ctx, v38.1);
                                                let v218 = constructor_put_in_vreg(ctx, v75);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v76 = C::value_type(ctx, v75);
                                                let v219 = C::ty_half_lanes(ctx, v76);
                                                let v220 = v219?;
                                                let v221 = C::vstate_from_type(ctx, v220);
                                                let v222 = C::vstate_mf2(ctx, v221);
                                                let v223 = constructor_rv_vwadd_wv(
                                                    ctx, v191, v218, v163, v222,
                                                );
                                                let v224 = constructor_output_vreg(ctx, v223);
                                                // Rule at src/isa/riscv64/lower.isle line 149.
                                                return Some(v224);
                                            }
                                            &Opcode::SwidenHigh => {
                                                let v60 = C::def_inst(ctx, v38.1);
                                                if let Some(v61) = v60 {
                                                    let v62 = &C::inst_data(ctx, v61);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v63,
                                                        arg: v64,
                                                    } = v62
                                                    {
                                                        match v63 {
                                                            &Opcode::Splat => {
                                                                let v170 = C::def_inst(ctx, v64);
                                                                if let Some(v171) = v170 {
                                                                    let v172 =
                                                                        &C::inst_data(ctx, v171);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v173,
                                                                        arg: v174,
                                                                    } = v172 {
                                                                        if let &Opcode::Sextend = v173 {
                                                                            let v76 = C::value_type(ctx, v75);
                                                                            let v228 = C::lane_type(ctx, v76);
                                                                            let v175 = C::value_type(ctx, v174);
                                                                            let v229 = C::ty_equal(ctx, v228, v175);
                                                                            if v229 == true {
                                                                                let v225 = constructor_put_in_vreg(ctx, v75);
                                                                                let v243 = constructor_gen_slidedown_half(ctx, v76, v225);
                                                                                let v248 = constructor_put_in_xreg(ctx, v174);
                                                                                let v163 = &constructor_unmasked(ctx);
                                                                                let v219 = C::ty_half_lanes(ctx, v76);
                                                                                let v220 = v219?;
                                                                                let v221 = C::vstate_from_type(ctx, v220);
                                                                                let v222 = C::vstate_mf2(ctx, v221);
                                                                                let v249 = constructor_rv_vwadd_vx(ctx, v243, v248, v163, v222);
                                                                                let v250 = constructor_output_vreg(ctx, v249);
                                                                                // Rule at src/isa/riscv64/lower.isle line 179.
                                                                                return Some(v250);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::SwidenLow => {
                                                                let v225 = constructor_put_in_vreg(
                                                                    ctx, v75,
                                                                );
                                                                let v76 = C::value_type(ctx, v75);
                                                                let v243 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v76, v225,
                                                                    );
                                                                let v244 = constructor_put_in_vreg(
                                                                    ctx, v64,
                                                                );
                                                                let v163 =
                                                                    &constructor_unmasked(ctx);
                                                                let v219 =
                                                                    C::ty_half_lanes(ctx, v76);
                                                                let v220 = v219?;
                                                                let v221 =
                                                                    C::vstate_from_type(ctx, v220);
                                                                let v222 = C::vstate_mf2(ctx, v221);
                                                                let v278 = constructor_rv_vwadd_vv(
                                                                    ctx, v243, v244, v163, v222,
                                                                );
                                                                let v279 = constructor_output_vreg(
                                                                    ctx, v278,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 240.
                                                                return Some(v279);
                                                            }
                                                            &Opcode::SwidenHigh => {
                                                                let v225 = constructor_put_in_vreg(
                                                                    ctx, v75,
                                                                );
                                                                let v76 = C::value_type(ctx, v75);
                                                                let v243 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v76, v225,
                                                                    );
                                                                let v244 = constructor_put_in_vreg(
                                                                    ctx, v64,
                                                                );
                                                                let v245 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v76, v244,
                                                                    );
                                                                let v163 =
                                                                    &constructor_unmasked(ctx);
                                                                let v219 =
                                                                    C::ty_half_lanes(ctx, v76);
                                                                let v220 = v219?;
                                                                let v221 =
                                                                    C::vstate_from_type(ctx, v220);
                                                                let v222 = C::vstate_mf2(ctx, v221);
                                                                let v246 = constructor_rv_vwadd_vv(
                                                                    ctx, v243, v245, v163, v222,
                                                                );
                                                                let v247 = constructor_output_vreg(
                                                                    ctx, v246,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 175.
                                                                return Some(v247);
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v191 = constructor_put_in_vreg(ctx, v38.1);
                                                let v218 = constructor_put_in_vreg(ctx, v75);
                                                let v76 = C::value_type(ctx, v75);
                                                let v240 =
                                                    constructor_gen_slidedown_half(ctx, v76, v218);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v219 = C::ty_half_lanes(ctx, v76);
                                                let v220 = v219?;
                                                let v221 = C::vstate_from_type(ctx, v220);
                                                let v222 = C::vstate_mf2(ctx, v221);
                                                let v241 = constructor_rv_vwadd_wv(
                                                    ctx, v191, v240, v163, v222,
                                                );
                                                let v242 = constructor_output_vreg(ctx, v241);
                                                // Rule at src/isa/riscv64/lower.isle line 172.
                                                return Some(v242);
                                            }
                                            &Opcode::UwidenLow => {
                                                let v60 = C::def_inst(ctx, v38.1);
                                                if let Some(v61) = v60 {
                                                    let v62 = &C::inst_data(ctx, v61);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v63,
                                                        arg: v64,
                                                    } = v62
                                                    {
                                                        match v63 {
                                                            &Opcode::Splat => {
                                                                let v170 = C::def_inst(ctx, v64);
                                                                if let Some(v171) = v170 {
                                                                    let v172 =
                                                                        &C::inst_data(ctx, v171);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v173,
                                                                        arg: v174,
                                                                    } = v172 {
                                                                        if let &Opcode::Uextend = v173 {
                                                                            let v76 = C::value_type(ctx, v75);
                                                                            let v228 = C::lane_type(ctx, v76);
                                                                            let v175 = C::value_type(ctx, v174);
                                                                            let v229 = C::ty_equal(ctx, v228, v175);
                                                                            if v229 == true {
                                                                                let v225 = constructor_put_in_vreg(ctx, v75);
                                                                                let v180 = constructor_put_in_xreg(ctx, v174);
                                                                                let v163 = &constructor_unmasked(ctx);
                                                                                let v219 = C::ty_half_lanes(ctx, v76);
                                                                                let v220 = v219?;
                                                                                let v221 = C::vstate_from_type(ctx, v220);
                                                                                let v222 = C::vstate_mf2(ctx, v221);
                                                                                let v261 = constructor_rv_vwaddu_vx(ctx, v225, v180, v163, v222);
                                                                                let v262 = constructor_output_vreg(ctx, v261);
                                                                                // Rule at src/isa/riscv64/lower.isle line 201.
                                                                                return Some(v262);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::UwidenLow => {
                                                                let v225 = constructor_put_in_vreg(
                                                                    ctx, v75,
                                                                );
                                                                let v211 = constructor_put_in_vreg(
                                                                    ctx, v64,
                                                                );
                                                                let v163 =
                                                                    &constructor_unmasked(ctx);
                                                                let v76 = C::value_type(ctx, v75);
                                                                let v219 =
                                                                    C::ty_half_lanes(ctx, v76);
                                                                let v220 = v219?;
                                                                let v221 =
                                                                    C::vstate_from_type(ctx, v220);
                                                                let v222 = C::vstate_mf2(ctx, v221);
                                                                let v259 = constructor_rv_vwaddu_vv(
                                                                    ctx, v225, v211, v163, v222,
                                                                );
                                                                let v260 = constructor_output_vreg(
                                                                    ctx, v259,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 197.
                                                                return Some(v260);
                                                            }
                                                            &Opcode::UwidenHigh => {
                                                                let v225 = constructor_put_in_vreg(
                                                                    ctx, v75,
                                                                );
                                                                let v211 = constructor_put_in_vreg(
                                                                    ctx, v64,
                                                                );
                                                                let v76 = C::value_type(ctx, v75);
                                                                let v275 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v76, v211,
                                                                    );
                                                                let v163 =
                                                                    &constructor_unmasked(ctx);
                                                                let v219 =
                                                                    C::ty_half_lanes(ctx, v76);
                                                                let v220 = v219?;
                                                                let v221 =
                                                                    C::vstate_from_type(ctx, v220);
                                                                let v222 = C::vstate_mf2(ctx, v221);
                                                                let v280 = constructor_rv_vwaddu_vv(
                                                                    ctx, v225, v275, v163, v222,
                                                                );
                                                                let v281 = constructor_output_vreg(
                                                                    ctx, v280,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 246.
                                                                return Some(v281);
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v191 = constructor_put_in_vreg(ctx, v38.1);
                                                let v218 = constructor_put_in_vreg(ctx, v75);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v76 = C::value_type(ctx, v75);
                                                let v219 = C::ty_half_lanes(ctx, v76);
                                                let v220 = v219?;
                                                let v221 = C::vstate_from_type(ctx, v220);
                                                let v222 = C::vstate_mf2(ctx, v221);
                                                let v257 = constructor_rv_vwaddu_wv(
                                                    ctx, v191, v218, v163, v222,
                                                );
                                                let v258 = constructor_output_vreg(ctx, v257);
                                                // Rule at src/isa/riscv64/lower.isle line 194.
                                                return Some(v258);
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v60 = C::def_inst(ctx, v38.1);
                                                if let Some(v61) = v60 {
                                                    let v62 = &C::inst_data(ctx, v61);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v63,
                                                        arg: v64,
                                                    } = v62
                                                    {
                                                        match v63 {
                                                            &Opcode::Splat => {
                                                                let v170 = C::def_inst(ctx, v64);
                                                                if let Some(v171) = v170 {
                                                                    let v172 =
                                                                        &C::inst_data(ctx, v171);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v173,
                                                                        arg: v174,
                                                                    } = v172 {
                                                                        if let &Opcode::Uextend = v173 {
                                                                            let v76 = C::value_type(ctx, v75);
                                                                            let v228 = C::lane_type(ctx, v76);
                                                                            let v175 = C::value_type(ctx, v174);
                                                                            let v229 = C::ty_equal(ctx, v228, v175);
                                                                            if v229 == true {
                                                                                let v225 = constructor_put_in_vreg(ctx, v75);
                                                                                let v243 = constructor_gen_slidedown_half(ctx, v76, v225);
                                                                                let v248 = constructor_put_in_xreg(ctx, v174);
                                                                                let v163 = &constructor_unmasked(ctx);
                                                                                let v219 = C::ty_half_lanes(ctx, v76);
                                                                                let v220 = v219?;
                                                                                let v221 = C::vstate_from_type(ctx, v220);
                                                                                let v222 = C::vstate_mf2(ctx, v221);
                                                                                let v271 = constructor_rv_vwaddu_vx(ctx, v243, v248, v163, v222);
                                                                                let v272 = constructor_output_vreg(ctx, v271);
                                                                                // Rule at src/isa/riscv64/lower.isle line 224.
                                                                                return Some(v272);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::UwidenLow => {
                                                                let v225 = constructor_put_in_vreg(
                                                                    ctx, v75,
                                                                );
                                                                let v76 = C::value_type(ctx, v75);
                                                                let v243 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v76, v225,
                                                                    );
                                                                let v244 = constructor_put_in_vreg(
                                                                    ctx, v64,
                                                                );
                                                                let v163 =
                                                                    &constructor_unmasked(ctx);
                                                                let v219 =
                                                                    C::ty_half_lanes(ctx, v76);
                                                                let v220 = v219?;
                                                                let v221 =
                                                                    C::vstate_from_type(ctx, v220);
                                                                let v222 = C::vstate_mf2(ctx, v221);
                                                                let v282 = constructor_rv_vwaddu_vv(
                                                                    ctx, v243, v244, v163, v222,
                                                                );
                                                                let v283 = constructor_output_vreg(
                                                                    ctx, v282,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 250.
                                                                return Some(v283);
                                                            }
                                                            &Opcode::UwidenHigh => {
                                                                let v225 = constructor_put_in_vreg(
                                                                    ctx, v75,
                                                                );
                                                                let v76 = C::value_type(ctx, v75);
                                                                let v243 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v76, v225,
                                                                    );
                                                                let v244 = constructor_put_in_vreg(
                                                                    ctx, v64,
                                                                );
                                                                let v245 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v76, v244,
                                                                    );
                                                                let v163 =
                                                                    &constructor_unmasked(ctx);
                                                                let v219 =
                                                                    C::ty_half_lanes(ctx, v76);
                                                                let v220 = v219?;
                                                                let v221 =
                                                                    C::vstate_from_type(ctx, v220);
                                                                let v222 = C::vstate_mf2(ctx, v221);
                                                                let v269 = constructor_rv_vwaddu_vv(
                                                                    ctx, v243, v245, v163, v222,
                                                                );
                                                                let v270 = constructor_output_vreg(
                                                                    ctx, v269,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 220.
                                                                return Some(v270);
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v191 = constructor_put_in_vreg(ctx, v38.1);
                                                let v218 = constructor_put_in_vreg(ctx, v75);
                                                let v76 = C::value_type(ctx, v75);
                                                let v240 =
                                                    constructor_gen_slidedown_half(ctx, v76, v218);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v219 = C::ty_half_lanes(ctx, v76);
                                                let v220 = v219?;
                                                let v221 = C::vstate_from_type(ctx, v220);
                                                let v222 = C::vstate_mf2(ctx, v221);
                                                let v267 = constructor_rv_vwaddu_wv(
                                                    ctx, v191, v240, v163, v222,
                                                );
                                                let v268 = constructor_output_vreg(ctx, v267);
                                                // Rule at src/isa/riscv64/lower.isle line 217.
                                                return Some(v268);
                                            }
                                            _ => {}
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                match v62 {
                                    &InstructionData::Binary {
                                        opcode: ref v80,
                                        args: ref v81,
                                    } => {
                                        if let &Opcode::Imul = v80 {
                                            let v82 = C::unpack_value_array_2(ctx, v81);
                                            let v114 = C::def_inst(ctx, v82.0);
                                            if let Some(v115) = v114 {
                                                let v116 = &C::inst_data(ctx, v115);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v117,
                                                    arg: v118,
                                                } = v116
                                                {
                                                    if let &Opcode::Splat = v117 {
                                                        let v161 =
                                                            constructor_put_in_vreg(ctx, v38.0);
                                                        let v296 =
                                                            constructor_put_in_vreg(ctx, v82.1);
                                                        let v297 =
                                                            constructor_put_in_xreg(ctx, v118);
                                                        let v163 = &constructor_unmasked(ctx);
                                                        let v164 = C::vstate_from_type(ctx, v11);
                                                        let v298 = constructor_rv_vmacc_vx(
                                                            ctx, v161, v296, v297, v163, v164,
                                                        );
                                                        let v299 =
                                                            constructor_output_vreg(ctx, v298);
                                                        // Rule at src/isa/riscv64/lower.isle line 266.
                                                        return Some(v299);
                                                    }
                                                }
                                            }
                                            let v288 = C::def_inst(ctx, v82.1);
                                            if let Some(v289) = v288 {
                                                let v290 = &C::inst_data(ctx, v289);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v291,
                                                    arg: v292,
                                                } = v290
                                                {
                                                    if let &Opcode::Splat = v291 {
                                                        let v161 =
                                                            constructor_put_in_vreg(ctx, v38.0);
                                                        let v284 =
                                                            constructor_put_in_vreg(ctx, v82.0);
                                                        let v293 =
                                                            constructor_put_in_xreg(ctx, v292);
                                                        let v163 = &constructor_unmasked(ctx);
                                                        let v164 = C::vstate_from_type(ctx, v11);
                                                        let v294 = constructor_rv_vmacc_vx(
                                                            ctx, v161, v284, v293, v163, v164,
                                                        );
                                                        let v295 =
                                                            constructor_output_vreg(ctx, v294);
                                                        // Rule at src/isa/riscv64/lower.isle line 263.
                                                        return Some(v295);
                                                    }
                                                }
                                            }
                                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                                            let v284 = constructor_put_in_vreg(ctx, v82.0);
                                            let v285 = constructor_put_in_vreg(ctx, v82.1);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v164 = C::vstate_from_type(ctx, v11);
                                            let v286 = constructor_rv_vmacc_vv(
                                                ctx, v161, v284, v285, v163, v164,
                                            );
                                            let v287 = constructor_output_vreg(ctx, v286);
                                            // Rule at src/isa/riscv64/lower.isle line 260.
                                            return Some(v287);
                                        }
                                    }
                                    &InstructionData::Unary {
                                        opcode: ref v63,
                                        arg: v64,
                                    } => {
                                        match v63 {
                                            &Opcode::Splat => {
                                                let v170 = C::def_inst(ctx, v64);
                                                if let Some(v171) = v170 {
                                                    let v172 = &C::inst_data(ctx, v171);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v173,
                                                        arg: v174,
                                                    } = v172
                                                    {
                                                        match v173 {
                                                            &Opcode::Uextend => {
                                                                let v176 =
                                                                    C::ty_half_width(ctx, v11);
                                                                if let Some(v177) = v176 {
                                                                    let v178 =
                                                                        C::lane_type(ctx, v177);
                                                                    let v175 =
                                                                        C::value_type(ctx, v174);
                                                                    let v179 = C::ty_equal(
                                                                        ctx, v178, v175,
                                                                    );
                                                                    if v179 == true {
                                                                        let v161 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v38.0,
                                                                            );
                                                                        let v180 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v174,
                                                                            );
                                                                        let v163 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v181 =
                                                                            C::vstate_from_type(
                                                                                ctx, v177,
                                                                            );
                                                                        let v182 = C::vstate_mf2(
                                                                            ctx, v181,
                                                                        );
                                                                        let v185 = constructor_rv_vwaddu_wx(ctx, v161, v180, v163, v182);
                                                                        let v186 =
                                                                            constructor_output_vreg(
                                                                                ctx, v185,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 117.
                                                                        return Some(v186);
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::Sextend => {
                                                                let v176 =
                                                                    C::ty_half_width(ctx, v11);
                                                                if let Some(v177) = v176 {
                                                                    let v178 =
                                                                        C::lane_type(ctx, v177);
                                                                    let v175 =
                                                                        C::value_type(ctx, v174);
                                                                    let v179 = C::ty_equal(
                                                                        ctx, v178, v175,
                                                                    );
                                                                    if v179 == true {
                                                                        let v161 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v38.0,
                                                                            );
                                                                        let v180 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v174,
                                                                            );
                                                                        let v163 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v181 =
                                                                            C::vstate_from_type(
                                                                                ctx, v177,
                                                                            );
                                                                        let v182 = C::vstate_mf2(
                                                                            ctx, v181,
                                                                        );
                                                                        let v183 =
                                                                            constructor_rv_vwadd_wx(
                                                                                ctx, v161, v180,
                                                                                v163, v182,
                                                                            );
                                                                        let v184 =
                                                                            constructor_output_vreg(
                                                                                ctx, v183,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 112.
                                                                        return Some(v184);
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v161 = constructor_put_in_vreg(ctx, v38.0);
                                                let v167 = constructor_put_in_xreg(ctx, v64);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v164 = C::vstate_from_type(ctx, v11);
                                                let v168 = constructor_rv_vadd_vx(
                                                    ctx, v161, v167, v163, v164,
                                                );
                                                let v169 = constructor_output_vreg(ctx, v168);
                                                // Rule at src/isa/riscv64/lower.isle line 109.
                                                return Some(v169);
                                            }
                                            &Opcode::Ineg => {
                                                let v170 = C::def_inst(ctx, v64);
                                                if let Some(v171) = v170 {
                                                    let v172 = &C::inst_data(ctx, v171);
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v316,
                                                        args: ref v317,
                                                    } = v172
                                                    {
                                                        if let &Opcode::Imul = v316 {
                                                            let v318 =
                                                                C::unpack_value_array_2(ctx, v317);
                                                            let v333 = C::def_inst(ctx, v318.0);
                                                            if let Some(v334) = v333 {
                                                                let v335 = &C::inst_data(ctx, v334);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v336,
                                                                    arg: v337,
                                                                } = v335
                                                                {
                                                                    if let &Opcode::Splat = v336 {
                                                                        let v161 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v38.0,
                                                                            );
                                                                        let v338 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v318.1,
                                                                            );
                                                                        let v339 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v337,
                                                                            );
                                                                        let v163 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v164 =
                                                                            C::vstate_from_type(
                                                                                ctx, v11,
                                                                            );
                                                                        let v340 = constructor_rv_vnmsac_vx(ctx, v161, v338, v339, v163, v164);
                                                                        let v341 =
                                                                            constructor_output_vreg(
                                                                                ctx, v340,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 286.
                                                                        return Some(v341);
                                                                    }
                                                                }
                                                            }
                                                            let v325 = C::def_inst(ctx, v318.1);
                                                            if let Some(v326) = v325 {
                                                                let v327 = &C::inst_data(ctx, v326);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v328,
                                                                    arg: v329,
                                                                } = v327
                                                                {
                                                                    if let &Opcode::Splat = v328 {
                                                                        let v161 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v38.0,
                                                                            );
                                                                        let v321 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v318.0,
                                                                            );
                                                                        let v330 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v329,
                                                                            );
                                                                        let v163 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v164 =
                                                                            C::vstate_from_type(
                                                                                ctx, v11,
                                                                            );
                                                                        let v331 = constructor_rv_vnmsac_vx(ctx, v161, v321, v330, v163, v164);
                                                                        let v332 =
                                                                            constructor_output_vreg(
                                                                                ctx, v331,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 283.
                                                                        return Some(v332);
                                                                    }
                                                                }
                                                            }
                                                            let v161 =
                                                                constructor_put_in_vreg(ctx, v38.0);
                                                            let v321 = constructor_put_in_vreg(
                                                                ctx, v318.0,
                                                            );
                                                            let v322 = constructor_put_in_vreg(
                                                                ctx, v318.1,
                                                            );
                                                            let v163 = &constructor_unmasked(ctx);
                                                            let v164 =
                                                                C::vstate_from_type(ctx, v11);
                                                            let v323 = constructor_rv_vnmsac_vv(
                                                                ctx, v161, v321, v322, v163, v164,
                                                            );
                                                            let v324 =
                                                                constructor_output_vreg(ctx, v323);
                                                            // Rule at src/isa/riscv64/lower.isle line 280.
                                                            return Some(v324);
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::SwidenLow => {
                                                let v161 = constructor_put_in_vreg(ctx, v38.0);
                                                let v211 = constructor_put_in_vreg(ctx, v64);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v65 = C::value_type(ctx, v64);
                                                let v212 = C::ty_half_lanes(ctx, v65);
                                                let v213 = v212?;
                                                let v214 = C::vstate_from_type(ctx, v213);
                                                let v215 = C::vstate_mf2(ctx, v214);
                                                let v216 = constructor_rv_vwadd_wv(
                                                    ctx, v161, v211, v163, v215,
                                                );
                                                let v217 = constructor_output_vreg(ctx, v216);
                                                // Rule at src/isa/riscv64/lower.isle line 146.
                                                return Some(v217);
                                            }
                                            &Opcode::SwidenHigh => {
                                                let v161 = constructor_put_in_vreg(ctx, v38.0);
                                                let v211 = constructor_put_in_vreg(ctx, v64);
                                                let v65 = C::value_type(ctx, v64);
                                                let v237 =
                                                    constructor_gen_slidedown_half(ctx, v65, v211);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v212 = C::ty_half_lanes(ctx, v65);
                                                let v213 = v212?;
                                                let v214 = C::vstate_from_type(ctx, v213);
                                                let v215 = C::vstate_mf2(ctx, v214);
                                                let v238 = constructor_rv_vwadd_wv(
                                                    ctx, v161, v237, v163, v215,
                                                );
                                                let v239 = constructor_output_vreg(ctx, v238);
                                                // Rule at src/isa/riscv64/lower.isle line 169.
                                                return Some(v239);
                                            }
                                            &Opcode::UwidenLow => {
                                                let v161 = constructor_put_in_vreg(ctx, v38.0);
                                                let v211 = constructor_put_in_vreg(ctx, v64);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v65 = C::value_type(ctx, v64);
                                                let v212 = C::ty_half_lanes(ctx, v65);
                                                let v213 = v212?;
                                                let v214 = C::vstate_from_type(ctx, v213);
                                                let v215 = C::vstate_mf2(ctx, v214);
                                                let v255 = constructor_rv_vwaddu_wv(
                                                    ctx, v161, v211, v163, v215,
                                                );
                                                let v256 = constructor_output_vreg(ctx, v255);
                                                // Rule at src/isa/riscv64/lower.isle line 191.
                                                return Some(v256);
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v161 = constructor_put_in_vreg(ctx, v38.0);
                                                let v211 = constructor_put_in_vreg(ctx, v64);
                                                let v65 = C::value_type(ctx, v64);
                                                let v237 =
                                                    constructor_gen_slidedown_half(ctx, v65, v211);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v212 = C::ty_half_lanes(ctx, v65);
                                                let v213 = v212?;
                                                let v214 = C::vstate_from_type(ctx, v213);
                                                let v215 = C::vstate_mf2(ctx, v214);
                                                let v265 = constructor_rv_vwaddu_wv(
                                                    ctx, v161, v237, v163, v215,
                                                );
                                                let v266 = constructor_output_vreg(ctx, v265);
                                                // Rule at src/isa/riscv64/lower.isle line 214.
                                                return Some(v266);
                                            }
                                            _ => {}
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v165 = constructor_rv_vadd_vv(ctx, v161, v162, v163, v164);
                            let v166 = constructor_output_vreg(ctx, v165);
                            // Rule at src/isa/riscv64/lower.isle line 106.
                            return Some(v166);
                        }
                        match v3 {
                            I64 => {
                                let v66 = C::has_zba(ctx);
                                if v66 == true {
                                    let v38 = C::unpack_value_array_2(ctx, v37);
                                    let v71 = C::def_inst(ctx, v38.0);
                                    if let Some(v72) = v71 {
                                        let v73 = &C::inst_data(ctx, v72);
                                        if let &InstructionData::Binary {
                                            opcode: ref v97,
                                            args: ref v98,
                                        } = v73
                                        {
                                            if let &Opcode::Ishl = v97 {
                                                let v99 = C::unpack_value_array_2(ctx, v98);
                                                let v102 = C::maybe_uextend(ctx, v99.1);
                                                if let Some(v103) = v102 {
                                                    let v104 = C::def_inst(ctx, v103);
                                                    if let Some(v105) = v104 {
                                                        let v106 = &C::inst_data(ctx, v105);
                                                        if let &InstructionData::UnaryImm {
                                                            opcode: ref v107,
                                                            imm: v108,
                                                        } = v106
                                                        {
                                                            if let &Opcode::Iconst = v107 {
                                                                let v125 = C::def_inst(ctx, v99.0);
                                                                if let Some(v126) = v125 {
                                                                    let v127 =
                                                                        &C::inst_data(ctx, v126);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v128,
                                                                        arg: v129,
                                                                    } = v127 {
                                                                        if let &Opcode::Uextend = v128 {
                                                                            let v130 = C::value_type(ctx, v129);
                                                                            if v130 == I32 {
                                                                                let v131 = &constructor_match_shnadd_uw(ctx, v108);
                                                                                if let Some(v132) = v131 {
                                                                                    let v133 = C::put_in_reg(ctx, v129);
                                                                                    let v57 = C::put_in_reg(ctx, v38.1);
                                                                                    let v134 = constructor_alu_rrr(ctx, v132, v133, v57);
                                                                                    let v135 = constructor_output_reg(ctx, v134);
                                                                                    // Rule at src/isa/riscv64/lower.isle line 89.
                                                                                    return Some(v135);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    let v60 = C::def_inst(ctx, v38.1);
                                    if let Some(v61) = v60 {
                                        let v62 = &C::inst_data(ctx, v61);
                                        if let &InstructionData::Binary {
                                            opcode: ref v80,
                                            args: ref v81,
                                        } = v62
                                        {
                                            if let &Opcode::Ishl = v80 {
                                                let v82 = C::unpack_value_array_2(ctx, v81);
                                                let v85 = C::maybe_uextend(ctx, v82.1);
                                                if let Some(v86) = v85 {
                                                    let v87 = C::def_inst(ctx, v86);
                                                    if let Some(v88) = v87 {
                                                        let v89 = &C::inst_data(ctx, v88);
                                                        if let &InstructionData::UnaryImm {
                                                            opcode: ref v90,
                                                            imm: v91,
                                                        } = v89
                                                        {
                                                            if let &Opcode::Iconst = v90 {
                                                                let v114 = C::def_inst(ctx, v82.0);
                                                                if let Some(v115) = v114 {
                                                                    let v116 =
                                                                        &C::inst_data(ctx, v115);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v117,
                                                                        arg: v118,
                                                                    } = v116 {
                                                                        if let &Opcode::Uextend = v117 {
                                                                            let v119 = C::value_type(ctx, v118);
                                                                            if v119 == I32 {
                                                                                let v120 = &constructor_match_shnadd_uw(ctx, v91);
                                                                                if let Some(v121) = v120 {
                                                                                    let v122 = C::put_in_reg(ctx, v118);
                                                                                    let v50 = C::put_in_reg(ctx, v38.0);
                                                                                    let v123 = constructor_alu_rrr(ctx, v121, v122, v50);
                                                                                    let v124 = constructor_output_reg(ctx, v123);
                                                                                    // Rule at src/isa/riscv64/lower.isle line 84.
                                                                                    return Some(v124);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if let Some(v72) = v71 {
                                        let v73 = &C::inst_data(ctx, v72);
                                        match v73 {
                                            &InstructionData::Binary {
                                                opcode: ref v97,
                                                args: ref v98,
                                            } => {
                                                if let &Opcode::Ishl = v97 {
                                                    let v99 = C::unpack_value_array_2(ctx, v98);
                                                    let v102 = C::maybe_uextend(ctx, v99.1);
                                                    if let Some(v103) = v102 {
                                                        let v104 = C::def_inst(ctx, v103);
                                                        if let Some(v105) = v104 {
                                                            let v106 = &C::inst_data(ctx, v105);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v107,
                                                                imm: v108,
                                                            } = v106
                                                            {
                                                                if let &Opcode::Iconst = v107 {
                                                                    let v109 =
                                                                        &constructor_match_shnadd(
                                                                            ctx, v108,
                                                                        );
                                                                    if let Some(v110) = v109 {
                                                                        let v111 = C::put_in_reg(
                                                                            ctx, v99.0,
                                                                        );
                                                                        let v57 = C::put_in_reg(
                                                                            ctx, v38.1,
                                                                        );
                                                                        let v112 =
                                                                            constructor_alu_rrr(
                                                                                ctx, v110, v111,
                                                                                v57,
                                                                            );
                                                                        let v113 =
                                                                            constructor_output_reg(
                                                                                ctx, v112,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 67.
                                                                        return Some(v113);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &InstructionData::Unary {
                                                opcode: ref v74,
                                                arg: v75,
                                            } => {
                                                if let &Opcode::Uextend = v74 {
                                                    let v76 = C::value_type(ctx, v75);
                                                    if v76 == I32 {
                                                        let v77 = constructor_put_in_xreg(ctx, v75);
                                                        let v42 =
                                                            constructor_put_in_xreg(ctx, v38.1);
                                                        let v78 =
                                                            constructor_rv_adduw(ctx, v77, v42);
                                                        let v79 = constructor_output_xreg(ctx, v78);
                                                        // Rule at src/isa/riscv64/lower.isle line 52.
                                                        return Some(v79);
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                    if let Some(v61) = v60 {
                                        let v62 = &C::inst_data(ctx, v61);
                                        match v62 {
                                            &InstructionData::Binary {
                                                opcode: ref v80,
                                                args: ref v81,
                                            } => {
                                                if let &Opcode::Ishl = v80 {
                                                    let v82 = C::unpack_value_array_2(ctx, v81);
                                                    let v85 = C::maybe_uextend(ctx, v82.1);
                                                    if let Some(v86) = v85 {
                                                        let v87 = C::def_inst(ctx, v86);
                                                        if let Some(v88) = v87 {
                                                            let v89 = &C::inst_data(ctx, v88);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v90,
                                                                imm: v91,
                                                            } = v89
                                                            {
                                                                if let &Opcode::Iconst = v90 {
                                                                    let v92 =
                                                                        &constructor_match_shnadd(
                                                                            ctx, v91,
                                                                        );
                                                                    if let Some(v93) = v92 {
                                                                        let v94 = C::put_in_reg(
                                                                            ctx, v82.0,
                                                                        );
                                                                        let v50 = C::put_in_reg(
                                                                            ctx, v38.0,
                                                                        );
                                                                        let v95 =
                                                                            constructor_alu_rrr(
                                                                                ctx, v93, v94, v50,
                                                                            );
                                                                        let v96 =
                                                                            constructor_output_reg(
                                                                                ctx, v95,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 62.
                                                                        return Some(v96);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &InstructionData::Unary {
                                                opcode: ref v63,
                                                arg: v64,
                                            } => {
                                                if let &Opcode::Uextend = v63 {
                                                    let v65 = C::value_type(ctx, v64);
                                                    if v65 == I32 {
                                                        let v67 = constructor_put_in_xreg(ctx, v64);
                                                        let v68 =
                                                            constructor_put_in_xreg(ctx, v38.0);
                                                        let v69 =
                                                            constructor_rv_adduw(ctx, v67, v68);
                                                        let v70 = constructor_output_xreg(ctx, v69);
                                                        // Rule at src/isa/riscv64/lower.isle line 48.
                                                        return Some(v70);
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v136 = C::put_in_regs(ctx, v38.0);
                                let v138 = C::value_regs_get(ctx, v136, 0x0);
                                let v139 = C::xreg_new(ctx, v138);
                                let v140 = C::put_in_regs(ctx, v38.1);
                                let v141 = C::value_regs_get(ctx, v140, 0x0);
                                let v142 = C::xreg_new(ctx, v141);
                                let v143 = constructor_rv_add(ctx, v139, v142);
                                let v144 = C::put_in_regs(ctx, v38.1);
                                let v145 = C::value_regs_get(ctx, v144, 0x0);
                                let v146 = C::xreg_new(ctx, v145);
                                let v147 = constructor_rv_sltu(ctx, v143, v146);
                                let v148 = C::put_in_regs(ctx, v38.0);
                                let v150 = C::value_regs_get(ctx, v148, 0x1);
                                let v151 = C::xreg_new(ctx, v150);
                                let v152 = C::put_in_regs(ctx, v38.1);
                                let v153 = C::value_regs_get(ctx, v152, 0x1);
                                let v154 = C::xreg_new(ctx, v153);
                                let v155 = constructor_rv_add(ctx, v151, v154);
                                let v156 = constructor_rv_add(ctx, v155, v147);
                                let v157 = C::xreg_to_reg(ctx, v143);
                                let v158 = C::xreg_to_reg(ctx, v156);
                                let v159 = C::value_regs(ctx, v157, v158);
                                let v160 = C::output(ctx, v159);
                                // Rule at src/isa/riscv64/lower.isle line 95.
                                return Some(v160);
                            }
                            _ => {}
                        }
                        let v34 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v35) = v34 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v53 = C::i64_from_iconst(ctx, v38.0);
                            if let Some(v54) = v53 {
                                let v55 = C::imm12_from_i64(ctx, v54);
                                if let Some(v56) = v55 {
                                    let v49 = &constructor_select_addi(ctx, v35);
                                    let v57 = C::put_in_reg(ctx, v38.1);
                                    let v58 = constructor_alu_rr_imm12(ctx, v49, v57, v56);
                                    let v59 = constructor_output_reg(ctx, v58);
                                    // Rule at src/isa/riscv64/lower.isle line 43.
                                    return Some(v59);
                                }
                            }
                            let v45 = C::i64_from_iconst(ctx, v38.1);
                            if let Some(v46) = v45 {
                                let v47 = C::imm12_from_i64(ctx, v46);
                                if let Some(v48) = v47 {
                                    let v49 = &constructor_select_addi(ctx, v35);
                                    let v50 = C::put_in_reg(ctx, v38.0);
                                    let v51 = constructor_alu_rr_imm12(ctx, v49, v50, v48);
                                    let v52 = constructor_output_reg(ctx, v51);
                                    // Rule at src/isa/riscv64/lower.isle line 40.
                                    return Some(v52);
                                }
                            }
                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                            let v42 = constructor_put_in_xreg(ctx, v38.1);
                            let v43 = constructor_rv_add(ctx, v41, v42);
                            let v44 = constructor_output_xreg(ctx, v43);
                            // Rule at src/isa/riscv64/lower.isle line 36.
                            return Some(v44);
                        }
                    }
                }
                &Opcode::Isub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    match v63 {
                                        &Opcode::Splat => {
                                            let v71 = C::def_inst(ctx, v38.0);
                                            if let Some(v72) = v71 {
                                                let v73 = &C::inst_data(ctx, v72);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v74,
                                                    arg: v75,
                                                } = v73
                                                {
                                                    match v74 {
                                                        &Opcode::SwidenLow => {
                                                            let v170 = C::def_inst(ctx, v64);
                                                            if let Some(v171) = v170 {
                                                                let v172 = &C::inst_data(ctx, v171);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v173,
                                                                    arg: v174,
                                                                } = v172
                                                                {
                                                                    if let &Opcode::Sextend = v173 {
                                                                        let v76 =
                                                                            C::value_type(ctx, v75);
                                                                        let v228 =
                                                                            C::lane_type(ctx, v76);
                                                                        let v175 = C::value_type(
                                                                            ctx, v174,
                                                                        );
                                                                        let v229 = C::ty_equal(
                                                                            ctx, v228, v175,
                                                                        );
                                                                        if v229 == true {
                                                                            let v225 = constructor_put_in_vreg(ctx, v75);
                                                                            let v180 = constructor_put_in_xreg(ctx, v174);
                                                                            let v163 = &constructor_unmasked(ctx);
                                                                            let v219 =
                                                                                C::ty_half_lanes(
                                                                                    ctx, v76,
                                                                                );
                                                                            let v220 = v219?;
                                                                            let v221 =
                                                                                C::vstate_from_type(
                                                                                    ctx, v220,
                                                                                );
                                                                            let v222 =
                                                                                C::vstate_mf2(
                                                                                    ctx, v221,
                                                                                );
                                                                            let v417 = constructor_rv_vwsub_vx(ctx, v225, v180, v163, v222);
                                                                            let v418 = constructor_output_vreg(ctx, v417);
                                                                            // Rule at src/isa/riscv64/lower.isle line 358.
                                                                            return Some(v418);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::SwidenHigh => {
                                                            let v170 = C::def_inst(ctx, v64);
                                                            if let Some(v171) = v170 {
                                                                let v172 = &C::inst_data(ctx, v171);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v173,
                                                                    arg: v174,
                                                                } = v172
                                                                {
                                                                    if let &Opcode::Sextend = v173 {
                                                                        let v76 =
                                                                            C::value_type(ctx, v75);
                                                                        let v228 =
                                                                            C::lane_type(ctx, v76);
                                                                        let v175 = C::value_type(
                                                                            ctx, v174,
                                                                        );
                                                                        let v229 = C::ty_equal(
                                                                            ctx, v228, v175,
                                                                        );
                                                                        if v229 == true {
                                                                            let v225 = constructor_put_in_vreg(ctx, v75);
                                                                            let v243 = constructor_gen_slidedown_half(ctx, v76, v225);
                                                                            let v248 = constructor_put_in_xreg(ctx, v174);
                                                                            let v163 = &constructor_unmasked(ctx);
                                                                            let v219 =
                                                                                C::ty_half_lanes(
                                                                                    ctx, v76,
                                                                                );
                                                                            let v220 = v219?;
                                                                            let v221 =
                                                                                C::vstate_from_type(
                                                                                    ctx, v220,
                                                                                );
                                                                            let v222 =
                                                                                C::vstate_mf2(
                                                                                    ctx, v221,
                                                                                );
                                                                            let v423 = constructor_rv_vwsub_vx(ctx, v243, v248, v163, v222);
                                                                            let v424 = constructor_output_vreg(ctx, v423);
                                                                            // Rule at src/isa/riscv64/lower.isle line 373.
                                                                            return Some(v424);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::UwidenLow => {
                                                            let v170 = C::def_inst(ctx, v64);
                                                            if let Some(v171) = v170 {
                                                                let v172 = &C::inst_data(ctx, v171);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v173,
                                                                    arg: v174,
                                                                } = v172
                                                                {
                                                                    if let &Opcode::Uextend = v173 {
                                                                        let v76 =
                                                                            C::value_type(ctx, v75);
                                                                        let v228 =
                                                                            C::lane_type(ctx, v76);
                                                                        let v175 = C::value_type(
                                                                            ctx, v174,
                                                                        );
                                                                        let v229 = C::ty_equal(
                                                                            ctx, v228, v175,
                                                                        );
                                                                        if v229 == true {
                                                                            let v225 = constructor_put_in_vreg(ctx, v75);
                                                                            let v180 = constructor_put_in_xreg(ctx, v174);
                                                                            let v163 = &constructor_unmasked(ctx);
                                                                            let v219 =
                                                                                C::ty_half_lanes(
                                                                                    ctx, v76,
                                                                                );
                                                                            let v220 = v219?;
                                                                            let v221 =
                                                                                C::vstate_from_type(
                                                                                    ctx, v220,
                                                                                );
                                                                            let v222 =
                                                                                C::vstate_mf2(
                                                                                    ctx, v221,
                                                                                );
                                                                            let v429 = constructor_rv_vwsubu_vx(ctx, v225, v180, v163, v222);
                                                                            let v430 = constructor_output_vreg(ctx, v429);
                                                                            // Rule at src/isa/riscv64/lower.isle line 387.
                                                                            return Some(v430);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::UwidenHigh => {
                                                            let v170 = C::def_inst(ctx, v64);
                                                            if let Some(v171) = v170 {
                                                                let v172 = &C::inst_data(ctx, v171);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v173,
                                                                    arg: v174,
                                                                } = v172
                                                                {
                                                                    if let &Opcode::Uextend = v173 {
                                                                        let v76 =
                                                                            C::value_type(ctx, v75);
                                                                        let v228 =
                                                                            C::lane_type(ctx, v76);
                                                                        let v175 = C::value_type(
                                                                            ctx, v174,
                                                                        );
                                                                        let v229 = C::ty_equal(
                                                                            ctx, v228, v175,
                                                                        );
                                                                        if v229 == true {
                                                                            let v225 = constructor_put_in_vreg(ctx, v75);
                                                                            let v243 = constructor_gen_slidedown_half(ctx, v76, v225);
                                                                            let v248 = constructor_put_in_xreg(ctx, v174);
                                                                            let v163 = &constructor_unmasked(ctx);
                                                                            let v219 =
                                                                                C::ty_half_lanes(
                                                                                    ctx, v76,
                                                                                );
                                                                            let v220 = v219?;
                                                                            let v221 =
                                                                                C::vstate_from_type(
                                                                                    ctx, v220,
                                                                                );
                                                                            let v222 =
                                                                                C::vstate_mf2(
                                                                                    ctx, v221,
                                                                                );
                                                                            let v435 = constructor_rv_vwsubu_vx(ctx, v243, v248, v163, v222);
                                                                            let v436 = constructor_output_vreg(ctx, v435);
                                                                            // Rule at src/isa/riscv64/lower.isle line 402.
                                                                            return Some(v436);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::SwidenLow => {
                                            let v71 = C::def_inst(ctx, v38.0);
                                            if let Some(v72) = v71 {
                                                let v73 = &C::inst_data(ctx, v72);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v74,
                                                    arg: v75,
                                                } = v73
                                                {
                                                    match v74 {
                                                        &Opcode::SwidenLow => {
                                                            let v225 =
                                                                constructor_put_in_vreg(ctx, v75);
                                                            let v211 =
                                                                constructor_put_in_vreg(ctx, v64);
                                                            let v163 = &constructor_unmasked(ctx);
                                                            let v76 = C::value_type(ctx, v75);
                                                            let v219 = C::ty_half_lanes(ctx, v76);
                                                            let v220 = v219?;
                                                            let v221 =
                                                                C::vstate_from_type(ctx, v220);
                                                            let v222 = C::vstate_mf2(ctx, v221);
                                                            let v415 = constructor_rv_vwsub_vv(
                                                                ctx, v225, v211, v163, v222,
                                                            );
                                                            let v416 =
                                                                constructor_output_vreg(ctx, v415);
                                                            // Rule at src/isa/riscv64/lower.isle line 354.
                                                            return Some(v416);
                                                        }
                                                        &Opcode::SwidenHigh => {
                                                            let v225 =
                                                                constructor_put_in_vreg(ctx, v75);
                                                            let v76 = C::value_type(ctx, v75);
                                                            let v243 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v76, v225,
                                                                );
                                                            let v244 =
                                                                constructor_put_in_vreg(ctx, v64);
                                                            let v163 = &constructor_unmasked(ctx);
                                                            let v219 = C::ty_half_lanes(ctx, v76);
                                                            let v220 = v219?;
                                                            let v221 =
                                                                C::vstate_from_type(ctx, v220);
                                                            let v222 = C::vstate_mf2(ctx, v221);
                                                            let v439 = constructor_rv_vwsub_vv(
                                                                ctx, v243, v244, v163, v222,
                                                            );
                                                            let v440 =
                                                                constructor_output_vreg(ctx, v439);
                                                            // Rule at src/isa/riscv64/lower.isle line 413.
                                                            return Some(v440);
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::SwidenHigh => {
                                            let v71 = C::def_inst(ctx, v38.0);
                                            if let Some(v72) = v71 {
                                                let v73 = &C::inst_data(ctx, v72);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v74,
                                                    arg: v75,
                                                } = v73
                                                {
                                                    match v74 {
                                                        &Opcode::SwidenLow => {
                                                            let v225 =
                                                                constructor_put_in_vreg(ctx, v75);
                                                            let v211 =
                                                                constructor_put_in_vreg(ctx, v64);
                                                            let v76 = C::value_type(ctx, v75);
                                                            let v275 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v76, v211,
                                                                );
                                                            let v163 = &constructor_unmasked(ctx);
                                                            let v219 = C::ty_half_lanes(ctx, v76);
                                                            let v220 = v219?;
                                                            let v221 =
                                                                C::vstate_from_type(ctx, v220);
                                                            let v222 = C::vstate_mf2(ctx, v221);
                                                            let v437 = constructor_rv_vwsub_vv(
                                                                ctx, v225, v275, v163, v222,
                                                            );
                                                            let v438 =
                                                                constructor_output_vreg(ctx, v437);
                                                            // Rule at src/isa/riscv64/lower.isle line 409.
                                                            return Some(v438);
                                                        }
                                                        &Opcode::SwidenHigh => {
                                                            let v225 =
                                                                constructor_put_in_vreg(ctx, v75);
                                                            let v76 = C::value_type(ctx, v75);
                                                            let v243 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v76, v225,
                                                                );
                                                            let v244 =
                                                                constructor_put_in_vreg(ctx, v64);
                                                            let v245 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v76, v244,
                                                                );
                                                            let v163 = &constructor_unmasked(ctx);
                                                            let v219 = C::ty_half_lanes(ctx, v76);
                                                            let v220 = v219?;
                                                            let v221 =
                                                                C::vstate_from_type(ctx, v220);
                                                            let v222 = C::vstate_mf2(ctx, v221);
                                                            let v421 = constructor_rv_vwsub_vv(
                                                                ctx, v243, v245, v163, v222,
                                                            );
                                                            let v422 =
                                                                constructor_output_vreg(ctx, v421);
                                                            // Rule at src/isa/riscv64/lower.isle line 369.
                                                            return Some(v422);
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::UwidenLow => {
                                            let v71 = C::def_inst(ctx, v38.0);
                                            if let Some(v72) = v71 {
                                                let v73 = &C::inst_data(ctx, v72);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v74,
                                                    arg: v75,
                                                } = v73
                                                {
                                                    match v74 {
                                                        &Opcode::UwidenLow => {
                                                            let v225 =
                                                                constructor_put_in_vreg(ctx, v75);
                                                            let v211 =
                                                                constructor_put_in_vreg(ctx, v64);
                                                            let v163 = &constructor_unmasked(ctx);
                                                            let v76 = C::value_type(ctx, v75);
                                                            let v219 = C::ty_half_lanes(ctx, v76);
                                                            let v220 = v219?;
                                                            let v221 =
                                                                C::vstate_from_type(ctx, v220);
                                                            let v222 = C::vstate_mf2(ctx, v221);
                                                            let v427 = constructor_rv_vwsubu_vv(
                                                                ctx, v225, v211, v163, v222,
                                                            );
                                                            let v428 =
                                                                constructor_output_vreg(ctx, v427);
                                                            // Rule at src/isa/riscv64/lower.isle line 383.
                                                            return Some(v428);
                                                        }
                                                        &Opcode::UwidenHigh => {
                                                            let v225 =
                                                                constructor_put_in_vreg(ctx, v75);
                                                            let v76 = C::value_type(ctx, v75);
                                                            let v243 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v76, v225,
                                                                );
                                                            let v244 =
                                                                constructor_put_in_vreg(ctx, v64);
                                                            let v163 = &constructor_unmasked(ctx);
                                                            let v219 = C::ty_half_lanes(ctx, v76);
                                                            let v220 = v219?;
                                                            let v221 =
                                                                C::vstate_from_type(ctx, v220);
                                                            let v222 = C::vstate_mf2(ctx, v221);
                                                            let v443 = constructor_rv_vwsubu_vv(
                                                                ctx, v243, v244, v163, v222,
                                                            );
                                                            let v444 =
                                                                constructor_output_vreg(ctx, v443);
                                                            // Rule at src/isa/riscv64/lower.isle line 423.
                                                            return Some(v444);
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::UwidenHigh => {
                                            let v71 = C::def_inst(ctx, v38.0);
                                            if let Some(v72) = v71 {
                                                let v73 = &C::inst_data(ctx, v72);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v74,
                                                    arg: v75,
                                                } = v73
                                                {
                                                    match v74 {
                                                        &Opcode::UwidenLow => {
                                                            let v225 =
                                                                constructor_put_in_vreg(ctx, v75);
                                                            let v211 =
                                                                constructor_put_in_vreg(ctx, v64);
                                                            let v76 = C::value_type(ctx, v75);
                                                            let v275 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v76, v211,
                                                                );
                                                            let v163 = &constructor_unmasked(ctx);
                                                            let v219 = C::ty_half_lanes(ctx, v76);
                                                            let v220 = v219?;
                                                            let v221 =
                                                                C::vstate_from_type(ctx, v220);
                                                            let v222 = C::vstate_mf2(ctx, v221);
                                                            let v441 = constructor_rv_vwsubu_vv(
                                                                ctx, v225, v275, v163, v222,
                                                            );
                                                            let v442 =
                                                                constructor_output_vreg(ctx, v441);
                                                            // Rule at src/isa/riscv64/lower.isle line 419.
                                                            return Some(v442);
                                                        }
                                                        &Opcode::UwidenHigh => {
                                                            let v225 =
                                                                constructor_put_in_vreg(ctx, v75);
                                                            let v76 = C::value_type(ctx, v75);
                                                            let v243 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v76, v225,
                                                                );
                                                            let v244 =
                                                                constructor_put_in_vreg(ctx, v64);
                                                            let v245 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v76, v244,
                                                                );
                                                            let v163 = &constructor_unmasked(ctx);
                                                            let v219 = C::ty_half_lanes(ctx, v76);
                                                            let v220 = v219?;
                                                            let v221 =
                                                                C::vstate_from_type(ctx, v220);
                                                            let v222 = C::vstate_mf2(ctx, v221);
                                                            let v433 = constructor_rv_vwsubu_vv(
                                                                ctx, v243, v245, v163, v222,
                                                            );
                                                            let v434 =
                                                                constructor_output_vreg(ctx, v433);
                                                            // Rule at src/isa/riscv64/lower.isle line 398.
                                                            return Some(v434);
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v207 = constructor_replicated_imm5(ctx, v38.0);
                            if let Some(v208) = v207 {
                                let v191 = constructor_put_in_vreg(ctx, v38.1);
                                let v163 = &constructor_unmasked(ctx);
                                let v164 = C::vstate_from_type(ctx, v11);
                                let v411 = constructor_rv_vrsub_vi(ctx, v191, v208, v163, v164);
                                let v412 = constructor_output_vreg(ctx, v411);
                                // Rule at src/isa/riscv64/lower.isle line 344.
                                return Some(v412);
                            }
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v191 = constructor_put_in_vreg(ctx, v38.1);
                                        let v192 = constructor_put_in_xreg(ctx, v75);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v409 =
                                            constructor_rv_vrsub_vx(ctx, v191, v192, v163, v164);
                                        let v410 = constructor_output_vreg(ctx, v409);
                                        // Rule at src/isa/riscv64/lower.isle line 341.
                                        return Some(v410);
                                    }
                                }
                            }
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    match v63 {
                                        &Opcode::Splat => {
                                            let v170 = C::def_inst(ctx, v64);
                                            if let Some(v171) = v170 {
                                                let v172 = &C::inst_data(ctx, v171);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v173,
                                                    arg: v174,
                                                } = v172
                                                {
                                                    match v173 {
                                                        &Opcode::Uextend => {
                                                            let v176 = C::ty_half_width(ctx, v11);
                                                            if let Some(v177) = v176 {
                                                                let v178 = C::lane_type(ctx, v177);
                                                                let v175 = C::value_type(ctx, v174);
                                                                let v179 =
                                                                    C::ty_equal(ctx, v178, v175);
                                                                if v179 == true {
                                                                    let v161 =
                                                                        constructor_put_in_vreg(
                                                                            ctx, v38.0,
                                                                        );
                                                                    let v180 =
                                                                        constructor_put_in_xreg(
                                                                            ctx, v174,
                                                                        );
                                                                    let v163 =
                                                                        &constructor_unmasked(ctx);
                                                                    let v181 = C::vstate_from_type(
                                                                        ctx, v177,
                                                                    );
                                                                    let v182 =
                                                                        C::vstate_mf2(ctx, v181);
                                                                    let v407 =
                                                                        constructor_rv_vwsubu_wx(
                                                                            ctx, v161, v180, v163,
                                                                            v182,
                                                                        );
                                                                    let v408 =
                                                                        constructor_output_vreg(
                                                                            ctx, v407,
                                                                        );
                                                                    // Rule at src/isa/riscv64/lower.isle line 336.
                                                                    return Some(v408);
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Sextend => {
                                                            let v176 = C::ty_half_width(ctx, v11);
                                                            if let Some(v177) = v176 {
                                                                let v178 = C::lane_type(ctx, v177);
                                                                let v175 = C::value_type(ctx, v174);
                                                                let v179 =
                                                                    C::ty_equal(ctx, v178, v175);
                                                                if v179 == true {
                                                                    let v161 =
                                                                        constructor_put_in_vreg(
                                                                            ctx, v38.0,
                                                                        );
                                                                    let v180 =
                                                                        constructor_put_in_xreg(
                                                                            ctx, v174,
                                                                        );
                                                                    let v163 =
                                                                        &constructor_unmasked(ctx);
                                                                    let v181 = C::vstate_from_type(
                                                                        ctx, v177,
                                                                    );
                                                                    let v182 =
                                                                        C::vstate_mf2(ctx, v181);
                                                                    let v405 =
                                                                        constructor_rv_vwsub_wx(
                                                                            ctx, v161, v180, v163,
                                                                            v182,
                                                                        );
                                                                    let v406 =
                                                                        constructor_output_vreg(
                                                                            ctx, v405,
                                                                        );
                                                                    // Rule at src/isa/riscv64/lower.isle line 331.
                                                                    return Some(v406);
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                                            let v167 = constructor_put_in_xreg(ctx, v64);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v164 = C::vstate_from_type(ctx, v11);
                                            let v403 =
                                                constructor_rv_vsub_vx(ctx, v161, v167, v163, v164);
                                            let v404 = constructor_output_vreg(ctx, v403);
                                            // Rule at src/isa/riscv64/lower.isle line 328.
                                            return Some(v404);
                                        }
                                        &Opcode::SwidenLow => {
                                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                                            let v211 = constructor_put_in_vreg(ctx, v64);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v65 = C::value_type(ctx, v64);
                                            let v212 = C::ty_half_lanes(ctx, v65);
                                            let v213 = v212?;
                                            let v214 = C::vstate_from_type(ctx, v213);
                                            let v215 = C::vstate_mf2(ctx, v214);
                                            let v413 = constructor_rv_vwsub_wv(
                                                ctx, v161, v211, v163, v215,
                                            );
                                            let v414 = constructor_output_vreg(ctx, v413);
                                            // Rule at src/isa/riscv64/lower.isle line 351.
                                            return Some(v414);
                                        }
                                        &Opcode::SwidenHigh => {
                                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                                            let v211 = constructor_put_in_vreg(ctx, v64);
                                            let v65 = C::value_type(ctx, v64);
                                            let v237 =
                                                constructor_gen_slidedown_half(ctx, v65, v211);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v212 = C::ty_half_lanes(ctx, v65);
                                            let v213 = v212?;
                                            let v214 = C::vstate_from_type(ctx, v213);
                                            let v215 = C::vstate_mf2(ctx, v214);
                                            let v419 = constructor_rv_vwsub_wv(
                                                ctx, v161, v237, v163, v215,
                                            );
                                            let v420 = constructor_output_vreg(ctx, v419);
                                            // Rule at src/isa/riscv64/lower.isle line 366.
                                            return Some(v420);
                                        }
                                        &Opcode::UwidenLow => {
                                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                                            let v211 = constructor_put_in_vreg(ctx, v64);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v65 = C::value_type(ctx, v64);
                                            let v212 = C::ty_half_lanes(ctx, v65);
                                            let v213 = v212?;
                                            let v214 = C::vstate_from_type(ctx, v213);
                                            let v215 = C::vstate_mf2(ctx, v214);
                                            let v425 = constructor_rv_vwsubu_wv(
                                                ctx, v161, v211, v163, v215,
                                            );
                                            let v426 = constructor_output_vreg(ctx, v425);
                                            // Rule at src/isa/riscv64/lower.isle line 380.
                                            return Some(v426);
                                        }
                                        &Opcode::UwidenHigh => {
                                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                                            let v211 = constructor_put_in_vreg(ctx, v64);
                                            let v65 = C::value_type(ctx, v64);
                                            let v237 =
                                                constructor_gen_slidedown_half(ctx, v65, v211);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v212 = C::ty_half_lanes(ctx, v65);
                                            let v213 = v212?;
                                            let v214 = C::vstate_from_type(ctx, v213);
                                            let v215 = C::vstate_mf2(ctx, v214);
                                            let v431 = constructor_rv_vwsubu_wv(
                                                ctx, v161, v237, v163, v215,
                                            );
                                            let v432 = constructor_output_vreg(ctx, v431);
                                            // Rule at src/isa/riscv64/lower.isle line 395.
                                            return Some(v432);
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v401 = constructor_rv_vsub_vv(ctx, v161, v162, v163, v164);
                            let v402 = constructor_output_vreg(ctx, v401);
                            // Rule at src/isa/riscv64/lower.isle line 325.
                            return Some(v402);
                        }
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v136 = C::put_in_regs(ctx, v38.0);
                            let v398 = C::put_in_regs(ctx, v38.1);
                            let v399 = constructor_i128_sub(ctx, v136, v398);
                            let v400 = C::output(ctx, v399);
                            // Rule at src/isa/riscv64/lower.isle line 321.
                            return Some(v400);
                        }
                        let v368 = C::fits_in_32(ctx, v3);
                        if let Some(v369) = v368 {
                            let v394 = C::ty_int(ctx, v369);
                            if let Some(v395) = v394 {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                let v42 = constructor_put_in_xreg(ctx, v38.1);
                                let v396 = constructor_rv_subw(ctx, v41, v42);
                                let v397 = constructor_output_xreg(ctx, v396);
                                // Rule at src/isa/riscv64/lower.isle line 318.
                                return Some(v397);
                            }
                        }
                        let v34 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v35) = v34 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                            let v42 = constructor_put_in_xreg(ctx, v38.1);
                            let v392 = constructor_rv_sub(ctx, v41, v42);
                            let v393 = constructor_output_xreg(ctx, v392);
                            // Rule at src/isa/riscv64/lower.isle line 315.
                            return Some(v393);
                        }
                    }
                }
                &Opcode::Imul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v167 = constructor_put_in_xreg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v480 =
                                            constructor_rv_vmul_vx(ctx, v161, v167, v163, v164);
                                        let v481 = constructor_output_vreg(ctx, v480);
                                        // Rule at src/isa/riscv64/lower.isle line 478.
                                        return Some(v481);
                                    }
                                }
                            }
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v191 = constructor_put_in_vreg(ctx, v38.1);
                                        let v192 = constructor_put_in_xreg(ctx, v75);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v478 =
                                            constructor_rv_vmul_vx(ctx, v191, v192, v163, v164);
                                        let v479 = constructor_output_vreg(ctx, v478);
                                        // Rule at src/isa/riscv64/lower.isle line 475.
                                        return Some(v479);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v476 = constructor_rv_vmul_vv(ctx, v161, v162, v163, v164);
                            let v477 = constructor_output_vreg(ctx, v476);
                            // Rule at src/isa/riscv64/lower.isle line 472.
                            return Some(v477);
                        }
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v136 = C::put_in_regs(ctx, v38.0);
                            let v138 = C::value_regs_get(ctx, v136, 0x0);
                            let v139 = C::xreg_new(ctx, v138);
                            let v459 = C::value_regs_get(ctx, v136, 0x1);
                            let v460 = C::xreg_new(ctx, v459);
                            let v461 = C::put_in_regs(ctx, v38.1);
                            let v462 = C::value_regs_get(ctx, v461, 0x0);
                            let v463 = C::xreg_new(ctx, v462);
                            let v464 = C::value_regs_get(ctx, v461, 0x1);
                            let v465 = C::xreg_new(ctx, v464);
                            let v466 = constructor_rv_mulhu(ctx, v139, v463);
                            let v467 = constructor_madd(ctx, v139, v465, v466);
                            let v468 = constructor_madd(ctx, v460, v463, v467);
                            let v469 = C::zero_reg(ctx);
                            let v470 = C::xreg_new(ctx, v469);
                            let v471 = constructor_madd(ctx, v139, v463, v470);
                            let v472 = C::xreg_to_reg(ctx, v471);
                            let v473 = C::xreg_to_reg(ctx, v468);
                            let v474 = C::value_regs(ctx, v472, v473);
                            let v475 = C::output(ctx, v474);
                            // Rule at src/isa/riscv64/lower.isle line 446.
                            return Some(v475);
                        }
                        let v368 = C::fits_in_32(ctx, v3);
                        if let Some(v369) = v368 {
                            let v394 = C::ty_int(ctx, v369);
                            if let Some(v395) = v394 {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                let v42 = constructor_put_in_xreg(ctx, v38.1);
                                let v457 = constructor_rv_mulw(ctx, v41, v42);
                                let v458 = constructor_output_xreg(ctx, v457);
                                // Rule at src/isa/riscv64/lower.isle line 442.
                                return Some(v458);
                            }
                        }
                        let v34 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v35) = v34 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                            let v42 = constructor_put_in_xreg(ctx, v38.1);
                            let v455 = constructor_rv_mul(ctx, v41, v42);
                            let v456 = constructor_output_xreg(ctx, v455);
                            // Rule at src/isa/riscv64/lower.isle line 439.
                            return Some(v456);
                        }
                    }
                }
                &Opcode::Umulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v167 = constructor_put_in_xreg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v503 =
                                            constructor_rv_vmulhu_vx(ctx, v161, v167, v163, v164);
                                        let v504 = constructor_output_vreg(ctx, v503);
                                        // Rule at src/isa/riscv64/lower.isle line 508.
                                        return Some(v504);
                                    }
                                }
                            }
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v191 = constructor_put_in_vreg(ctx, v38.1);
                                        let v192 = constructor_put_in_xreg(ctx, v75);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v501 =
                                            constructor_rv_vmulhu_vx(ctx, v191, v192, v163, v164);
                                        let v502 = constructor_output_vreg(ctx, v501);
                                        // Rule at src/isa/riscv64/lower.isle line 505.
                                        return Some(v502);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v499 = constructor_rv_vmulhu_vv(ctx, v161, v162, v163, v164);
                            let v500 = constructor_output_vreg(ctx, v499);
                            // Rule at src/isa/riscv64/lower.isle line 502.
                            return Some(v500);
                        }
                        if v3 == I64 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                            let v42 = constructor_put_in_xreg(ctx, v38.1);
                            let v497 = constructor_rv_mulhu(ctx, v41, v42);
                            let v498 = constructor_output_xreg(ctx, v497);
                            // Rule at src/isa/riscv64/lower.isle line 499.
                            return Some(v498);
                        }
                        let v368 = C::fits_in_32(ctx, v3);
                        if let Some(v369) = v368 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v492 = constructor_zext(ctx, v38.0);
                            let v493 = constructor_zext(ctx, v38.1);
                            let v494 = constructor_rv_mul(ctx, v492, v493);
                            let v379 = C::ty_bits(ctx, v369);
                            let v380 = C::u8_as_i32(ctx, v379);
                            let v381 = C::imm12_const(ctx, v380);
                            let v495 = constructor_rv_srli(ctx, v494, v381);
                            let v496 = constructor_output_xreg(ctx, v495);
                            // Rule at src/isa/riscv64/lower.isle line 495.
                            return Some(v496);
                        }
                    }
                }
                &Opcode::Smulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v167 = constructor_put_in_xreg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v490 =
                                            constructor_rv_vmulh_vx(ctx, v161, v167, v163, v164);
                                        let v491 = constructor_output_vreg(ctx, v490);
                                        // Rule at src/isa/riscv64/lower.isle line 491.
                                        return Some(v491);
                                    }
                                }
                            }
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v191 = constructor_put_in_vreg(ctx, v38.1);
                                        let v192 = constructor_put_in_xreg(ctx, v75);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v488 =
                                            constructor_rv_vmulh_vx(ctx, v191, v192, v163, v164);
                                        let v489 = constructor_output_vreg(ctx, v488);
                                        // Rule at src/isa/riscv64/lower.isle line 488.
                                        return Some(v489);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v486 = constructor_rv_vmulh_vv(ctx, v161, v162, v163, v164);
                            let v487 = constructor_output_vreg(ctx, v486);
                            // Rule at src/isa/riscv64/lower.isle line 485.
                            return Some(v487);
                        }
                        let v34 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v35) = v34 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v482 = constructor_sext(ctx, v38.0);
                            let v483 = constructor_sext(ctx, v38.1);
                            let v484 = constructor_lower_smlhi(ctx, v35, v482, v483);
                            let v485 = constructor_output_xreg(ctx, v484);
                            // Rule at src/isa/riscv64/lower.isle line 482.
                            return Some(v485);
                        }
                    }
                }
                &Opcode::SqmulRoundSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v191 = constructor_put_in_vreg(ctx, v38.1);
                                        let v192 = constructor_put_in_xreg(ctx, v75);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v2050 =
                                            constructor_rv_vsmul_vx(ctx, v191, v192, v163, v164);
                                        let v2051 = constructor_output_vreg(ctx, v2050);
                                        // Rule at src/isa/riscv64/lower.isle line 2376.
                                        return Some(v2051);
                                    }
                                }
                            }
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v167 = constructor_put_in_xreg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v2048 =
                                            constructor_rv_vsmul_vx(ctx, v161, v167, v163, v164);
                                        let v2049 = constructor_output_vreg(ctx, v2048);
                                        // Rule at src/isa/riscv64/lower.isle line 2373.
                                        return Some(v2049);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v2046 = constructor_rv_vsmul_vv(ctx, v161, v162, v163, v164);
                            let v2047 = constructor_output_vreg(ctx, v2046);
                            // Rule at src/isa/riscv64/lower.isle line 2370.
                            return Some(v2047);
                        }
                    }
                }
                &Opcode::Udiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v507 = C::has_m(ctx);
                        if v507 == true {
                            let v3 = C::value_type(ctx, v2);
                            match v3 {
                                I32 => {
                                    let v38 = C::unpack_value_array_2(ctx, v37);
                                    let v60 = C::def_inst(ctx, v38.1);
                                    if let Some(v61) = v60 {
                                        let v62 = &C::inst_data(ctx, v61);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v511,
                                            imm: v512,
                                        } = v62
                                        {
                                            if let &Opcode::Iconst = v511 {
                                                let v520 =
                                                    C::safe_divisor_from_imm64(ctx, I32, v512);
                                                if let Some(v521) = v520 {
                                                    let v41 = constructor_put_in_xreg(ctx, v38.0);
                                                    let v42 = constructor_put_in_xreg(ctx, v38.1);
                                                    let v522 = constructor_rv_divuw(ctx, v41, v42);
                                                    let v523 = constructor_output_xreg(ctx, v522);
                                                    // Rule at src/isa/riscv64/lower.isle line 526.
                                                    return Some(v523);
                                                }
                                            }
                                        }
                                    }
                                    let v41 = constructor_put_in_xreg(ctx, v38.0);
                                    let v493 = constructor_zext(ctx, v38.1);
                                    let v508 = constructor_nonzero_divisor(ctx, v493);
                                    let v517 = constructor_rv_divuw(ctx, v41, v508);
                                    let v518 = constructor_output_xreg(ctx, v517);
                                    // Rule at src/isa/riscv64/lower.isle line 522.
                                    return Some(v518);
                                }
                                I64 => {
                                    let v38 = C::unpack_value_array_2(ctx, v37);
                                    let v60 = C::def_inst(ctx, v38.1);
                                    if let Some(v61) = v60 {
                                        let v62 = &C::inst_data(ctx, v61);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v511,
                                            imm: v512,
                                        } = v62
                                        {
                                            if let &Opcode::Iconst = v511 {
                                                let v528 =
                                                    C::safe_divisor_from_imm64(ctx, I64, v512);
                                                if let Some(v529) = v528 {
                                                    let v41 = constructor_put_in_xreg(ctx, v38.0);
                                                    let v42 = constructor_put_in_xreg(ctx, v38.1);
                                                    let v530 = constructor_rv_divu(ctx, v41, v42);
                                                    let v531 = constructor_output_xreg(ctx, v530);
                                                    // Rule at src/isa/riscv64/lower.isle line 535.
                                                    return Some(v531);
                                                }
                                            }
                                        }
                                    }
                                    let v41 = constructor_put_in_xreg(ctx, v38.0);
                                    let v42 = constructor_put_in_xreg(ctx, v38.1);
                                    let v524 = constructor_nonzero_divisor(ctx, v42);
                                    let v525 = constructor_rv_divu(ctx, v41, v524);
                                    let v526 = constructor_output_xreg(ctx, v525);
                                    // Rule at src/isa/riscv64/lower.isle line 531.
                                    return Some(v526);
                                }
                                _ => {}
                            }
                            let v505 = C::fits_in_16(ctx, v3);
                            if let Some(v506) = v505 {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v60 = C::def_inst(ctx, v38.1);
                                if let Some(v61) = v60 {
                                    let v62 = &C::inst_data(ctx, v61);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v511,
                                        imm: v512,
                                    } = v62
                                    {
                                        if let &Opcode::Iconst = v511 {
                                            let v513 = C::safe_divisor_from_imm64(ctx, v506, v512);
                                            if let Some(v514) = v513 {
                                                let v492 = constructor_zext(ctx, v38.0);
                                                let v493 = constructor_zext(ctx, v38.1);
                                                let v515 = constructor_rv_divuw(ctx, v492, v493);
                                                let v516 = constructor_output_xreg(ctx, v515);
                                                // Rule at src/isa/riscv64/lower.isle line 517.
                                                return Some(v516);
                                            }
                                        }
                                    }
                                }
                                let v492 = constructor_zext(ctx, v38.0);
                                let v493 = constructor_zext(ctx, v38.1);
                                let v508 = constructor_nonzero_divisor(ctx, v493);
                                let v509 = constructor_rv_divuw(ctx, v492, v508);
                                let v510 = constructor_output_xreg(ctx, v509);
                                // Rule at src/isa/riscv64/lower.isle line 513.
                                return Some(v510);
                            }
                        }
                    }
                }
                &Opcode::Sdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v507 = C::has_m(ctx);
                        if v507 == true {
                            let v3 = C::value_type(ctx, v2);
                            match v3 {
                                I32 => {
                                    let v38 = C::unpack_value_array_2(ctx, v37);
                                    let v60 = C::def_inst(ctx, v38.1);
                                    if let Some(v61) = v60 {
                                        let v62 = &C::inst_data(ctx, v61);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v511,
                                            imm: v512,
                                        } = v62
                                        {
                                            if let &Opcode::Iconst = v511 {
                                                let v520 =
                                                    C::safe_divisor_from_imm64(ctx, I32, v512);
                                                if let Some(v521) = v520 {
                                                    let v41 = constructor_put_in_xreg(ctx, v38.0);
                                                    let v42 = constructor_put_in_xreg(ctx, v38.1);
                                                    let v540 = constructor_rv_divw(ctx, v41, v42);
                                                    let v541 = constructor_output_xreg(ctx, v540);
                                                    // Rule at src/isa/riscv64/lower.isle line 563.
                                                    return Some(v541);
                                                }
                                            }
                                        }
                                    }
                                    let v482 = constructor_sext(ctx, v38.0);
                                    let v483 = constructor_sext(ctx, v38.1);
                                    let v537 = constructor_safe_sdiv_divisor(ctx, I32, v482, v483);
                                    let v538 = constructor_rv_divw(ctx, v482, v537);
                                    let v539 = constructor_output_xreg(ctx, v538);
                                    // Rule at src/isa/riscv64/lower.isle line 558.
                                    return Some(v539);
                                }
                                I64 => {
                                    let v38 = C::unpack_value_array_2(ctx, v37);
                                    let v60 = C::def_inst(ctx, v38.1);
                                    if let Some(v61) = v60 {
                                        let v62 = &C::inst_data(ctx, v61);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v511,
                                            imm: v512,
                                        } = v62
                                        {
                                            if let &Opcode::Iconst = v511 {
                                                let v528 =
                                                    C::safe_divisor_from_imm64(ctx, I64, v512);
                                                if let Some(v529) = v528 {
                                                    let v41 = constructor_put_in_xreg(ctx, v38.0);
                                                    let v42 = constructor_put_in_xreg(ctx, v38.1);
                                                    let v546 = constructor_rv_div(ctx, v41, v42);
                                                    let v547 = constructor_output_xreg(ctx, v546);
                                                    // Rule at src/isa/riscv64/lower.isle line 572.
                                                    return Some(v547);
                                                }
                                            }
                                        }
                                    }
                                    let v41 = constructor_put_in_xreg(ctx, v38.0);
                                    let v68 = constructor_put_in_xreg(ctx, v38.0);
                                    let v542 = constructor_put_in_xreg(ctx, v38.1);
                                    let v543 = constructor_safe_sdiv_divisor(ctx, I64, v68, v542);
                                    let v544 = constructor_rv_div(ctx, v41, v543);
                                    let v545 = constructor_output_xreg(ctx, v544);
                                    // Rule at src/isa/riscv64/lower.isle line 568.
                                    return Some(v545);
                                }
                                _ => {}
                            }
                            let v505 = C::fits_in_16(ctx, v3);
                            if let Some(v506) = v505 {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v60 = C::def_inst(ctx, v38.1);
                                if let Some(v61) = v60 {
                                    let v62 = &C::inst_data(ctx, v61);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v511,
                                        imm: v512,
                                    } = v62
                                    {
                                        if let &Opcode::Iconst = v511 {
                                            let v513 = C::safe_divisor_from_imm64(ctx, v506, v512);
                                            if let Some(v514) = v513 {
                                                let v482 = constructor_sext(ctx, v38.0);
                                                let v42 = constructor_put_in_xreg(ctx, v38.1);
                                                let v535 = constructor_rv_divw(ctx, v482, v42);
                                                let v536 = constructor_output_xreg(ctx, v535);
                                                // Rule at src/isa/riscv64/lower.isle line 553.
                                                return Some(v536);
                                            }
                                        }
                                    }
                                }
                                let v482 = constructor_sext(ctx, v38.0);
                                let v483 = constructor_sext(ctx, v38.1);
                                let v532 = constructor_safe_sdiv_divisor(ctx, v506, v482, v483);
                                let v533 = constructor_rv_divw(ctx, v482, v532);
                                let v534 = constructor_output_xreg(ctx, v533);
                                // Rule at src/isa/riscv64/lower.isle line 548.
                                return Some(v534);
                            }
                        }
                    }
                }
                &Opcode::Urem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v507 = C::has_m(ctx);
                        if v507 == true {
                            let v3 = C::value_type(ctx, v2);
                            match v3 {
                                I32 => {
                                    let v38 = C::unpack_value_array_2(ctx, v37);
                                    let v60 = C::def_inst(ctx, v38.1);
                                    if let Some(v61) = v60 {
                                        let v62 = &C::inst_data(ctx, v61);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v511,
                                            imm: v512,
                                        } = v62
                                        {
                                            if let &Opcode::Iconst = v511 {
                                                let v520 =
                                                    C::safe_divisor_from_imm64(ctx, I32, v512);
                                                if let Some(v521) = v520 {
                                                    let v41 = constructor_put_in_xreg(ctx, v38.0);
                                                    let v42 = constructor_put_in_xreg(ctx, v38.1);
                                                    let v554 = constructor_rv_remuw(ctx, v41, v42);
                                                    let v555 = constructor_output_xreg(ctx, v554);
                                                    // Rule at src/isa/riscv64/lower.isle line 610.
                                                    return Some(v555);
                                                }
                                            }
                                        }
                                    }
                                    let v41 = constructor_put_in_xreg(ctx, v38.0);
                                    let v493 = constructor_zext(ctx, v38.1);
                                    let v508 = constructor_nonzero_divisor(ctx, v493);
                                    let v552 = constructor_rv_remuw(ctx, v41, v508);
                                    let v553 = constructor_output_xreg(ctx, v552);
                                    // Rule at src/isa/riscv64/lower.isle line 606.
                                    return Some(v553);
                                }
                                I64 => {
                                    let v38 = C::unpack_value_array_2(ctx, v37);
                                    let v60 = C::def_inst(ctx, v38.1);
                                    if let Some(v61) = v60 {
                                        let v62 = &C::inst_data(ctx, v61);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v511,
                                            imm: v512,
                                        } = v62
                                        {
                                            if let &Opcode::Iconst = v511 {
                                                let v528 =
                                                    C::safe_divisor_from_imm64(ctx, I64, v512);
                                                if let Some(v529) = v528 {
                                                    let v41 = constructor_put_in_xreg(ctx, v38.0);
                                                    let v42 = constructor_put_in_xreg(ctx, v38.1);
                                                    let v558 = constructor_rv_remu(ctx, v41, v42);
                                                    let v559 = constructor_output_xreg(ctx, v558);
                                                    // Rule at src/isa/riscv64/lower.isle line 619.
                                                    return Some(v559);
                                                }
                                            }
                                        }
                                    }
                                    let v41 = constructor_put_in_xreg(ctx, v38.0);
                                    let v42 = constructor_put_in_xreg(ctx, v38.1);
                                    let v524 = constructor_nonzero_divisor(ctx, v42);
                                    let v556 = constructor_rv_remu(ctx, v41, v524);
                                    let v557 = constructor_output_xreg(ctx, v556);
                                    // Rule at src/isa/riscv64/lower.isle line 615.
                                    return Some(v557);
                                }
                                _ => {}
                            }
                            let v505 = C::fits_in_16(ctx, v3);
                            if let Some(v506) = v505 {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v60 = C::def_inst(ctx, v38.1);
                                if let Some(v61) = v60 {
                                    let v62 = &C::inst_data(ctx, v61);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v511,
                                        imm: v512,
                                    } = v62
                                    {
                                        if let &Opcode::Iconst = v511 {
                                            let v513 = C::safe_divisor_from_imm64(ctx, v506, v512);
                                            if let Some(v514) = v513 {
                                                let v492 = constructor_zext(ctx, v38.0);
                                                let v42 = constructor_put_in_xreg(ctx, v38.1);
                                                let v550 = constructor_rv_remuw(ctx, v492, v42);
                                                let v551 = constructor_output_xreg(ctx, v550);
                                                // Rule at src/isa/riscv64/lower.isle line 601.
                                                return Some(v551);
                                            }
                                        }
                                    }
                                }
                                let v492 = constructor_zext(ctx, v38.0);
                                let v493 = constructor_zext(ctx, v38.1);
                                let v508 = constructor_nonzero_divisor(ctx, v493);
                                let v548 = constructor_rv_remuw(ctx, v492, v508);
                                let v549 = constructor_output_xreg(ctx, v548);
                                // Rule at src/isa/riscv64/lower.isle line 597.
                                return Some(v549);
                            }
                        }
                    }
                }
                &Opcode::Srem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v507 = C::has_m(ctx);
                        if v507 == true {
                            let v3 = C::value_type(ctx, v2);
                            match v3 {
                                I32 => {
                                    let v38 = C::unpack_value_array_2(ctx, v37);
                                    let v60 = C::def_inst(ctx, v38.1);
                                    if let Some(v61) = v60 {
                                        let v62 = &C::inst_data(ctx, v61);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v511,
                                            imm: v512,
                                        } = v62
                                        {
                                            if let &Opcode::Iconst = v511 {
                                                let v520 =
                                                    C::safe_divisor_from_imm64(ctx, I32, v512);
                                                if let Some(v521) = v520 {
                                                    let v41 = constructor_put_in_xreg(ctx, v38.0);
                                                    let v42 = constructor_put_in_xreg(ctx, v38.1);
                                                    let v567 = constructor_rv_remw(ctx, v41, v42);
                                                    let v568 = constructor_output_xreg(ctx, v567);
                                                    // Rule at src/isa/riscv64/lower.isle line 639.
                                                    return Some(v568);
                                                }
                                            }
                                        }
                                    }
                                    let v41 = constructor_put_in_xreg(ctx, v38.0);
                                    let v483 = constructor_sext(ctx, v38.1);
                                    let v560 = constructor_nonzero_divisor(ctx, v483);
                                    let v565 = constructor_rv_remw(ctx, v41, v560);
                                    let v566 = constructor_output_xreg(ctx, v565);
                                    // Rule at src/isa/riscv64/lower.isle line 635.
                                    return Some(v566);
                                }
                                I64 => {
                                    let v38 = C::unpack_value_array_2(ctx, v37);
                                    let v60 = C::def_inst(ctx, v38.1);
                                    if let Some(v61) = v60 {
                                        let v62 = &C::inst_data(ctx, v61);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v511,
                                            imm: v512,
                                        } = v62
                                        {
                                            if let &Opcode::Iconst = v511 {
                                                let v528 =
                                                    C::safe_divisor_from_imm64(ctx, I64, v512);
                                                if let Some(v529) = v528 {
                                                    let v41 = constructor_put_in_xreg(ctx, v38.0);
                                                    let v42 = constructor_put_in_xreg(ctx, v38.1);
                                                    let v571 = constructor_rv_rem(ctx, v41, v42);
                                                    let v572 = constructor_output_xreg(ctx, v571);
                                                    // Rule at src/isa/riscv64/lower.isle line 648.
                                                    return Some(v572);
                                                }
                                            }
                                        }
                                    }
                                    let v41 = constructor_put_in_xreg(ctx, v38.0);
                                    let v42 = constructor_put_in_xreg(ctx, v38.1);
                                    let v524 = constructor_nonzero_divisor(ctx, v42);
                                    let v569 = constructor_rv_rem(ctx, v41, v524);
                                    let v570 = constructor_output_xreg(ctx, v569);
                                    // Rule at src/isa/riscv64/lower.isle line 644.
                                    return Some(v570);
                                }
                                _ => {}
                            }
                            let v505 = C::fits_in_16(ctx, v3);
                            if let Some(v506) = v505 {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v60 = C::def_inst(ctx, v38.1);
                                if let Some(v61) = v60 {
                                    let v62 = &C::inst_data(ctx, v61);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v511,
                                        imm: v512,
                                    } = v62
                                    {
                                        if let &Opcode::Iconst = v511 {
                                            let v513 = C::safe_divisor_from_imm64(ctx, v506, v512);
                                            if let Some(v514) = v513 {
                                                let v482 = constructor_sext(ctx, v38.0);
                                                let v42 = constructor_put_in_xreg(ctx, v38.1);
                                                let v563 = constructor_rv_remw(ctx, v482, v42);
                                                let v564 = constructor_output_xreg(ctx, v563);
                                                // Rule at src/isa/riscv64/lower.isle line 630.
                                                return Some(v564);
                                            }
                                        }
                                    }
                                }
                                let v482 = constructor_sext(ctx, v38.0);
                                let v483 = constructor_sext(ctx, v38.1);
                                let v560 = constructor_nonzero_divisor(ctx, v483);
                                let v561 = constructor_rv_remw(ctx, v482, v560);
                                let v562 = constructor_output_xreg(ctx, v561);
                                // Rule at src/isa/riscv64/lower.isle line 626.
                                return Some(v562);
                            }
                        }
                    }
                }
                &Opcode::Band => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v207 = constructor_replicated_imm5(ctx, v38.0);
                            if let Some(v208) = v207 {
                                let v191 = constructor_put_in_vreg(ctx, v38.1);
                                let v163 = &constructor_unmasked(ctx);
                                let v164 = C::vstate_from_type(ctx, v11);
                                let v638 = constructor_rv_vand_vi(ctx, v191, v208, v163, v164);
                                let v639 = constructor_output_vreg(ctx, v638);
                                // Rule at src/isa/riscv64/lower.isle line 706.
                                return Some(v639);
                            }
                            let v187 = constructor_replicated_imm5(ctx, v38.1);
                            if let Some(v188) = v187 {
                                let v161 = constructor_put_in_vreg(ctx, v38.0);
                                let v163 = &constructor_unmasked(ctx);
                                let v164 = C::vstate_from_type(ctx, v11);
                                let v636 = constructor_rv_vand_vi(ctx, v161, v188, v163, v164);
                                let v637 = constructor_output_vreg(ctx, v636);
                                // Rule at src/isa/riscv64/lower.isle line 702.
                                return Some(v637);
                            }
                            let v630 = C::ty_vector_not_float(ctx, v11);
                            if let Some(v631) = v630 {
                                let v71 = C::def_inst(ctx, v38.0);
                                if let Some(v72) = v71 {
                                    let v73 = &C::inst_data(ctx, v72);
                                    if let &InstructionData::Unary {
                                        opcode: ref v74,
                                        arg: v75,
                                    } = v73
                                    {
                                        if let &Opcode::Splat = v74 {
                                            let v191 = constructor_put_in_vreg(ctx, v38.1);
                                            let v192 = constructor_put_in_xreg(ctx, v75);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v164 = C::vstate_from_type(ctx, v11);
                                            let v634 =
                                                constructor_rv_vand_vx(ctx, v191, v192, v163, v164);
                                            let v635 = constructor_output_vreg(ctx, v634);
                                            // Rule at src/isa/riscv64/lower.isle line 698.
                                            return Some(v635);
                                        }
                                    }
                                }
                                let v60 = C::def_inst(ctx, v38.1);
                                if let Some(v61) = v60 {
                                    let v62 = &C::inst_data(ctx, v61);
                                    if let &InstructionData::Unary {
                                        opcode: ref v63,
                                        arg: v64,
                                    } = v62
                                    {
                                        if let &Opcode::Splat = v63 {
                                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                                            let v167 = constructor_put_in_xreg(ctx, v64);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v164 = C::vstate_from_type(ctx, v11);
                                            let v632 =
                                                constructor_rv_vand_vx(ctx, v161, v167, v163, v164);
                                            let v633 = constructor_output_vreg(ctx, v632);
                                            // Rule at src/isa/riscv64/lower.isle line 694.
                                            return Some(v633);
                                        }
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v628 = constructor_rv_vand_vv(ctx, v161, v162, v163, v164);
                            let v629 = constructor_output_vreg(ctx, v628);
                            // Rule at src/isa/riscv64/lower.isle line 691.
                            return Some(v629);
                        }
                        let v591 = C::has_zbb(ctx);
                        if v591 == true {
                            if v3 == I128 {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v71 = C::def_inst(ctx, v38.0);
                                if let Some(v72) = v71 {
                                    let v73 = &C::inst_data(ctx, v72);
                                    if let &InstructionData::Unary {
                                        opcode: ref v74,
                                        arg: v75,
                                    } = v73
                                    {
                                        if let &Opcode::Bnot = v74 {
                                            let v611 = C::put_in_regs(ctx, v38.1);
                                            let v612 = C::value_regs_get(ctx, v611, 0x0);
                                            let v613 = C::xreg_new(ctx, v612);
                                            let v614 = C::put_in_regs(ctx, v75);
                                            let v615 = C::value_regs_get(ctx, v614, 0x0);
                                            let v616 = C::xreg_new(ctx, v615);
                                            let v617 = constructor_rv_andn(ctx, v613, v616);
                                            let v144 = C::put_in_regs(ctx, v38.1);
                                            let v618 = C::value_regs_get(ctx, v144, 0x1);
                                            let v619 = C::xreg_new(ctx, v618);
                                            let v620 = C::put_in_regs(ctx, v75);
                                            let v621 = C::value_regs_get(ctx, v620, 0x1);
                                            let v622 = C::xreg_new(ctx, v621);
                                            let v623 = constructor_rv_andn(ctx, v619, v622);
                                            let v624 = C::xreg_to_reg(ctx, v617);
                                            let v625 = C::xreg_to_reg(ctx, v623);
                                            let v626 = C::value_regs(ctx, v624, v625);
                                            let v627 = C::output(ctx, v626);
                                            // Rule at src/isa/riscv64/lower.isle line 685.
                                            return Some(v627);
                                        }
                                    }
                                }
                                let v60 = C::def_inst(ctx, v38.1);
                                if let Some(v61) = v60 {
                                    let v62 = &C::inst_data(ctx, v61);
                                    if let &InstructionData::Unary {
                                        opcode: ref v63,
                                        arg: v64,
                                    } = v62
                                    {
                                        if let &Opcode::Bnot = v63 {
                                            let v136 = C::put_in_regs(ctx, v38.0);
                                            let v138 = C::value_regs_get(ctx, v136, 0x0);
                                            let v139 = C::xreg_new(ctx, v138);
                                            let v596 = C::put_in_regs(ctx, v64);
                                            let v597 = C::value_regs_get(ctx, v596, 0x0);
                                            let v598 = C::xreg_new(ctx, v597);
                                            let v599 = constructor_rv_andn(ctx, v139, v598);
                                            let v600 = C::put_in_regs(ctx, v38.0);
                                            let v601 = C::value_regs_get(ctx, v600, 0x1);
                                            let v602 = C::xreg_new(ctx, v601);
                                            let v603 = C::put_in_regs(ctx, v64);
                                            let v604 = C::value_regs_get(ctx, v603, 0x1);
                                            let v605 = C::xreg_new(ctx, v604);
                                            let v606 = constructor_rv_andn(ctx, v602, v605);
                                            let v607 = C::xreg_to_reg(ctx, v599);
                                            let v608 = C::xreg_to_reg(ctx, v606);
                                            let v609 = C::value_regs(ctx, v607, v608);
                                            let v610 = C::output(ctx, v609);
                                            // Rule at src/isa/riscv64/lower.isle line 679.
                                            return Some(v610);
                                        }
                                    }
                                }
                            }
                            let v575 = C::fits_in_64(ctx, v3);
                            if let Some(v576) = v575 {
                                let v577 = C::ty_int(ctx, v576);
                                if let Some(v578) = v577 {
                                    let v38 = C::unpack_value_array_2(ctx, v37);
                                    let v71 = C::def_inst(ctx, v38.0);
                                    if let Some(v72) = v71 {
                                        let v73 = &C::inst_data(ctx, v72);
                                        if let &InstructionData::Unary {
                                            opcode: ref v74,
                                            arg: v75,
                                        } = v73
                                        {
                                            if let &Opcode::Bnot = v74 {
                                                let v581 = constructor_put_in_xreg(ctx, v38.1);
                                                let v192 = constructor_put_in_xreg(ctx, v75);
                                                let v594 = constructor_rv_andn(ctx, v581, v192);
                                                let v595 = constructor_output_xreg(ctx, v594);
                                                // Rule at src/isa/riscv64/lower.isle line 675.
                                                return Some(v595);
                                            }
                                        }
                                    }
                                    let v60 = C::def_inst(ctx, v38.1);
                                    if let Some(v61) = v60 {
                                        let v62 = &C::inst_data(ctx, v61);
                                        if let &InstructionData::Unary {
                                            opcode: ref v63,
                                            arg: v64,
                                        } = v62
                                        {
                                            if let &Opcode::Bnot = v63 {
                                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                                let v167 = constructor_put_in_xreg(ctx, v64);
                                                let v592 = constructor_rv_andn(ctx, v41, v167);
                                                let v593 = constructor_output_xreg(ctx, v592);
                                                // Rule at src/isa/riscv64/lower.isle line 671.
                                                return Some(v593);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v584 = C::ty_scalar_float(ctx, v3);
                        if let Some(v585) = v584 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v587 = constructor_put_in_freg(ctx, v38.0);
                            let v588 = constructor_put_in_freg(ctx, v38.1);
                            let v589 = constructor_lower_float_binary(
                                ctx,
                                &AluOPRRR::And,
                                v587,
                                v588,
                                v585,
                            );
                            let v590 = constructor_output_freg(ctx, v589);
                            // Rule at src/isa/riscv64/lower.isle line 664.
                            return Some(v590);
                        }
                        let v575 = C::fits_in_64(ctx, v3);
                        if let Some(v576) = v575 {
                            let v577 = C::ty_int(ctx, v576);
                            if let Some(v578) = v577 {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v53 = C::i64_from_iconst(ctx, v38.0);
                                if let Some(v54) = v53 {
                                    let v55 = C::imm12_from_i64(ctx, v54);
                                    if let Some(v56) = v55 {
                                        let v581 = constructor_put_in_xreg(ctx, v38.1);
                                        let v582 = constructor_rv_andi(ctx, v581, v56);
                                        let v583 = constructor_output_xreg(ctx, v582);
                                        // Rule at src/isa/riscv64/lower.isle line 661.
                                        return Some(v583);
                                    }
                                }
                                let v45 = C::i64_from_iconst(ctx, v38.1);
                                if let Some(v46) = v45 {
                                    let v47 = C::imm12_from_i64(ctx, v46);
                                    if let Some(v48) = v47 {
                                        let v41 = constructor_put_in_xreg(ctx, v38.0);
                                        let v579 = constructor_rv_andi(ctx, v41, v48);
                                        let v580 = constructor_output_xreg(ctx, v579);
                                        // Rule at src/isa/riscv64/lower.isle line 658.
                                        return Some(v580);
                                    }
                                }
                            }
                        }
                        let v445 = C::ty_int(ctx, v3);
                        if let Some(v446) = v445 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v136 = C::put_in_regs(ctx, v38.0);
                            let v398 = C::put_in_regs(ctx, v38.1);
                            let v573 = constructor_gen_and(ctx, v446, v136, v398);
                            let v574 = C::output(ctx, v573);
                            // Rule at src/isa/riscv64/lower.isle line 654.
                            return Some(v574);
                        }
                    }
                }
                &Opcode::Bor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v207 = constructor_replicated_imm5(ctx, v38.0);
                            if let Some(v208) = v207 {
                                let v191 = constructor_put_in_vreg(ctx, v38.1);
                                let v163 = &constructor_unmasked(ctx);
                                let v164 = C::vstate_from_type(ctx, v11);
                                let v673 = constructor_rv_vor_vi(ctx, v191, v208, v163, v164);
                                let v674 = constructor_output_vreg(ctx, v673);
                                // Rule at src/isa/riscv64/lower.isle line 764.
                                return Some(v674);
                            }
                            let v187 = constructor_replicated_imm5(ctx, v38.1);
                            if let Some(v188) = v187 {
                                let v161 = constructor_put_in_vreg(ctx, v38.0);
                                let v163 = &constructor_unmasked(ctx);
                                let v164 = C::vstate_from_type(ctx, v11);
                                let v671 = constructor_rv_vor_vi(ctx, v161, v188, v163, v164);
                                let v672 = constructor_output_vreg(ctx, v671);
                                // Rule at src/isa/riscv64/lower.isle line 760.
                                return Some(v672);
                            }
                            let v630 = C::ty_vector_not_float(ctx, v11);
                            if let Some(v631) = v630 {
                                let v71 = C::def_inst(ctx, v38.0);
                                if let Some(v72) = v71 {
                                    let v73 = &C::inst_data(ctx, v72);
                                    if let &InstructionData::Unary {
                                        opcode: ref v74,
                                        arg: v75,
                                    } = v73
                                    {
                                        if let &Opcode::Splat = v74 {
                                            let v191 = constructor_put_in_vreg(ctx, v38.1);
                                            let v192 = constructor_put_in_xreg(ctx, v75);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v164 = C::vstate_from_type(ctx, v11);
                                            let v669 =
                                                constructor_rv_vor_vx(ctx, v191, v192, v163, v164);
                                            let v670 = constructor_output_vreg(ctx, v669);
                                            // Rule at src/isa/riscv64/lower.isle line 756.
                                            return Some(v670);
                                        }
                                    }
                                }
                                let v60 = C::def_inst(ctx, v38.1);
                                if let Some(v61) = v60 {
                                    let v62 = &C::inst_data(ctx, v61);
                                    if let &InstructionData::Unary {
                                        opcode: ref v63,
                                        arg: v64,
                                    } = v62
                                    {
                                        if let &Opcode::Splat = v63 {
                                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                                            let v167 = constructor_put_in_xreg(ctx, v64);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v164 = C::vstate_from_type(ctx, v11);
                                            let v667 =
                                                constructor_rv_vor_vx(ctx, v161, v167, v163, v164);
                                            let v668 = constructor_output_vreg(ctx, v667);
                                            // Rule at src/isa/riscv64/lower.isle line 752.
                                            return Some(v668);
                                        }
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v665 = constructor_rv_vor_vv(ctx, v161, v162, v163, v164);
                            let v666 = constructor_output_vreg(ctx, v665);
                            // Rule at src/isa/riscv64/lower.isle line 749.
                            return Some(v666);
                        }
                        let v591 = C::has_zbb(ctx);
                        if v591 == true {
                            if v3 == I128 {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v71 = C::def_inst(ctx, v38.0);
                                if let Some(v72) = v71 {
                                    let v73 = &C::inst_data(ctx, v72);
                                    if let &InstructionData::Unary {
                                        opcode: ref v74,
                                        arg: v75,
                                    } = v73
                                    {
                                        if let &Opcode::Bnot = v74 {
                                            let v611 = C::put_in_regs(ctx, v38.1);
                                            let v612 = C::value_regs_get(ctx, v611, 0x0);
                                            let v613 = C::xreg_new(ctx, v612);
                                            let v614 = C::put_in_regs(ctx, v75);
                                            let v615 = C::value_regs_get(ctx, v614, 0x0);
                                            let v616 = C::xreg_new(ctx, v615);
                                            let v659 = constructor_rv_orn(ctx, v613, v616);
                                            let v144 = C::put_in_regs(ctx, v38.1);
                                            let v618 = C::value_regs_get(ctx, v144, 0x1);
                                            let v619 = C::xreg_new(ctx, v618);
                                            let v620 = C::put_in_regs(ctx, v75);
                                            let v621 = C::value_regs_get(ctx, v620, 0x1);
                                            let v622 = C::xreg_new(ctx, v621);
                                            let v660 = constructor_rv_orn(ctx, v619, v622);
                                            let v661 = C::xreg_to_reg(ctx, v659);
                                            let v662 = C::xreg_to_reg(ctx, v660);
                                            let v663 = C::value_regs(ctx, v661, v662);
                                            let v664 = C::output(ctx, v663);
                                            // Rule at src/isa/riscv64/lower.isle line 743.
                                            return Some(v664);
                                        }
                                    }
                                }
                                let v60 = C::def_inst(ctx, v38.1);
                                if let Some(v61) = v60 {
                                    let v62 = &C::inst_data(ctx, v61);
                                    if let &InstructionData::Unary {
                                        opcode: ref v63,
                                        arg: v64,
                                    } = v62
                                    {
                                        if let &Opcode::Bnot = v63 {
                                            let v136 = C::put_in_regs(ctx, v38.0);
                                            let v138 = C::value_regs_get(ctx, v136, 0x0);
                                            let v139 = C::xreg_new(ctx, v138);
                                            let v596 = C::put_in_regs(ctx, v64);
                                            let v597 = C::value_regs_get(ctx, v596, 0x0);
                                            let v598 = C::xreg_new(ctx, v597);
                                            let v653 = constructor_rv_orn(ctx, v139, v598);
                                            let v600 = C::put_in_regs(ctx, v38.0);
                                            let v601 = C::value_regs_get(ctx, v600, 0x1);
                                            let v602 = C::xreg_new(ctx, v601);
                                            let v603 = C::put_in_regs(ctx, v64);
                                            let v604 = C::value_regs_get(ctx, v603, 0x1);
                                            let v605 = C::xreg_new(ctx, v604);
                                            let v654 = constructor_rv_orn(ctx, v602, v605);
                                            let v655 = C::xreg_to_reg(ctx, v653);
                                            let v656 = C::xreg_to_reg(ctx, v654);
                                            let v657 = C::value_regs(ctx, v655, v656);
                                            let v658 = C::output(ctx, v657);
                                            // Rule at src/isa/riscv64/lower.isle line 737.
                                            return Some(v658);
                                        }
                                    }
                                }
                            }
                            let v575 = C::fits_in_64(ctx, v3);
                            if let Some(v576) = v575 {
                                let v577 = C::ty_int(ctx, v576);
                                if let Some(v578) = v577 {
                                    let v38 = C::unpack_value_array_2(ctx, v37);
                                    let v71 = C::def_inst(ctx, v38.0);
                                    if let Some(v72) = v71 {
                                        let v73 = &C::inst_data(ctx, v72);
                                        if let &InstructionData::Unary {
                                            opcode: ref v74,
                                            arg: v75,
                                        } = v73
                                        {
                                            if let &Opcode::Bnot = v74 {
                                                let v581 = constructor_put_in_xreg(ctx, v38.1);
                                                let v192 = constructor_put_in_xreg(ctx, v75);
                                                let v651 = constructor_rv_orn(ctx, v581, v192);
                                                let v652 = constructor_output_xreg(ctx, v651);
                                                // Rule at src/isa/riscv64/lower.isle line 733.
                                                return Some(v652);
                                            }
                                        }
                                    }
                                    let v60 = C::def_inst(ctx, v38.1);
                                    if let Some(v61) = v60 {
                                        let v62 = &C::inst_data(ctx, v61);
                                        if let &InstructionData::Unary {
                                            opcode: ref v63,
                                            arg: v64,
                                        } = v62
                                        {
                                            if let &Opcode::Bnot = v63 {
                                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                                let v167 = constructor_put_in_xreg(ctx, v64);
                                                let v649 = constructor_rv_orn(ctx, v41, v167);
                                                let v650 = constructor_output_xreg(ctx, v649);
                                                // Rule at src/isa/riscv64/lower.isle line 729.
                                                return Some(v650);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v584 = C::ty_scalar_float(ctx, v3);
                        if let Some(v585) = v584 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v587 = constructor_put_in_freg(ctx, v38.0);
                            let v588 = constructor_put_in_freg(ctx, v38.1);
                            let v647 = constructor_lower_float_binary(
                                ctx,
                                &AluOPRRR::Or,
                                v587,
                                v588,
                                v585,
                            );
                            let v648 = constructor_output_freg(ctx, v647);
                            // Rule at src/isa/riscv64/lower.isle line 722.
                            return Some(v648);
                        }
                        let v575 = C::fits_in_64(ctx, v3);
                        if let Some(v576) = v575 {
                            let v577 = C::ty_int(ctx, v576);
                            if let Some(v578) = v577 {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v53 = C::i64_from_iconst(ctx, v38.0);
                                if let Some(v54) = v53 {
                                    let v55 = C::imm12_from_i64(ctx, v54);
                                    if let Some(v56) = v55 {
                                        let v581 = constructor_put_in_xreg(ctx, v38.1);
                                        let v644 = constructor_rv_ori(ctx, v581, v56);
                                        let v645 = constructor_output_xreg(ctx, v644);
                                        // Rule at src/isa/riscv64/lower.isle line 719.
                                        return Some(v645);
                                    }
                                }
                                let v45 = C::i64_from_iconst(ctx, v38.1);
                                if let Some(v46) = v45 {
                                    let v47 = C::imm12_from_i64(ctx, v46);
                                    if let Some(v48) = v47 {
                                        let v41 = constructor_put_in_xreg(ctx, v38.0);
                                        let v642 = constructor_rv_ori(ctx, v41, v48);
                                        let v643 = constructor_output_xreg(ctx, v642);
                                        // Rule at src/isa/riscv64/lower.isle line 716.
                                        return Some(v643);
                                    }
                                }
                            }
                        }
                        let v445 = C::ty_int(ctx, v3);
                        if let Some(v446) = v445 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v136 = C::put_in_regs(ctx, v38.0);
                            let v398 = C::put_in_regs(ctx, v38.1);
                            let v640 = constructor_gen_or(ctx, v446, v136, v398);
                            let v641 = C::output(ctx, v640);
                            // Rule at src/isa/riscv64/lower.isle line 712.
                            return Some(v641);
                        }
                    }
                }
                &Opcode::Bxor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v207 = constructor_replicated_imm5(ctx, v38.0);
                            if let Some(v208) = v207 {
                                let v191 = constructor_put_in_vreg(ctx, v38.1);
                                let v163 = &constructor_unmasked(ctx);
                                let v164 = C::vstate_from_type(ctx, v11);
                                let v694 = constructor_rv_vxor_vi(ctx, v191, v208, v163, v164);
                                let v695 = constructor_output_vreg(ctx, v694);
                                // Rule at src/isa/riscv64/lower.isle line 801.
                                return Some(v695);
                            }
                            let v187 = constructor_replicated_imm5(ctx, v38.1);
                            if let Some(v188) = v187 {
                                let v161 = constructor_put_in_vreg(ctx, v38.0);
                                let v163 = &constructor_unmasked(ctx);
                                let v164 = C::vstate_from_type(ctx, v11);
                                let v692 = constructor_rv_vxor_vi(ctx, v161, v188, v163, v164);
                                let v693 = constructor_output_vreg(ctx, v692);
                                // Rule at src/isa/riscv64/lower.isle line 797.
                                return Some(v693);
                            }
                            let v630 = C::ty_vector_not_float(ctx, v11);
                            if let Some(v631) = v630 {
                                let v71 = C::def_inst(ctx, v38.0);
                                if let Some(v72) = v71 {
                                    let v73 = &C::inst_data(ctx, v72);
                                    if let &InstructionData::Unary {
                                        opcode: ref v74,
                                        arg: v75,
                                    } = v73
                                    {
                                        if let &Opcode::Splat = v74 {
                                            let v191 = constructor_put_in_vreg(ctx, v38.1);
                                            let v192 = constructor_put_in_xreg(ctx, v75);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v164 = C::vstate_from_type(ctx, v11);
                                            let v690 =
                                                constructor_rv_vxor_vx(ctx, v191, v192, v163, v164);
                                            let v691 = constructor_output_vreg(ctx, v690);
                                            // Rule at src/isa/riscv64/lower.isle line 793.
                                            return Some(v691);
                                        }
                                    }
                                }
                                let v60 = C::def_inst(ctx, v38.1);
                                if let Some(v61) = v60 {
                                    let v62 = &C::inst_data(ctx, v61);
                                    if let &InstructionData::Unary {
                                        opcode: ref v63,
                                        arg: v64,
                                    } = v62
                                    {
                                        if let &Opcode::Splat = v63 {
                                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                                            let v167 = constructor_put_in_xreg(ctx, v64);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v164 = C::vstate_from_type(ctx, v11);
                                            let v688 =
                                                constructor_rv_vxor_vx(ctx, v161, v167, v163, v164);
                                            let v689 = constructor_output_vreg(ctx, v688);
                                            // Rule at src/isa/riscv64/lower.isle line 789.
                                            return Some(v689);
                                        }
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v686 = constructor_rv_vxor_vv(ctx, v161, v162, v163, v164);
                            let v687 = constructor_output_vreg(ctx, v686);
                            // Rule at src/isa/riscv64/lower.isle line 786.
                            return Some(v687);
                        }
                        let v584 = C::ty_scalar_float(ctx, v3);
                        if let Some(v585) = v584 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v587 = constructor_put_in_freg(ctx, v38.0);
                            let v588 = constructor_put_in_freg(ctx, v38.1);
                            let v684 = constructor_lower_float_binary(
                                ctx,
                                &AluOPRRR::Xor,
                                v587,
                                v588,
                                v585,
                            );
                            let v685 = constructor_output_freg(ctx, v684);
                            // Rule at src/isa/riscv64/lower.isle line 783.
                            return Some(v685);
                        }
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v136 = C::put_in_regs(ctx, v38.0);
                            let v398 = C::put_in_regs(ctx, v38.1);
                            let v682 =
                                constructor_lower_b128_binary(ctx, &AluOPRRR::Xor, v136, v398);
                            let v683 = C::output(ctx, v682);
                            // Rule at src/isa/riscv64/lower.isle line 780.
                            return Some(v683);
                        }
                        let v575 = C::fits_in_64(ctx, v3);
                        if let Some(v576) = v575 {
                            let v577 = C::ty_int(ctx, v576);
                            if let Some(v578) = v577 {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v53 = C::i64_from_iconst(ctx, v38.0);
                                if let Some(v54) = v53 {
                                    let v55 = C::imm12_from_i64(ctx, v54);
                                    if let Some(v56) = v55 {
                                        let v581 = constructor_put_in_xreg(ctx, v38.1);
                                        let v679 = constructor_rv_xori(ctx, v581, v56);
                                        let v680 = constructor_output_xreg(ctx, v679);
                                        // Rule at src/isa/riscv64/lower.isle line 777.
                                        return Some(v680);
                                    }
                                }
                                let v45 = C::i64_from_iconst(ctx, v38.1);
                                if let Some(v46) = v45 {
                                    let v47 = C::imm12_from_i64(ctx, v46);
                                    if let Some(v48) = v47 {
                                        let v41 = constructor_put_in_xreg(ctx, v38.0);
                                        let v677 = constructor_rv_xori(ctx, v41, v48);
                                        let v678 = constructor_output_xreg(ctx, v677);
                                        // Rule at src/isa/riscv64/lower.isle line 774.
                                        return Some(v678);
                                    }
                                }
                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                let v42 = constructor_put_in_xreg(ctx, v38.1);
                                let v675 = constructor_rv_xor(ctx, v41, v42);
                                let v676 = constructor_output_xreg(ctx, v675);
                                // Rule at src/isa/riscv64/lower.isle line 770.
                                return Some(v676);
                            }
                        }
                    }
                }
                &Opcode::Rotl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v136 = C::put_in_regs(ctx, v38.0);
                            let v398 = C::put_in_regs(ctx, v38.1);
                            let v1126 = constructor_lower_i128_rotl(ctx, v136, v398);
                            let v1127 = C::output(ctx, v1126);
                            // Rule at src/isa/riscv64/lower.isle line 1250.
                            return Some(v1127);
                        }
                        let v575 = C::fits_in_64(ctx, v3);
                        if let Some(v576) = v575 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v492 = constructor_zext(ctx, v38.0);
                            let v398 = C::put_in_regs(ctx, v38.1);
                            let v959 = C::value_regs_get(ctx, v398, 0x0);
                            let v960 = C::xreg_new(ctx, v959);
                            let v1124 = constructor_lower_rotl(ctx, v576, v492, v960);
                            let v1125 = constructor_output_xreg(ctx, v1124);
                            // Rule at src/isa/riscv64/lower.isle line 1247.
                            return Some(v1125);
                        }
                    }
                }
                &Opcode::Rotr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v136 = C::put_in_regs(ctx, v38.0);
                            let v398 = C::put_in_regs(ctx, v38.1);
                            let v1130 = constructor_lower_i128_rotr(ctx, v136, v398);
                            let v1131 = C::output(ctx, v1130);
                            // Rule at src/isa/riscv64/lower.isle line 1257.
                            return Some(v1131);
                        }
                        let v575 = C::fits_in_64(ctx, v3);
                        if let Some(v576) = v575 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v492 = constructor_zext(ctx, v38.0);
                            let v398 = C::put_in_regs(ctx, v38.1);
                            let v959 = C::value_regs_get(ctx, v398, 0x0);
                            let v960 = C::xreg_new(ctx, v959);
                            let v1128 = constructor_lower_rotr(ctx, v576, v492, v960);
                            let v1129 = constructor_output_xreg(ctx, v1128);
                            // Rule at src/isa/riscv64/lower.isle line 1254.
                            return Some(v1129);
                        }
                    }
                }
                &Opcode::Ishl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v970 = C::maybe_uextend(ctx, v38.1);
                            if let Some(v971) = v970 {
                                let v1027 = C::def_inst(ctx, v971);
                                if let Some(v1028) = v1027 {
                                    let v1029 = &C::inst_data(ctx, v1028);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v1030,
                                        imm: v1031,
                                    } = v1029
                                    {
                                        if let &Opcode::Iconst = v1030 {
                                            let v1032 = C::u64_from_imm64(ctx, v1031);
                                            let v1033 = C::uimm5_from_u64(ctx, v1032);
                                            if let Some(v1034) = v1033 {
                                                let v161 = constructor_put_in_vreg(ctx, v38.0);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v164 = C::vstate_from_type(ctx, v11);
                                                let v1035 = constructor_rv_vsll_vi(
                                                    ctx, v161, v1034, v163, v164,
                                                );
                                                let v1036 = constructor_output_vreg(ctx, v1035);
                                                // Rule at src/isa/riscv64/lower.isle line 1127.
                                                return Some(v1036);
                                            }
                                        }
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v398 = C::put_in_regs(ctx, v38.1);
                            let v959 = C::value_regs_get(ctx, v398, 0x0);
                            let v960 = C::xreg_new(ctx, v959);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1025 = constructor_rv_vsll_vx(ctx, v161, v960, v163, v164);
                            let v1026 = constructor_output_vreg(ctx, v1025);
                            // Rule at src/isa/riscv64/lower.isle line 1124.
                            return Some(v1026);
                        }
                        match v3 {
                            I64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v970 = C::maybe_uextend(ctx, v38.1);
                                if let Some(v971) = v970 {
                                    let v972 = C::i64_from_iconst(ctx, v971);
                                    if let Some(v973) = v972 {
                                        let v974 = C::imm12_from_i64(ctx, v973);
                                        if let Some(v975) = v974 {
                                            let v66 = C::has_zba(ctx);
                                            if v66 == true {
                                                let v71 = C::def_inst(ctx, v38.0);
                                                if let Some(v72) = v71 {
                                                    let v73 = &C::inst_data(ctx, v72);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v74,
                                                        arg: v75,
                                                    } = v73
                                                    {
                                                        if let &Opcode::Uextend = v74 {
                                                            let v76 = C::value_type(ctx, v75);
                                                            if v76 == I32 {
                                                                let v77 = constructor_put_in_xreg(
                                                                    ctx, v75,
                                                                );
                                                                let v984 = constructor_rv_slliuw(
                                                                    ctx, v77, v975,
                                                                );
                                                                let v985 = constructor_output_xreg(
                                                                    ctx, v984,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 1096.
                                                                return Some(v985);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                                            let v980 = constructor_shift_mask(ctx, v3);
                                            let v981 = C::imm12_and(ctx, v975, v980);
                                            let v982 = constructor_rv_slli(ctx, v41, v981);
                                            let v983 = constructor_output_xreg(ctx, v982);
                                            // Rule at src/isa/riscv64/lower.isle line 1092.
                                            return Some(v983);
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v611 = C::put_in_regs(ctx, v38.1);
                                let v612 = C::value_regs_get(ctx, v611, 0x0);
                                let v613 = C::xreg_new(ctx, v612);
                                let v987 = C::gen_shamt(ctx, I128, v613);
                                let v988 = C::value_regs_get(ctx, v987, 0x0);
                                let v989 = C::xreg_new(ctx, v988);
                                let v990 = C::value_regs_get(ctx, v987, 0x1);
                                let v991 = C::xreg_new(ctx, v990);
                                let v992 = C::put_in_regs(ctx, v38.0);
                                let v993 = C::value_regs_get(ctx, v992, 0x0);
                                let v994 = C::xreg_new(ctx, v993);
                                let v995 = constructor_rv_sll(ctx, v994, v989);
                                let v996 = C::put_in_regs(ctx, v38.0);
                                let v997 = C::value_regs_get(ctx, v996, 0x0);
                                let v998 = C::xreg_new(ctx, v997);
                                let v999 = constructor_rv_srl(ctx, v998, v991);
                                let v1000 = constructor_cmp_eqz(ctx, v989);
                                let v1001 = C::zero_reg(ctx);
                                let v1002 = C::xreg_new(ctx, v1001);
                                let v1003 = constructor_gen_select_xreg(ctx, v1000, v1002, v999);
                                let v1004 = C::put_in_regs(ctx, v38.0);
                                let v1005 = C::value_regs_get(ctx, v1004, 0x1);
                                let v1006 = C::xreg_new(ctx, v1005);
                                let v1007 = constructor_rv_sll(ctx, v1006, v989);
                                let v1008 = constructor_rv_or(ctx, v1003, v1007);
                                let v1009 = constructor_imm(ctx, I64, 0x40);
                                let v1010 = C::xreg_new(ctx, v1009);
                                let v1011 = C::put_in_regs(ctx, v38.1);
                                let v1012 = C::value_regs_get(ctx, v1011, 0x0);
                                let v1013 = C::xreg_new(ctx, v1012);
                                let v1015 = C::imm12_const(ctx, 0x7F);
                                let v1016 = constructor_rv_andi(ctx, v1013, v1015);
                                let v1017 = constructor_cmp_geu(ctx, v1016, v1010);
                                let v1018 = C::zero_reg(ctx);
                                let v1019 = C::xreg_to_reg(ctx, v995);
                                let v1020 = C::value_regs(ctx, v1018, v1019);
                                let v1021 = C::xreg_to_reg(ctx, v1008);
                                let v1022 = C::value_regs(ctx, v1019, v1021);
                                let v1023 = constructor_gen_select_regs(ctx, v1017, v1020, v1022);
                                let v1024 = C::output(ctx, v1023);
                                // Rule at src/isa/riscv64/lower.isle line 1101.
                                return Some(v1024);
                            }
                            _ => {}
                        }
                        let v968 = C::int_fits_in_32(ctx, v3);
                        if let Some(v969) = v968 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v970 = C::maybe_uextend(ctx, v38.1);
                            if let Some(v971) = v970 {
                                let v972 = C::i64_from_iconst(ctx, v971);
                                if let Some(v973) = v972 {
                                    let v974 = C::imm12_from_i64(ctx, v973);
                                    if let Some(v975) = v974 {
                                        let v41 = constructor_put_in_xreg(ctx, v38.0);
                                        let v976 = constructor_shift_mask(ctx, v969);
                                        let v977 = C::imm12_and(ctx, v975, v976);
                                        let v978 = constructor_rv_slliw(ctx, v41, v977);
                                        let v979 = constructor_output_xreg(ctx, v978);
                                        // Rule at src/isa/riscv64/lower.isle line 1087.
                                        return Some(v979);
                                    }
                                }
                            }
                        }
                        match v3 {
                            I32 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                let v398 = C::put_in_regs(ctx, v38.1);
                                let v959 = C::value_regs_get(ctx, v398, 0x0);
                                let v960 = C::xreg_new(ctx, v959);
                                let v964 = constructor_rv_sllw(ctx, v41, v960);
                                let v965 = constructor_output_xreg(ctx, v964);
                                // Rule at src/isa/riscv64/lower.isle line 1079.
                                return Some(v965);
                            }
                            I64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                let v398 = C::put_in_regs(ctx, v38.1);
                                let v959 = C::value_regs_get(ctx, v398, 0x0);
                                let v960 = C::xreg_new(ctx, v959);
                                let v966 = constructor_rv_sll(ctx, v41, v960);
                                let v967 = constructor_output_xreg(ctx, v966);
                                // Rule at src/isa/riscv64/lower.isle line 1083.
                                return Some(v967);
                            }
                            _ => {}
                        }
                        let v445 = C::ty_int(ctx, v3);
                        if let Some(v446) = v445 {
                            let v954 = C::ty_8_or_16(ctx, v446);
                            if let Some(v955) = v954 {
                                let v956 = constructor_shift_mask(ctx, v955);
                                let v957 = constructor_u64_to_imm12(ctx, v956);
                                if let Some(v958) = v957 {
                                    let v38 = C::unpack_value_array_2(ctx, v37);
                                    let v41 = constructor_put_in_xreg(ctx, v38.0);
                                    let v398 = C::put_in_regs(ctx, v38.1);
                                    let v959 = C::value_regs_get(ctx, v398, 0x0);
                                    let v960 = C::xreg_new(ctx, v959);
                                    let v961 = constructor_rv_andi(ctx, v960, v958);
                                    let v962 = constructor_rv_sllw(ctx, v41, v961);
                                    let v963 = constructor_output_xreg(ctx, v962);
                                    // Rule at src/isa/riscv64/lower.isle line 1074.
                                    return Some(v963);
                                }
                            }
                        }
                    }
                }
                &Opcode::Ushr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v970 = C::maybe_uextend(ctx, v38.1);
                            if let Some(v971) = v970 {
                                let v1027 = C::def_inst(ctx, v971);
                                if let Some(v1028) = v1027 {
                                    let v1029 = &C::inst_data(ctx, v1028);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v1030,
                                        imm: v1031,
                                    } = v1029
                                    {
                                        if let &Opcode::Iconst = v1030 {
                                            let v1032 = C::u64_from_imm64(ctx, v1031);
                                            let v1033 = C::uimm5_from_u64(ctx, v1032);
                                            if let Some(v1034) = v1033 {
                                                let v161 = constructor_put_in_vreg(ctx, v38.0);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v164 = C::vstate_from_type(ctx, v11);
                                                let v1081 = constructor_rv_vsrl_vi(
                                                    ctx, v161, v1034, v163, v164,
                                                );
                                                let v1082 = constructor_output_vreg(ctx, v1081);
                                                // Rule at src/isa/riscv64/lower.isle line 1182.
                                                return Some(v1082);
                                            }
                                        }
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v398 = C::put_in_regs(ctx, v38.1);
                            let v959 = C::value_regs_get(ctx, v398, 0x0);
                            let v960 = C::xreg_new(ctx, v959);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1079 = constructor_rv_vsrl_vx(ctx, v161, v960, v163, v164);
                            let v1080 = constructor_output_vreg(ctx, v1079);
                            // Rule at src/isa/riscv64/lower.isle line 1179.
                            return Some(v1080);
                        }
                        match v3 {
                            I32 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v970 = C::maybe_uextend(ctx, v38.1);
                                if let Some(v971) = v970 {
                                    let v972 = C::i64_from_iconst(ctx, v971);
                                    if let Some(v973) = v972 {
                                        let v974 = C::imm12_from_i64(ctx, v973);
                                        if let Some(v975) = v974 {
                                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                                            let v1052 = constructor_rv_srliw(ctx, v41, v975);
                                            let v1053 = constructor_output_xreg(ctx, v1052);
                                            // Rule at src/isa/riscv64/lower.isle line 1150.
                                            return Some(v1053);
                                        }
                                    }
                                }
                            }
                            I64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v970 = C::maybe_uextend(ctx, v38.1);
                                if let Some(v971) = v970 {
                                    let v972 = C::i64_from_iconst(ctx, v971);
                                    if let Some(v973) = v972 {
                                        let v974 = C::imm12_from_i64(ctx, v973);
                                        if let Some(v975) = v974 {
                                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                                            let v1054 = constructor_rv_srli(ctx, v41, v975);
                                            let v1055 = constructor_output_xreg(ctx, v1054);
                                            // Rule at src/isa/riscv64/lower.isle line 1153.
                                            return Some(v1055);
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v611 = C::put_in_regs(ctx, v38.1);
                                let v612 = C::value_regs_get(ctx, v611, 0x0);
                                let v613 = C::xreg_new(ctx, v612);
                                let v987 = C::gen_shamt(ctx, I128, v613);
                                let v988 = C::value_regs_get(ctx, v987, 0x0);
                                let v989 = C::xreg_new(ctx, v988);
                                let v990 = C::value_regs_get(ctx, v987, 0x1);
                                let v991 = C::xreg_new(ctx, v990);
                                let v992 = C::put_in_regs(ctx, v38.0);
                                let v1056 = C::value_regs_get(ctx, v992, 0x1);
                                let v1057 = C::xreg_new(ctx, v1056);
                                let v1058 = constructor_rv_sll(ctx, v1057, v991);
                                let v1059 = constructor_cmp_eqz(ctx, v989);
                                let v469 = C::zero_reg(ctx);
                                let v470 = C::xreg_new(ctx, v469);
                                let v1060 = constructor_gen_select_xreg(ctx, v1059, v470, v1058);
                                let v1061 = C::put_in_regs(ctx, v38.0);
                                let v1062 = C::value_regs_get(ctx, v1061, 0x0);
                                let v1063 = C::xreg_new(ctx, v1062);
                                let v1064 = constructor_rv_srl(ctx, v1063, v989);
                                let v1065 = constructor_rv_or(ctx, v1060, v1064);
                                let v1066 = constructor_imm(ctx, I64, 0x40);
                                let v1067 = C::xreg_new(ctx, v1066);
                                let v1068 = C::put_in_regs(ctx, v38.0);
                                let v1069 = C::value_regs_get(ctx, v1068, 0x1);
                                let v1070 = C::xreg_new(ctx, v1069);
                                let v1071 = constructor_rv_srl(ctx, v1070, v989);
                                let v1011 = C::put_in_regs(ctx, v38.1);
                                let v1012 = C::value_regs_get(ctx, v1011, 0x0);
                                let v1013 = C::xreg_new(ctx, v1012);
                                let v1015 = C::imm12_const(ctx, 0x7F);
                                let v1016 = constructor_rv_andi(ctx, v1013, v1015);
                                let v1072 = constructor_cmp_geu(ctx, v1016, v1067);
                                let v1018 = C::zero_reg(ctx);
                                let v1073 = C::xreg_to_reg(ctx, v1071);
                                let v1074 = C::value_regs(ctx, v1073, v1018);
                                let v1075 = C::xreg_to_reg(ctx, v1065);
                                let v1076 = C::value_regs(ctx, v1075, v1073);
                                let v1077 = constructor_gen_select_regs(ctx, v1072, v1074, v1076);
                                let v1078 = C::output(ctx, v1077);
                                // Rule at src/isa/riscv64/lower.isle line 1156.
                                return Some(v1078);
                            }
                            _ => {}
                        }
                        let v445 = C::ty_int(ctx, v3);
                        if let Some(v446) = v445 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v970 = C::maybe_uextend(ctx, v38.1);
                            if let Some(v971) = v970 {
                                let v972 = C::i64_from_iconst(ctx, v971);
                                if let Some(v973) = v972 {
                                    let v974 = C::imm12_from_i64(ctx, v973);
                                    if let Some(v975) = v974 {
                                        let v1037 = C::fits_in_16(ctx, v446);
                                        if let Some(v1038) = v1037 {
                                            let v492 = constructor_zext(ctx, v38.0);
                                            let v1039 = constructor_shift_mask(ctx, v1038);
                                            let v1049 = C::imm12_and(ctx, v975, v1039);
                                            let v1050 = constructor_rv_srliw(ctx, v492, v1049);
                                            let v1051 = constructor_output_xreg(ctx, v1050);
                                            // Rule at src/isa/riscv64/lower.isle line 1147.
                                            return Some(v1051);
                                        }
                                    }
                                }
                            }
                        }
                        match v3 {
                            I32 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                let v398 = C::put_in_regs(ctx, v38.1);
                                let v959 = C::value_regs_get(ctx, v398, 0x0);
                                let v960 = C::xreg_new(ctx, v959);
                                let v1045 = constructor_rv_srlw(ctx, v41, v960);
                                let v1046 = constructor_output_xreg(ctx, v1045);
                                // Rule at src/isa/riscv64/lower.isle line 1139.
                                return Some(v1046);
                            }
                            I64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                let v398 = C::put_in_regs(ctx, v38.1);
                                let v959 = C::value_regs_get(ctx, v398, 0x0);
                                let v960 = C::xreg_new(ctx, v959);
                                let v1047 = constructor_rv_srl(ctx, v41, v960);
                                let v1048 = constructor_output_xreg(ctx, v1047);
                                // Rule at src/isa/riscv64/lower.isle line 1143.
                                return Some(v1048);
                            }
                            _ => {}
                        }
                        if let Some(v446) = v445 {
                            let v1037 = C::fits_in_16(ctx, v446);
                            if let Some(v1038) = v1037 {
                                let v1039 = constructor_shift_mask(ctx, v1038);
                                let v1040 = constructor_u64_to_imm12(ctx, v1039);
                                if let Some(v1041) = v1040 {
                                    let v38 = C::unpack_value_array_2(ctx, v37);
                                    let v492 = constructor_zext(ctx, v38.0);
                                    let v398 = C::put_in_regs(ctx, v38.1);
                                    let v959 = C::value_regs_get(ctx, v398, 0x0);
                                    let v960 = C::xreg_new(ctx, v959);
                                    let v1042 = constructor_rv_andi(ctx, v960, v1041);
                                    let v1043 = constructor_rv_srlw(ctx, v492, v1042);
                                    let v1044 = constructor_output_xreg(ctx, v1043);
                                    // Rule at src/isa/riscv64/lower.isle line 1134.
                                    return Some(v1044);
                                }
                            }
                        }
                    }
                }
                &Opcode::Sshr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v970 = C::maybe_uextend(ctx, v38.1);
                            if let Some(v971) = v970 {
                                let v1027 = C::def_inst(ctx, v971);
                                if let Some(v1028) = v1027 {
                                    let v1029 = &C::inst_data(ctx, v1028);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v1030,
                                        imm: v1031,
                                    } = v1029
                                    {
                                        if let &Opcode::Iconst = v1030 {
                                            let v1032 = C::u64_from_imm64(ctx, v1031);
                                            let v1033 = C::uimm5_from_u64(ctx, v1032);
                                            if let Some(v1034) = v1033 {
                                                let v161 = constructor_put_in_vreg(ctx, v38.0);
                                                let v163 = &constructor_unmasked(ctx);
                                                let v164 = C::vstate_from_type(ctx, v11);
                                                let v1122 = constructor_rv_vsra_vi(
                                                    ctx, v161, v1034, v163, v164,
                                                );
                                                let v1123 = constructor_output_vreg(ctx, v1122);
                                                // Rule at src/isa/riscv64/lower.isle line 1242.
                                                return Some(v1123);
                                            }
                                        }
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v398 = C::put_in_regs(ctx, v38.1);
                            let v959 = C::value_regs_get(ctx, v398, 0x0);
                            let v960 = C::xreg_new(ctx, v959);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1120 = constructor_rv_vsra_vx(ctx, v161, v960, v163, v164);
                            let v1121 = constructor_output_vreg(ctx, v1120);
                            // Rule at src/isa/riscv64/lower.isle line 1239.
                            return Some(v1121);
                        }
                        match v3 {
                            I32 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v970 = C::maybe_uextend(ctx, v38.1);
                                if let Some(v971) = v970 {
                                    let v972 = C::i64_from_iconst(ctx, v971);
                                    if let Some(v973) = v972 {
                                        let v974 = C::imm12_from_i64(ctx, v973);
                                        if let Some(v975) = v974 {
                                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                                            let v1091 = constructor_rv_sraiw(ctx, v41, v975);
                                            let v1092 = constructor_output_xreg(ctx, v1091);
                                            // Rule at src/isa/riscv64/lower.isle line 1205.
                                            return Some(v1092);
                                        }
                                    }
                                }
                            }
                            I64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v970 = C::maybe_uextend(ctx, v38.1);
                                if let Some(v971) = v970 {
                                    let v972 = C::i64_from_iconst(ctx, v971);
                                    if let Some(v973) = v972 {
                                        let v974 = C::imm12_from_i64(ctx, v973);
                                        if let Some(v975) = v974 {
                                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                                            let v1093 = constructor_rv_srai(ctx, v41, v975);
                                            let v1094 = constructor_output_xreg(ctx, v1093);
                                            // Rule at src/isa/riscv64/lower.isle line 1208.
                                            return Some(v1094);
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v611 = C::put_in_regs(ctx, v38.1);
                                let v612 = C::value_regs_get(ctx, v611, 0x0);
                                let v613 = C::xreg_new(ctx, v612);
                                let v987 = C::gen_shamt(ctx, I128, v613);
                                let v988 = C::value_regs_get(ctx, v987, 0x0);
                                let v989 = C::xreg_new(ctx, v988);
                                let v990 = C::value_regs_get(ctx, v987, 0x1);
                                let v991 = C::xreg_new(ctx, v990);
                                let v992 = C::put_in_regs(ctx, v38.0);
                                let v1056 = C::value_regs_get(ctx, v992, 0x1);
                                let v1057 = C::xreg_new(ctx, v1056);
                                let v1058 = constructor_rv_sll(ctx, v1057, v991);
                                let v1059 = constructor_cmp_eqz(ctx, v989);
                                let v469 = C::zero_reg(ctx);
                                let v470 = C::xreg_new(ctx, v469);
                                let v1060 = constructor_gen_select_xreg(ctx, v1059, v470, v1058);
                                let v1061 = C::put_in_regs(ctx, v38.0);
                                let v1062 = C::value_regs_get(ctx, v1061, 0x0);
                                let v1063 = C::xreg_new(ctx, v1062);
                                let v1064 = constructor_rv_srl(ctx, v1063, v989);
                                let v1065 = constructor_rv_or(ctx, v1060, v1064);
                                let v1066 = constructor_imm(ctx, I64, 0x40);
                                let v1067 = C::xreg_new(ctx, v1066);
                                let v1068 = C::put_in_regs(ctx, v38.0);
                                let v1069 = C::value_regs_get(ctx, v1068, 0x1);
                                let v1070 = C::xreg_new(ctx, v1069);
                                let v1095 = constructor_rv_sra(ctx, v1070, v989);
                                let v1097 = C::i64_as_u64(ctx, -0x1);
                                let v1098 = constructor_imm(ctx, I64, v1097);
                                let v1099 = C::xreg_new(ctx, v1098);
                                let v1100 = C::put_in_regs(ctx, v38.0);
                                let v1101 = C::value_regs_get(ctx, v1100, 0x1);
                                let v1102 = C::xreg_new(ctx, v1101);
                                let v1103 = constructor_cmp_ltz(ctx, v1102);
                                let v1104 = C::zero_reg(ctx);
                                let v1105 = C::xreg_new(ctx, v1104);
                                let v1106 = constructor_gen_select_xreg(ctx, v1103, v1099, v1105);
                                let v1107 = constructor_imm(ctx, I64, 0x40);
                                let v1108 = C::xreg_new(ctx, v1107);
                                let v1109 = C::put_in_regs(ctx, v38.1);
                                let v1110 = C::value_regs_get(ctx, v1109, 0x0);
                                let v1111 = C::xreg_new(ctx, v1110);
                                let v1015 = C::imm12_const(ctx, 0x7F);
                                let v1112 = constructor_rv_andi(ctx, v1111, v1015);
                                let v1113 = constructor_cmp_geu(ctx, v1112, v1108);
                                let v1114 = C::xreg_to_reg(ctx, v1095);
                                let v1115 = C::xreg_to_reg(ctx, v1106);
                                let v1116 = C::value_regs(ctx, v1114, v1115);
                                let v1075 = C::xreg_to_reg(ctx, v1065);
                                let v1117 = C::value_regs(ctx, v1075, v1114);
                                let v1118 = constructor_gen_select_regs(ctx, v1113, v1116, v1117);
                                let v1119 = C::output(ctx, v1118);
                                // Rule at src/isa/riscv64/lower.isle line 1211.
                                return Some(v1119);
                            }
                            _ => {}
                        }
                        let v445 = C::ty_int(ctx, v3);
                        if let Some(v446) = v445 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v970 = C::maybe_uextend(ctx, v38.1);
                            if let Some(v971) = v970 {
                                let v972 = C::i64_from_iconst(ctx, v971);
                                if let Some(v973) = v972 {
                                    let v974 = C::imm12_from_i64(ctx, v973);
                                    if let Some(v975) = v974 {
                                        let v1037 = C::fits_in_16(ctx, v446);
                                        if let Some(v1038) = v1037 {
                                            let v482 = constructor_sext(ctx, v38.0);
                                            let v1039 = constructor_shift_mask(ctx, v1038);
                                            let v1049 = C::imm12_and(ctx, v975, v1039);
                                            let v1089 = constructor_rv_sraiw(ctx, v482, v1049);
                                            let v1090 = constructor_output_xreg(ctx, v1089);
                                            // Rule at src/isa/riscv64/lower.isle line 1202.
                                            return Some(v1090);
                                        }
                                    }
                                }
                            }
                        }
                        match v3 {
                            I32 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                let v398 = C::put_in_regs(ctx, v38.1);
                                let v959 = C::value_regs_get(ctx, v398, 0x0);
                                let v960 = C::xreg_new(ctx, v959);
                                let v1085 = constructor_rv_sraw(ctx, v41, v960);
                                let v1086 = constructor_output_xreg(ctx, v1085);
                                // Rule at src/isa/riscv64/lower.isle line 1194.
                                return Some(v1086);
                            }
                            I64 => {
                                let v38 = C::unpack_value_array_2(ctx, v37);
                                let v41 = constructor_put_in_xreg(ctx, v38.0);
                                let v398 = C::put_in_regs(ctx, v38.1);
                                let v959 = C::value_regs_get(ctx, v398, 0x0);
                                let v960 = C::xreg_new(ctx, v959);
                                let v1087 = constructor_rv_sra(ctx, v41, v960);
                                let v1088 = constructor_output_xreg(ctx, v1087);
                                // Rule at src/isa/riscv64/lower.isle line 1198.
                                return Some(v1088);
                            }
                            _ => {}
                        }
                        if let Some(v446) = v445 {
                            let v1037 = C::fits_in_16(ctx, v446);
                            if let Some(v1038) = v1037 {
                                let v1039 = constructor_shift_mask(ctx, v1038);
                                let v1040 = constructor_u64_to_imm12(ctx, v1039);
                                if let Some(v1041) = v1040 {
                                    let v38 = C::unpack_value_array_2(ctx, v37);
                                    let v482 = constructor_sext(ctx, v38.0);
                                    let v398 = C::put_in_regs(ctx, v38.1);
                                    let v959 = C::value_regs_get(ctx, v398, 0x0);
                                    let v960 = C::xreg_new(ctx, v959);
                                    let v1042 = constructor_rv_andi(ctx, v960, v1041);
                                    let v1083 = constructor_rv_sraw(ctx, v482, v1042);
                                    let v1084 = constructor_output_xreg(ctx, v1083);
                                    // Rule at src/isa/riscv64/lower.isle line 1189.
                                    return Some(v1084);
                                }
                            }
                        }
                    }
                }
                &Opcode::Fadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v191 = constructor_put_in_vreg(ctx, v38.1);
                                        let v1305 = constructor_put_in_freg(ctx, v75);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1306 =
                                            constructor_rv_vfadd_vf(ctx, v191, v1305, v163, v164);
                                        let v1307 = constructor_output_vreg(ctx, v1306);
                                        // Rule at src/isa/riscv64/lower.isle line 1465.
                                        return Some(v1307);
                                    }
                                }
                            }
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v1145 = constructor_put_in_freg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1303 =
                                            constructor_rv_vfadd_vf(ctx, v161, v1145, v163, v164);
                                        let v1304 = constructor_output_vreg(ctx, v1303);
                                        // Rule at src/isa/riscv64/lower.isle line 1462.
                                        return Some(v1304);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1301 = constructor_rv_vfadd_vv(ctx, v161, v162, v163, v164);
                            let v1302 = constructor_output_vreg(ctx, v1301);
                            // Rule at src/isa/riscv64/lower.isle line 1459.
                            return Some(v1302);
                        }
                        let v584 = C::ty_scalar_float(ctx, v3);
                        if let Some(v585) = v584 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v587 = constructor_put_in_freg(ctx, v38.0);
                            let v588 = constructor_put_in_freg(ctx, v38.1);
                            let v1299 = constructor_rv_fadd(ctx, v585, v587, v588);
                            let v1300 = constructor_output_freg(ctx, v1299);
                            // Rule at src/isa/riscv64/lower.isle line 1456.
                            return Some(v1300);
                        }
                    }
                }
                &Opcode::Fsub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v191 = constructor_put_in_vreg(ctx, v38.1);
                                        let v1305 = constructor_put_in_freg(ctx, v75);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1314 =
                                            constructor_rv_vfrsub_vf(ctx, v191, v1305, v163, v164);
                                        let v1315 = constructor_output_vreg(ctx, v1314);
                                        // Rule at src/isa/riscv64/lower.isle line 1479.
                                        return Some(v1315);
                                    }
                                }
                            }
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v1145 = constructor_put_in_freg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1312 =
                                            constructor_rv_vfsub_vf(ctx, v161, v1145, v163, v164);
                                        let v1313 = constructor_output_vreg(ctx, v1312);
                                        // Rule at src/isa/riscv64/lower.isle line 1476.
                                        return Some(v1313);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1310 = constructor_rv_vfsub_vv(ctx, v161, v162, v163, v164);
                            let v1311 = constructor_output_vreg(ctx, v1310);
                            // Rule at src/isa/riscv64/lower.isle line 1473.
                            return Some(v1311);
                        }
                        let v584 = C::ty_scalar_float(ctx, v3);
                        if let Some(v585) = v584 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v587 = constructor_put_in_freg(ctx, v38.0);
                            let v588 = constructor_put_in_freg(ctx, v38.1);
                            let v1308 = constructor_rv_fsub(ctx, v585, v587, v588);
                            let v1309 = constructor_output_freg(ctx, v1308);
                            // Rule at src/isa/riscv64/lower.isle line 1470.
                            return Some(v1309);
                        }
                    }
                }
                &Opcode::Fmul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v191 = constructor_put_in_vreg(ctx, v38.1);
                                        let v1305 = constructor_put_in_freg(ctx, v75);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1322 =
                                            constructor_rv_vfmul_vf(ctx, v191, v1305, v163, v164);
                                        let v1323 = constructor_output_vreg(ctx, v1322);
                                        // Rule at src/isa/riscv64/lower.isle line 1492.
                                        return Some(v1323);
                                    }
                                }
                            }
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v1145 = constructor_put_in_freg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1320 =
                                            constructor_rv_vfmul_vf(ctx, v161, v1145, v163, v164);
                                        let v1321 = constructor_output_vreg(ctx, v1320);
                                        // Rule at src/isa/riscv64/lower.isle line 1489.
                                        return Some(v1321);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1318 = constructor_rv_vfmul_vv(ctx, v161, v162, v163, v164);
                            let v1319 = constructor_output_vreg(ctx, v1318);
                            // Rule at src/isa/riscv64/lower.isle line 1486.
                            return Some(v1319);
                        }
                        let v584 = C::ty_scalar_float(ctx, v3);
                        if let Some(v585) = v584 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v587 = constructor_put_in_freg(ctx, v38.0);
                            let v588 = constructor_put_in_freg(ctx, v38.1);
                            let v1316 = constructor_rv_fmul(ctx, v585, v587, v588);
                            let v1317 = constructor_output_freg(ctx, v1316);
                            // Rule at src/isa/riscv64/lower.isle line 1483.
                            return Some(v1317);
                        }
                    }
                }
                &Opcode::Fdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v71 = C::def_inst(ctx, v38.0);
                            if let Some(v72) = v71 {
                                let v73 = &C::inst_data(ctx, v72);
                                if let &InstructionData::Unary {
                                    opcode: ref v74,
                                    arg: v75,
                                } = v73
                                {
                                    if let &Opcode::Splat = v74 {
                                        let v191 = constructor_put_in_vreg(ctx, v38.1);
                                        let v1305 = constructor_put_in_freg(ctx, v75);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1330 =
                                            constructor_rv_vfrdiv_vf(ctx, v191, v1305, v163, v164);
                                        let v1331 = constructor_output_vreg(ctx, v1330);
                                        // Rule at src/isa/riscv64/lower.isle line 1506.
                                        return Some(v1331);
                                    }
                                }
                            }
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v1145 = constructor_put_in_freg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1328 =
                                            constructor_rv_vfdiv_vf(ctx, v161, v1145, v163, v164);
                                        let v1329 = constructor_output_vreg(ctx, v1328);
                                        // Rule at src/isa/riscv64/lower.isle line 1503.
                                        return Some(v1329);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1326 = constructor_rv_vfdiv_vv(ctx, v161, v162, v163, v164);
                            let v1327 = constructor_output_vreg(ctx, v1326);
                            // Rule at src/isa/riscv64/lower.isle line 1500.
                            return Some(v1327);
                        }
                        let v584 = C::ty_scalar_float(ctx, v3);
                        if let Some(v585) = v584 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v587 = constructor_put_in_freg(ctx, v38.0);
                            let v588 = constructor_put_in_freg(ctx, v38.1);
                            let v1324 = constructor_rv_fdiv(ctx, v585, v587, v588);
                            let v1325 = constructor_output_freg(ctx, v1324);
                            // Rule at src/isa/riscv64/lower.isle line 1497.
                            return Some(v1325);
                        }
                    }
                }
                &Opcode::Fcopysign => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v60 = C::def_inst(ctx, v38.1);
                            if let Some(v61) = v60 {
                                let v62 = &C::inst_data(ctx, v61);
                                if let &InstructionData::Unary {
                                    opcode: ref v63,
                                    arg: v64,
                                } = v62
                                {
                                    if let &Opcode::Splat = v63 {
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v1145 = constructor_put_in_freg(ctx, v64);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1146 =
                                            constructor_rv_vfsgnj_vf(ctx, v161, v1145, v163, v164);
                                        let v1147 = constructor_output_vreg(ctx, v1146);
                                        // Rule at src/isa/riscv64/lower.isle line 1282.
                                        return Some(v1147);
                                    }
                                }
                            }
                            let v161 = constructor_put_in_vreg(ctx, v38.0);
                            let v162 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1143 = constructor_rv_vfsgnj_vv(ctx, v161, v162, v163, v164);
                            let v1144 = constructor_output_vreg(ctx, v1143);
                            // Rule at src/isa/riscv64/lower.isle line 1279.
                            return Some(v1144);
                        }
                        let v584 = C::ty_scalar_float(ctx, v3);
                        if let Some(v585) = v584 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v587 = constructor_put_in_freg(ctx, v38.0);
                            let v588 = constructor_put_in_freg(ctx, v38.1);
                            let v1141 = constructor_rv_fsgnj(ctx, v585, v587, v588);
                            let v1142 = constructor_output_freg(ctx, v1141);
                            // Rule at src/isa/riscv64/lower.isle line 1276.
                            return Some(v1142);
                        }
                    }
                }
                &Opcode::Fmin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v1337 = constructor_gen_fcmp_mask(
                                ctx,
                                v11,
                                &FloatCC::Ordered,
                                v38.0,
                                v38.1,
                            );
                            let v915 = C::lane_type(ctx, v11);
                            let v1338 = constructor_canonical_nan_u64(ctx, v915);
                            let v1339 = constructor_imm(ctx, I64, v1338);
                            let v1340 = C::xreg_new(ctx, v1339);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1341 = constructor_rv_vmv_vx(ctx, v1340, v164);
                            let v1342 = constructor_put_in_vreg(ctx, v38.0);
                            let v1343 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v1344 = constructor_rv_vfmin_vv(ctx, v1342, v1343, v163, v164);
                            let v1345 = constructor_rv_vmerge_vvm(ctx, v1341, v1344, v1337, v164);
                            let v1346 = constructor_output_vreg(ctx, v1345);
                            // Rule at src/isa/riscv64/lower.isle line 1520.
                            return Some(v1346);
                        }
                        let v584 = C::ty_scalar_float(ctx, v3);
                        if let Some(v585) = v584 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v1333 = C::put_in_reg(ctx, v38.0);
                            let v57 = C::put_in_reg(ctx, v38.1);
                            let v1334 = constructor_gen_float_select(
                                ctx,
                                &FloatSelectOP::Min,
                                v1333,
                                v57,
                                v585,
                            );
                            let v1335 = constructor_output_reg(ctx, v1334);
                            // Rule at src/isa/riscv64/lower.isle line 1511.
                            return Some(v1335);
                        }
                    }
                }
                &Opcode::Fmax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v1337 = constructor_gen_fcmp_mask(
                                ctx,
                                v11,
                                &FloatCC::Ordered,
                                v38.0,
                                v38.1,
                            );
                            let v915 = C::lane_type(ctx, v11);
                            let v1338 = constructor_canonical_nan_u64(ctx, v915);
                            let v1339 = constructor_imm(ctx, I64, v1338);
                            let v1340 = C::xreg_new(ctx, v1339);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1341 = constructor_rv_vmv_vx(ctx, v1340, v164);
                            let v1342 = constructor_put_in_vreg(ctx, v38.0);
                            let v1343 = constructor_put_in_vreg(ctx, v38.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v1350 = constructor_rv_vfmax_vv(ctx, v1342, v1343, v163, v164);
                            let v1351 = constructor_rv_vmerge_vvm(ctx, v1341, v1350, v1337, v164);
                            let v1352 = constructor_output_vreg(ctx, v1351);
                            // Rule at src/isa/riscv64/lower.isle line 1538.
                            return Some(v1352);
                        }
                        let v584 = C::ty_scalar_float(ctx, v3);
                        if let Some(v585) = v584 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v1333 = C::put_in_reg(ctx, v38.0);
                            let v57 = C::put_in_reg(ctx, v38.1);
                            let v1348 = constructor_gen_float_select(
                                ctx,
                                &FloatSelectOP::Max,
                                v1333,
                                v57,
                                v585,
                            );
                            let v1349 = constructor_output_reg(ctx, v1348);
                            // Rule at src/isa/riscv64/lower.isle line 1529.
                            return Some(v1349);
                        }
                    }
                }
                &Opcode::Snarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v1965 = C::ty_lane_count(ctx, v11);
                            let v2007 = C::u64_udiv(ctx, v1965, 0x2);
                            if let Some(v2008) = v2007 {
                                let v2009 = constructor_u64_to_uimm5(ctx, v2008);
                                if let Some(v2010) = v2009 {
                                    let v2053 = constructor_u64_to_uimm5(ctx, 0x0);
                                    if let Some(v2054) = v2053 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v2055 = C::ty_half_lanes(ctx, v11);
                                        let v2056 = v2055?;
                                        let v2057 = C::vstate_from_type(ctx, v2056);
                                        let v2058 = C::vstate_mf2(ctx, v2057);
                                        let v2059 =
                                            constructor_rv_vnclip_wi(ctx, v161, v2054, v163, v2058);
                                        let v2060 = constructor_put_in_vreg(ctx, v38.1);
                                        let v2061 = constructor_rv_vnclip_wi(
                                            ctx, v2060, v2054, v163, v2058,
                                        );
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v2062 = constructor_rv_vslideup_vvi(
                                            ctx, v2059, v2061, v2010, v163, v164,
                                        );
                                        let v2063 = constructor_output_vreg(ctx, v2062);
                                        // Rule at src/isa/riscv64/lower.isle line 2381.
                                        return Some(v2063);
                                    }
                                }
                            }
                        }
                    }
                }
                &Opcode::Unarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v1965 = C::ty_lane_count(ctx, v11);
                            let v2007 = C::u64_udiv(ctx, v1965, 0x2);
                            if let Some(v2008) = v2007 {
                                let v2009 = constructor_u64_to_uimm5(ctx, v2008);
                                if let Some(v2010) = v2009 {
                                    let v2053 = constructor_u64_to_uimm5(ctx, 0x0);
                                    if let Some(v2054) = v2053 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v1922 = C::zero_reg(ctx);
                                        let v1923 = C::xreg_new(ctx, v1922);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v2052 = C::value_type(ctx, v38.0);
                                        let v2068 = C::vstate_from_type(ctx, v2052);
                                        let v2069 =
                                            constructor_rv_vmax_vx(ctx, v161, v1923, v163, v2068);
                                        let v2027 = constructor_put_in_vreg(ctx, v38.1);
                                        let v2070 = C::zero_reg(ctx);
                                        let v2071 = C::xreg_new(ctx, v2070);
                                        let v2072 =
                                            constructor_rv_vmax_vx(ctx, v2027, v2071, v163, v2068);
                                        let v2055 = C::ty_half_lanes(ctx, v11);
                                        let v2056 = v2055?;
                                        let v2057 = C::vstate_from_type(ctx, v2056);
                                        let v2058 = C::vstate_mf2(ctx, v2057);
                                        let v2073 = constructor_rv_vnclipu_wi(
                                            ctx, v2069, v2054, v163, v2058,
                                        );
                                        let v2074 = constructor_rv_vnclipu_wi(
                                            ctx, v2072, v2054, v163, v2058,
                                        );
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v2075 = constructor_rv_vslideup_vvi(
                                            ctx, v2073, v2074, v2010, v163, v164,
                                        );
                                        let v2076 = constructor_output_vreg(ctx, v2075);
                                        // Rule at src/isa/riscv64/lower.isle line 2403.
                                        return Some(v2076);
                                    }
                                }
                            }
                        }
                    }
                }
                &Opcode::Uunarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v1965 = C::ty_lane_count(ctx, v11);
                            let v2007 = C::u64_udiv(ctx, v1965, 0x2);
                            if let Some(v2008) = v2007 {
                                let v2009 = constructor_u64_to_uimm5(ctx, v2008);
                                if let Some(v2010) = v2009 {
                                    let v2053 = constructor_u64_to_uimm5(ctx, 0x0);
                                    if let Some(v2054) = v2053 {
                                        let v38 = C::unpack_value_array_2(ctx, v37);
                                        let v161 = constructor_put_in_vreg(ctx, v38.0);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v2055 = C::ty_half_lanes(ctx, v11);
                                        let v2056 = v2055?;
                                        let v2057 = C::vstate_from_type(ctx, v2056);
                                        let v2058 = C::vstate_mf2(ctx, v2057);
                                        let v2064 = constructor_rv_vnclipu_wi(
                                            ctx, v161, v2054, v163, v2058,
                                        );
                                        let v2060 = constructor_put_in_vreg(ctx, v38.1);
                                        let v2065 = constructor_rv_vnclipu_wi(
                                            ctx, v2060, v2054, v163, v2058,
                                        );
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v2066 = constructor_rv_vslideup_vvi(
                                            ctx, v2064, v2065, v2010, v163, v164,
                                        );
                                        let v2067 = constructor_output_vreg(ctx, v2066);
                                        // Rule at src/isa/riscv64/lower.isle line 2390.
                                        return Some(v2067);
                                    }
                                }
                            }
                        }
                    }
                }
                &Opcode::IaddPairwise => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v1965 = C::ty_lane_count(ctx, v11);
                            let v2007 = C::u64_udiv(ctx, v1965, 0x2);
                            if let Some(v2008) = v2007 {
                                let v2009 = constructor_u64_to_uimm5(ctx, v2008);
                                if let Some(v2010) = v2009 {
                                    let v2011 = constructor_gen_vec_mask(ctx, 0x5555555555555555);
                                    let v38 = C::unpack_value_array_2(ctx, v37);
                                    let v2012 = constructor_put_in_vreg(ctx, v38.0);
                                    let v164 = C::vstate_from_type(ctx, v11);
                                    let v2013 =
                                        constructor_rv_vcompress_vm(ctx, v2012, v2011, v164);
                                    let v2014 = constructor_put_in_vreg(ctx, v38.1);
                                    let v2015 =
                                        constructor_rv_vcompress_vm(ctx, v2014, v2011, v164);
                                    let v163 = &constructor_unmasked(ctx);
                                    let v2016 = constructor_rv_vslideup_vvi(
                                        ctx, v2013, v2015, v2010, v163, v164,
                                    );
                                    let v2018 = constructor_gen_vec_mask(ctx, 0xAAAAAAAAAAAAAAAA);
                                    let v2019 = constructor_put_in_vreg(ctx, v38.0);
                                    let v2020 =
                                        constructor_rv_vcompress_vm(ctx, v2019, v2018, v164);
                                    let v2021 = constructor_put_in_vreg(ctx, v38.1);
                                    let v2022 =
                                        constructor_rv_vcompress_vm(ctx, v2021, v2018, v164);
                                    let v2023 = constructor_rv_vslideup_vvi(
                                        ctx, v2020, v2022, v2010, v163, v164,
                                    );
                                    let v2024 =
                                        constructor_rv_vadd_vv(ctx, v2016, v2023, v163, v164);
                                    let v2025 = constructor_output_vreg(ctx, v2024);
                                    // Rule at src/isa/riscv64/lower.isle line 2315.
                                    return Some(v2025);
                                }
                            }
                        }
                    }
                }
                &Opcode::Iconcat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v38 = C::unpack_value_array_2(ctx, v37);
                            let v41 = constructor_put_in_xreg(ctx, v38.0);
                            let v42 = constructor_put_in_xreg(ctx, v38.1);
                            let v1454 = C::xreg_to_reg(ctx, v41);
                            let v1455 = C::xreg_to_reg(ctx, v42);
                            let v1456 = C::value_regs(ctx, v1454, v1455);
                            let v1457 = C::output(ctx, v1456);
                            // Rule at src/isa/riscv64/lower.isle line 1626.
                            return Some(v1457);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::BinaryImm8 {
            opcode: ref v1826,
            arg: v1827,
            imm: v1828,
        } => {
            if let &Opcode::Extractlane = v1826 {
                let v1831 = constructor_put_in_vreg(ctx, v1827);
                let v1829 = C::value_type(ctx, v1827);
                let v1830 = C::u8_from_uimm8(ctx, v1828);
                let v1832 = constructor_gen_extractlane(ctx, v1829, v1831, v1830);
                let v1833 = constructor_output_reg(ctx, v1832);
                // Rule at src/isa/riscv64/lower.isle line 2075.
                return Some(v1833);
            }
        }
        &InstructionData::Call {
            opcode: ref v1806,
            args: v1807,
            func_ref: v1808,
        } => {
            match v1806 {
                &Opcode::Call => {
                    let v1810 = C::func_ref_data(ctx, v1808);
                    let v1809 = C::value_list_slice(ctx, v1807);
                    let v1814 = C::gen_call(ctx, v1810.0, v1810.1, v1810.2, v1809);
                    // Rule at src/isa/riscv64/lower.isle line 2058.
                    return Some(v1814);
                }
                &Opcode::ReturnCall => {
                    let v1810 = C::func_ref_data(ctx, v1808);
                    let v1809 = C::value_list_slice(ctx, v1807);
                    let v1824 = C::gen_return_call(ctx, v1810.0, v1810.1, v1810.2, v1809);
                    // Rule at src/isa/riscv64/lower.isle line 2066.
                    return Some(v1824);
                }
                _ => {}
            }
        }
        &InstructionData::CallIndirect {
            opcode: ref v1815,
            args: v1816,
            sig_ref: v1817,
        } => {
            match v1815 {
                &Opcode::CallIndirect => {
                    let v1818 = C::value_list_slice(ctx, v1816);
                    let v1819 = C::value_slice_unwrap(ctx, v1818);
                    if let Some(v1820) = v1819 {
                        let v1823 = C::gen_call_indirect(ctx, v1817, v1820.0, v1820.1);
                        // Rule at src/isa/riscv64/lower.isle line 2061.
                        return Some(v1823);
                    }
                }
                &Opcode::ReturnCallIndirect => {
                    let v1818 = C::value_list_slice(ctx, v1816);
                    let v1819 = C::value_slice_unwrap(ctx, v1818);
                    if let Some(v1820) = v1819 {
                        let v1825 = C::gen_return_call_indirect(ctx, v1817, v1820.0, v1820.1);
                        // Rule at src/isa/riscv64/lower.isle line 2069.
                        return Some(v1825);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::FloatCompare {
            opcode: ref v1659,
            args: ref v1660,
            cond: ref v1661,
        } => {
            if let &Opcode::Fcmp = v1659 {
                let v1662 = C::unpack_value_array_2(ctx, v1660);
                let v1665 = C::value_type(ctx, v1662.0);
                let v1673 = C::ty_vec_fits_in_register(ctx, v1665);
                if let Some(v1674) = v1673 {
                    let v1675 = constructor_gen_fcmp_mask(ctx, v1674, v1661, v1662.0, v1662.1);
                    let v1676 = constructor_gen_expand_mask(ctx, v1674, v1675);
                    let v1677 = constructor_output_vreg(ctx, v1676);
                    // Rule at src/isa/riscv64/lower.isle line 1873.
                    return Some(v1677);
                }
                let v1666 = C::ty_scalar_float(ctx, v1665);
                if let Some(v1667) = v1666 {
                    let v1668 = constructor_put_in_freg(ctx, v1662.0);
                    let v1669 = constructor_put_in_freg(ctx, v1662.1);
                    let v1670 = &constructor_emit_fcmp(ctx, v1661, v1667, v1668, v1669);
                    let v1671 = constructor_lower_fcmp(ctx, v1670);
                    let v1672 = constructor_output_xreg(ctx, v1671);
                    // Rule at src/isa/riscv64/lower.isle line 1866.
                    return Some(v1672);
                }
            }
        }
        &InstructionData::FuncAddr {
            opcode: ref v1678,
            func_ref: v1679,
        } => {
            if let &Opcode::FuncAddr = v1678 {
                let v1680 = C::func_ref_data(ctx, v1679);
                let v1685 = C::load_ext_name(ctx, v1680.1, 0x0);
                let v1686 = constructor_output_reg(ctx, v1685);
                // Rule at src/isa/riscv64/lower.isle line 1878.
                return Some(v1686);
            }
        }
        &InstructionData::IntAddTrap {
            opcode: ref v370,
            args: ref v371,
            code: ref v372,
        } => {
            if let &Opcode::UaddOverflowTrap = v370 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    if v3 == I64 {
                        let v373 = C::unpack_value_array_2(ctx, v371);
                        let v385 = constructor_put_in_xreg(ctx, v373.0);
                        let v386 = constructor_put_in_xreg(ctx, v373.1);
                        let v387 = constructor_rv_add(ctx, v385, v386);
                        let v389 = constructor_put_in_xreg(ctx, v373.0);
                        let v390 =
                            constructor_gen_trapif(ctx, &IntCC::UnsignedLessThan, v387, v389, v372);
                        let v391 = constructor_output_xreg(ctx, v387);
                        // Rule at src/isa/riscv64/lower.isle line 307.
                        return Some(v391);
                    }
                    let v368 = C::fits_in_32(ctx, v3);
                    if let Some(v369) = v368 {
                        let v373 = C::unpack_value_array_2(ctx, v371);
                        let v376 = constructor_zext(ctx, v373.0);
                        let v377 = constructor_zext(ctx, v373.1);
                        let v378 = constructor_rv_add(ctx, v376, v377);
                        let v379 = C::ty_bits(ctx, v369);
                        let v380 = C::u8_as_i32(ctx, v379);
                        let v381 = C::imm12_const(ctx, v380);
                        let v382 = constructor_rv_srli(ctx, v378, v381);
                        let v383 = constructor_gen_trapnz(ctx, v382, v372);
                        let v384 = constructor_output_xreg(ctx, v378);
                        // Rule at src/isa/riscv64/lower.isle line 299.
                        return Some(v384);
                    }
                }
            }
        }
        &InstructionData::IntCompare {
            opcode: ref v1623,
            args: ref v1624,
            cond: ref v1625,
        } => {
            if let &Opcode::Icmp = v1623 {
                let v1626 = C::unpack_value_array_2(ctx, v1624);
                let v1629 = C::value_type(ctx, v1626.0);
                let v1654 = C::ty_vec_fits_in_register(ctx, v1629);
                if let Some(v1655) = v1654 {
                    let v1656 = constructor_gen_icmp_mask(ctx, v1655, v1625, v1626.0, v1626.1);
                    let v1657 = constructor_gen_expand_mask(ctx, v1655, v1656);
                    let v1658 = constructor_output_vreg(ctx, v1657);
                    // Rule at src/isa/riscv64/lower.isle line 1861.
                    return Some(v1658);
                }
                if v1629 == I128 {
                    let v1650 = C::put_in_regs(ctx, v1626.0);
                    let v1651 = C::put_in_regs(ctx, v1626.1);
                    let v1652 = constructor_gen_icmp(ctx, v1625, v1650, v1651, I128);
                    let v1653 = constructor_output_xreg(ctx, v1652);
                    // Rule at src/isa/riscv64/lower.isle line 1858.
                    return Some(v1653);
                }
                let v1630 = C::ty_int(ctx, v1629);
                if let Some(v1631) = v1630 {
                    let v1640 = &C::signed_cond_code(ctx, v1625);
                    if let Some(v1641) = v1640 {
                        let v1642 = constructor_sext(ctx, v1626.0);
                        let v1643 = C::xreg_to_reg(ctx, v1642);
                        let v1644 = C::value_reg(ctx, v1643);
                        let v1645 = constructor_sext(ctx, v1626.1);
                        let v1646 = C::xreg_to_reg(ctx, v1645);
                        let v1647 = C::value_reg(ctx, v1646);
                        let v1648 = constructor_gen_icmp(ctx, v1625, v1644, v1647, v1631);
                        let v1649 = constructor_output_xreg(ctx, v1648);
                        // Rule at src/isa/riscv64/lower.isle line 1854.
                        return Some(v1649);
                    }
                    let v1632 = constructor_zext(ctx, v1626.0);
                    let v1633 = C::xreg_to_reg(ctx, v1632);
                    let v1634 = C::value_reg(ctx, v1633);
                    let v1635 = constructor_zext(ctx, v1626.1);
                    let v1636 = C::xreg_to_reg(ctx, v1635);
                    let v1637 = C::value_reg(ctx, v1636);
                    let v1638 = constructor_gen_icmp(ctx, v1625, v1634, v1637, v1631);
                    let v1639 = constructor_output_xreg(ctx, v1638);
                    // Rule at src/isa/riscv64/lower.isle line 1851.
                    return Some(v1639);
                }
            }
        }
        &InstructionData::Load {
            opcode: ref v1524,
            arg: v1525,
            flags: v1526,
            offset: v1527,
        } => {
            match v1524 {
                &Opcode::Load => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v1528 = C::offset32_to_i32(ctx, v1527);
                            let v1571 = constructor_amode(ctx, v1525, v1528, v11);
                            let v1570 = &constructor_element_width_from_type(ctx, v11);
                            let v1572 = VecAMode::UnitStride { base: v1571 };
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1573 = constructor_vec_load(ctx, v1570, &v1572, v1526, v163, v164);
                            let v1574 = constructor_output_reg(ctx, v1573);
                            // Rule at src/isa/riscv64/lower.isle line 1764.
                            return Some(v1574);
                        }
                        if v3 == I128 {
                            let v1528 = C::offset32_to_i32(ctx, v1527);
                            let v1557 = C::s32_add_fallible(ctx, v1528, 0x8);
                            if let Some(v1558) = v1557 {
                                let v1559 = constructor_amode(ctx, v1525, v1528, I64);
                                let v1561 = constructor_gen_load(ctx, v1559, &LoadOP::Ld, v1526);
                                let v1562 = C::xreg_new(ctx, v1561);
                                let v1563 = constructor_amode(ctx, v1525, v1558, I64);
                                let v1564 = constructor_gen_load(ctx, v1563, &LoadOP::Ld, v1526);
                                let v1565 = C::xreg_new(ctx, v1564);
                                let v1566 = C::xreg_to_reg(ctx, v1562);
                                let v1567 = C::xreg_to_reg(ctx, v1565);
                                let v1568 = C::value_regs(ctx, v1566, v1567);
                                let v1569 = C::output(ctx, v1568);
                                // Rule at src/isa/riscv64/lower.isle line 1758.
                                return Some(v1569);
                            }
                        }
                        let v1528 = C::offset32_to_i32(ctx, v1527);
                        let v1552 = constructor_amode(ctx, v1525, v1528, v3);
                        let v1553 = &C::load_op(ctx, v3);
                        let v1554 = constructor_gen_load(ctx, v1552, v1553, v1526);
                        let v1555 = constructor_output_reg(ctx, v1554);
                        // Rule at src/isa/riscv64/lower.isle line 1755.
                        return Some(v1555);
                    }
                }
                &Opcode::Uload8 => {
                    let v1528 = C::offset32_to_i32(ctx, v1527);
                    let v1530 = constructor_amode(ctx, v1525, v1528, I8);
                    let v1532 = constructor_gen_load(ctx, v1530, &LoadOP::Lbu, v1526);
                    let v1533 = constructor_output_reg(ctx, v1532);
                    // Rule at src/isa/riscv64/lower.isle line 1731.
                    return Some(v1533);
                }
                &Opcode::Sload8 => {
                    let v1528 = C::offset32_to_i32(ctx, v1527);
                    let v1530 = constructor_amode(ctx, v1525, v1528, I8);
                    let v1535 = constructor_gen_load(ctx, v1530, &LoadOP::Lb, v1526);
                    let v1536 = constructor_output_reg(ctx, v1535);
                    // Rule at src/isa/riscv64/lower.isle line 1735.
                    return Some(v1536);
                }
                &Opcode::Uload16 => {
                    let v1528 = C::offset32_to_i32(ctx, v1527);
                    let v1538 = constructor_amode(ctx, v1525, v1528, I16);
                    let v1540 = constructor_gen_load(ctx, v1538, &LoadOP::Lhu, v1526);
                    let v1541 = constructor_output_reg(ctx, v1540);
                    // Rule at src/isa/riscv64/lower.isle line 1739.
                    return Some(v1541);
                }
                &Opcode::Sload16 => {
                    let v1528 = C::offset32_to_i32(ctx, v1527);
                    let v1538 = constructor_amode(ctx, v1525, v1528, I16);
                    let v1543 = constructor_gen_load(ctx, v1538, &LoadOP::Lh, v1526);
                    let v1544 = constructor_output_reg(ctx, v1543);
                    // Rule at src/isa/riscv64/lower.isle line 1743.
                    return Some(v1544);
                }
                &Opcode::Uload32 => {
                    let v1528 = C::offset32_to_i32(ctx, v1527);
                    let v1545 = constructor_amode(ctx, v1525, v1528, I32);
                    let v1547 = constructor_gen_load(ctx, v1545, &LoadOP::Lwu, v1526);
                    let v1548 = constructor_output_reg(ctx, v1547);
                    // Rule at src/isa/riscv64/lower.isle line 1747.
                    return Some(v1548);
                }
                &Opcode::Sload32 => {
                    let v1528 = C::offset32_to_i32(ctx, v1527);
                    let v1545 = constructor_amode(ctx, v1525, v1528, I32);
                    let v1550 = constructor_gen_load(ctx, v1545, &LoadOP::Lw, v1526);
                    let v1551 = constructor_output_reg(ctx, v1550);
                    // Rule at src/isa/riscv64/lower.isle line 1751.
                    return Some(v1551);
                }
                &Opcode::Uload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            if v11 == I16X8 {
                                let v1528 = C::offset32_to_i32(ctx, v1527);
                                let v1571 = constructor_amode(ctx, v1525, v1528, v11);
                                let v1576 = constructor_gen_load64_extend(
                                    ctx,
                                    v11,
                                    &ExtendOp::Zero,
                                    v1526,
                                    v1571,
                                );
                                let v1577 = constructor_output_vreg(ctx, v1576);
                                // Rule at src/isa/riscv64/lower.isle line 1791.
                                return Some(v1577);
                            }
                        }
                    }
                }
                &Opcode::Sload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            if v11 == I16X8 {
                                let v1528 = C::offset32_to_i32(ctx, v1527);
                                let v1571 = constructor_amode(ctx, v1525, v1528, v11);
                                let v1579 = constructor_gen_load64_extend(
                                    ctx,
                                    v11,
                                    &ExtendOp::Signed,
                                    v1526,
                                    v1571,
                                );
                                let v1580 = constructor_output_vreg(ctx, v1579);
                                // Rule at src/isa/riscv64/lower.isle line 1803.
                                return Some(v1580);
                            }
                        }
                    }
                }
                &Opcode::Uload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            if v11 == I32X4 {
                                let v1528 = C::offset32_to_i32(ctx, v1527);
                                let v1571 = constructor_amode(ctx, v1525, v1528, v11);
                                let v1576 = constructor_gen_load64_extend(
                                    ctx,
                                    v11,
                                    &ExtendOp::Zero,
                                    v1526,
                                    v1571,
                                );
                                let v1577 = constructor_output_vreg(ctx, v1576);
                                // Rule at src/isa/riscv64/lower.isle line 1795.
                                return Some(v1577);
                            }
                        }
                    }
                }
                &Opcode::Sload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            if v11 == I32X4 {
                                let v1528 = C::offset32_to_i32(ctx, v1527);
                                let v1571 = constructor_amode(ctx, v1525, v1528, v11);
                                let v1579 = constructor_gen_load64_extend(
                                    ctx,
                                    v11,
                                    &ExtendOp::Signed,
                                    v1526,
                                    v1571,
                                );
                                let v1580 = constructor_output_vreg(ctx, v1579);
                                // Rule at src/isa/riscv64/lower.isle line 1807.
                                return Some(v1580);
                            }
                        }
                    }
                }
                &Opcode::Uload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            if v11 == I64X2 {
                                let v1528 = C::offset32_to_i32(ctx, v1527);
                                let v1571 = constructor_amode(ctx, v1525, v1528, v11);
                                let v1576 = constructor_gen_load64_extend(
                                    ctx,
                                    v11,
                                    &ExtendOp::Zero,
                                    v1526,
                                    v1571,
                                );
                                let v1577 = constructor_output_vreg(ctx, v1576);
                                // Rule at src/isa/riscv64/lower.isle line 1799.
                                return Some(v1577);
                            }
                        }
                    }
                }
                &Opcode::Sload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            if v11 == I64X2 {
                                let v1528 = C::offset32_to_i32(ctx, v1527);
                                let v1571 = constructor_amode(ctx, v1525, v1528, v11);
                                let v1579 = constructor_gen_load64_extend(
                                    ctx,
                                    v11,
                                    &ExtendOp::Signed,
                                    v1526,
                                    v1571,
                                );
                                let v1580 = constructor_output_vreg(ctx, v1579);
                                // Rule at src/isa/riscv64/lower.isle line 1811.
                                return Some(v1580);
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::LoadNoOffset {
            opcode: ref v1244,
            arg: v1245,
            flags: v1246,
        } => {
            match v1244 {
                &Opcode::Bitcast => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1247 = C::put_in_reg(ctx, v1245);
                        let v1750 = C::value_type(ctx, v1245);
                        let v3 = C::value_type(ctx, v2);
                        let v1751 = constructor_gen_bitcast(ctx, v1247, v1750, v3);
                        let v1752 = constructor_output_reg(ctx, v1751);
                        // Rule at src/isa/riscv64/lower.isle line 1966.
                        return Some(v1752);
                    }
                }
                &Opcode::AtomicLoad => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1201 = C::valid_atomic_transaction(ctx, v3);
                        if let Some(v1202) = v1201 {
                            let v1247 = C::put_in_reg(ctx, v1245);
                            let v1248 = constructor_gen_atomic_load(ctx, v1247, v1202);
                            let v1249 = constructor_output_reg(ctx, v1248);
                            // Rule at src/isa/riscv64/lower.isle line 1388.
                            return Some(v1249);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::MultiAry {
            opcode: ref v1788,
            args: v1789,
        } => {
            if let &Opcode::Return = v1788 {
                let v1790 = C::value_list_slice(ctx, v1789);
                let v1791 = constructor_lower_return(ctx, v1790);
                // Rule at src/isa/riscv64/lower.isle line 2023.
                return Some(v1791);
            }
        }
        &InstructionData::NullAry { opcode: ref v30 } => {
            match v30 {
                &Opcode::Debugtrap => {
                    let v1515 = SideEffectNoResult::Inst {
                        inst: MInst::EBreak,
                    };
                    let v1516 = constructor_side_effect(ctx, &v1515);
                    // Rule at src/isa/riscv64/lower.isle line 1712.
                    return Some(v1516);
                }
                &Opcode::GetFramePointer => {
                    let v1792 = C::fp_reg(ctx);
                    let v1793 = constructor_gen_mov_from_preg(ctx, v1792);
                    let v1794 = constructor_output_reg(ctx, v1793);
                    // Rule at src/isa/riscv64/lower.isle line 2028.
                    return Some(v1794);
                }
                &Opcode::GetStackPointer => {
                    let v1795 = C::sp_reg(ctx);
                    let v1796 = constructor_gen_mov_from_preg(ctx, v1795);
                    let v1797 = constructor_output_reg(ctx, v1796);
                    // Rule at src/isa/riscv64/lower.isle line 2031.
                    return Some(v1797);
                }
                &Opcode::GetReturnAddress => {
                    let v1798 = C::load_ra(ctx);
                    let v1799 = constructor_output_reg(ctx, v1798);
                    // Rule at src/isa/riscv64/lower.isle line 2034.
                    return Some(v1799);
                }
                &Opcode::Null => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v32 = constructor_imm(ctx, v3, 0x0);
                        let v33 = constructor_output_reg(ctx, v32);
                        // Rule at src/isa/riscv64/lower.isle line 29.
                        return Some(v33);
                    }
                }
                &Opcode::Fence => {
                    let v1518 = MInst::Fence {
                        pred: 0xF,
                        succ: 0xF,
                    };
                    let v1519 = SideEffectNoResult::Inst { inst: v1518 };
                    let v1520 = constructor_side_effect(ctx, &v1519);
                    // Rule at src/isa/riscv64/lower.isle line 1717.
                    return Some(v1520);
                }
                _ => {}
            }
        }
        &InstructionData::Shuffle {
            opcode: ref v1939,
            args: ref v1940,
            imm: v1941,
        } => {
            if let &Opcode::Shuffle = v1939 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v10 = C::ty_vec_fits_in_register(ctx, v3);
                    if let Some(v11) = v10 {
                        if v11 == I8X16 {
                            let v1945 = C::vconst_from_immediate(ctx, v1941);
                            if let Some(v1946) = v1945 {
                                let v1948 = C::i8_to_imm5(ctx, -0x10);
                                if let Some(v1949) = v1948 {
                                    let v1950 = constructor_gen_constant(ctx, v11, v1946);
                                    let v1942 = C::unpack_value_array_2(ctx, v1940);
                                    let v1951 = constructor_put_in_vreg(ctx, v1942.0);
                                    let v163 = &constructor_unmasked(ctx);
                                    let v164 = C::vstate_from_type(ctx, v11);
                                    let v1952 =
                                        constructor_rv_vrgather_vv(ctx, v1951, v1950, v163, v164);
                                    let v1953 =
                                        constructor_rv_vadd_vi(ctx, v1950, v1949, v163, v164);
                                    let v1954 = constructor_put_in_vreg(ctx, v1942.1);
                                    let v1955 =
                                        constructor_rv_vrgather_vv(ctx, v1954, v1953, v163, v164);
                                    let v1956 =
                                        constructor_rv_vor_vv(ctx, v1952, v1955, v163, v164);
                                    let v1957 = constructor_output_vreg(ctx, v1956);
                                    // Rule at src/isa/riscv64/lower.isle line 2242.
                                    return Some(v1957);
                                }
                            }
                        }
                    }
                }
            }
        }
        &InstructionData::StackLoad {
            opcode: ref v1353,
            stack_slot: v1354,
            offset: v1355,
        } => {
            if let &Opcode::StackAddr = v1353 {
                let v1356 = C::gen_stack_addr(ctx, v1354, v1355);
                let v1357 = constructor_output_reg(ctx, v1356);
                // Rule at src/isa/riscv64/lower.isle line 1547.
                return Some(v1357);
            }
        }
        &InstructionData::Store {
            opcode: ref v1581,
            args: ref v1582,
            flags: v1583,
            offset: v1584,
        } => {
            match v1581 {
                &Opcode::Store => {
                    let v1585 = C::unpack_value_array_2(ctx, v1582);
                    let v1599 = C::value_type(ctx, v1585.0);
                    let v1615 = C::ty_vec_fits_in_register(ctx, v1599);
                    if let Some(v1616) = v1615 {
                        let v1588 = C::offset32_to_i32(ctx, v1584);
                        let v1618 = constructor_amode(ctx, v1585.1, v1588, v1616);
                        let v1620 = constructor_put_in_vreg(ctx, v1585.0);
                        let v1617 = &constructor_element_width_from_type(ctx, v1616);
                        let v1619 = VecAMode::UnitStride { base: v1618 };
                        let v163 = &constructor_unmasked(ctx);
                        let v1621 = C::vstate_from_type(ctx, v1616);
                        let v1622 =
                            constructor_vec_store(ctx, v1617, &v1619, v1620, v1583, v163, v1621);
                        // Rule at src/isa/riscv64/lower.isle line 1835.
                        return Some(v1622);
                    }
                    if v1599 == I128 {
                        let v1588 = C::offset32_to_i32(ctx, v1584);
                        let v1604 = C::s32_add_fallible(ctx, v1588, 0x8);
                        if let Some(v1605) = v1604 {
                            let v1606 = constructor_amode(ctx, v1585.1, v1588, I64);
                            let v1608 = C::put_in_regs(ctx, v1585.0);
                            let v1609 = C::value_regs_get(ctx, v1608, 0x0);
                            let v1610 =
                                constructor_gen_store(ctx, v1606, &StoreOP::Sd, v1583, v1609);
                            let v1611 = constructor_amode(ctx, v1585.1, v1605, I64);
                            let v1612 = C::put_in_regs(ctx, v1585.0);
                            let v1613 = C::value_regs_get(ctx, v1612, 0x1);
                            let v1614 =
                                constructor_gen_store(ctx, v1611, &StoreOP::Sd, v1583, v1613);
                            // Rule at src/isa/riscv64/lower.isle line 1830.
                            return Some(v1614);
                        }
                    }
                    let v1588 = C::offset32_to_i32(ctx, v1584);
                    let v1600 = constructor_amode(ctx, v1585.1, v1588, v1599);
                    let v1601 = &C::store_op(ctx, v1599);
                    let v1602 = C::put_in_reg(ctx, v1585.0);
                    let v1603 = constructor_gen_store(ctx, v1600, v1601, v1583, v1602);
                    // Rule at src/isa/riscv64/lower.isle line 1827.
                    return Some(v1603);
                }
                &Opcode::Istore8 => {
                    let v1585 = C::unpack_value_array_2(ctx, v1582);
                    let v1588 = C::offset32_to_i32(ctx, v1584);
                    let v1589 = constructor_amode(ctx, v1585.1, v1588, I8);
                    let v1591 = C::put_in_reg(ctx, v1585.0);
                    let v1592 = constructor_gen_store(ctx, v1589, &StoreOP::Sb, v1583, v1591);
                    // Rule at src/isa/riscv64/lower.isle line 1815.
                    return Some(v1592);
                }
                &Opcode::Istore16 => {
                    let v1585 = C::unpack_value_array_2(ctx, v1582);
                    let v1588 = C::offset32_to_i32(ctx, v1584);
                    let v1593 = constructor_amode(ctx, v1585.1, v1588, I16);
                    let v1591 = C::put_in_reg(ctx, v1585.0);
                    let v1595 = constructor_gen_store(ctx, v1593, &StoreOP::Sh, v1583, v1591);
                    // Rule at src/isa/riscv64/lower.isle line 1819.
                    return Some(v1595);
                }
                &Opcode::Istore32 => {
                    let v1585 = C::unpack_value_array_2(ctx, v1582);
                    let v1588 = C::offset32_to_i32(ctx, v1584);
                    let v1596 = constructor_amode(ctx, v1585.1, v1588, I32);
                    let v1591 = C::put_in_reg(ctx, v1585.0);
                    let v1598 = constructor_gen_store(ctx, v1596, &StoreOP::Sw, v1583, v1591);
                    // Rule at src/isa/riscv64/lower.isle line 1823.
                    return Some(v1598);
                }
                _ => {}
            }
        }
        &InstructionData::StoreNoOffset {
            opcode: ref v1250,
            args: ref v1251,
            flags: v1252,
        } => {
            if let &Opcode::AtomicStore = v1250 {
                let v1253 = C::unpack_value_array_2(ctx, v1251);
                let v1256 = C::value_type(ctx, v1253.0);
                let v1257 = C::valid_atomic_transaction(ctx, v1256);
                if let Some(v1258) = v1257 {
                    let v1259 = C::put_in_reg(ctx, v1253.1);
                    let v1260 = C::put_in_reg(ctx, v1253.0);
                    let v1261 = constructor_gen_atomic_store(ctx, v1259, v1258, v1260);
                    // Rule at src/isa/riscv64/lower.isle line 1394.
                    return Some(v1261);
                }
            }
        }
        &InstructionData::Ternary {
            opcode: ref v1148,
            args: ref v1149,
        } => {
            match v1148 {
                &Opcode::Select => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v584 = C::ty_scalar_float(ctx, v3);
                        if let Some(v585) = v584 {
                            let v1150 = C::unpack_value_array_3(ctx, v1149);
                            let v1365 = constructor_lower_int_compare(ctx, v1150.0);
                            let v1155 = constructor_put_in_freg(ctx, v1150.1);
                            let v1156 = constructor_put_in_freg(ctx, v1150.2);
                            let v1377 = constructor_gen_select_freg(ctx, v1365, v1155, v1156);
                            let v1378 = constructor_output_freg(ctx, v1377);
                            // Rule at src/isa/riscv64/lower.isle line 1572.
                            return Some(v1378);
                        }
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v1150 = C::unpack_value_array_3(ctx, v1149);
                            let v1365 = constructor_lower_int_compare(ctx, v1150.0);
                            let v1160 = constructor_put_in_vreg(ctx, v1150.1);
                            let v1374 = constructor_put_in_vreg(ctx, v1150.2);
                            let v1375 = constructor_gen_select_vreg(ctx, v1365, v1160, v1374);
                            let v1376 = constructor_output_vreg(ctx, v1375);
                            // Rule at src/isa/riscv64/lower.isle line 1569.
                            return Some(v1376);
                        }
                        if v3 == I128 {
                            let v1150 = C::unpack_value_array_3(ctx, v1149);
                            let v1365 = constructor_lower_int_compare(ctx, v1150.0);
                            let v1370 = C::put_in_regs(ctx, v1150.1);
                            let v1371 = C::put_in_regs(ctx, v1150.2);
                            let v1372 = constructor_gen_select_regs(ctx, v1365, v1370, v1371);
                            let v1373 = C::output(ctx, v1372);
                            // Rule at src/isa/riscv64/lower.isle line 1566.
                            return Some(v1373);
                        }
                        let v34 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v35) = v34 {
                            let v1150 = C::unpack_value_array_3(ctx, v1149);
                            let v1365 = constructor_lower_int_compare(ctx, v1150.0);
                            let v1366 = constructor_put_in_xreg(ctx, v1150.1);
                            let v1367 = constructor_put_in_xreg(ctx, v1150.2);
                            let v1368 = constructor_gen_select_xreg(ctx, v1365, v1366, v1367);
                            let v1369 = constructor_output_xreg(ctx, v1368);
                            // Rule at src/isa/riscv64/lower.isle line 1563.
                            return Some(v1369);
                        }
                    }
                }
                &Opcode::SelectSpectreGuard => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1150 = C::unpack_value_array_3(ctx, v1149);
                        let v1778 = C::value_type(ctx, v1150.1);
                        let v1779 = constructor_lower_bmask(ctx, v1150.0, v1778);
                        let v1370 = C::put_in_regs(ctx, v1150.1);
                        let v1780 = constructor_gen_and(ctx, v1778, v1370, v1779);
                        let v1781 = C::put_in_regs(ctx, v1150.2);
                        let v1782 = constructor_gen_bnot(ctx, v1778, v1779);
                        let v1783 = constructor_gen_and(ctx, v1778, v1781, v1782);
                        let v1784 = constructor_gen_or(ctx, v1778, v1780, v1783);
                        let v1785 = C::output(ctx, v1784);
                        // Rule at src/isa/riscv64/lower.isle line 2005.
                        return Some(v1785);
                    }
                }
                &Opcode::Bitselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v1150 = C::unpack_value_array_3(ctx, v1149);
                            let v1164 = C::def_inst(ctx, v1150.0);
                            if let Some(v1165) = v1164 {
                                let v1166 = &C::inst_data(ctx, v1165);
                                match v1166 {
                                    &InstructionData::FloatCompare {
                                        opcode: ref v1409,
                                        args: ref v1410,
                                        cond: ref v1411,
                                    } => {
                                        if let &Opcode::Fcmp = v1409 {
                                            let v1412 = C::unpack_value_array_2(ctx, v1410);
                                            let v1415 = C::value_type(ctx, v1412.0);
                                            let v1416 = C::ty_vec_fits_in_register(ctx, v1415);
                                            if let Some(v1417) = v1416 {
                                                let v1418 = constructor_gen_fcmp_mask(
                                                    ctx, v1417, v1411, v1412.0, v1412.1,
                                                );
                                                let v1405 = constructor_put_in_vreg(ctx, v1150.2);
                                                let v1406 = constructor_put_in_vreg(ctx, v1150.1);
                                                let v164 = C::vstate_from_type(ctx, v11);
                                                let v1419 = constructor_rv_vmerge_vvm(
                                                    ctx, v1405, v1406, v1418, v164,
                                                );
                                                let v1420 = constructor_output_vreg(ctx, v1419);
                                                // Rule at src/isa/riscv64/lower.isle line 1603.
                                                return Some(v1420);
                                            }
                                        }
                                    }
                                    &InstructionData::IntCompare {
                                        opcode: ref v1395,
                                        args: ref v1396,
                                        cond: ref v1397,
                                    } => {
                                        if let &Opcode::Icmp = v1395 {
                                            let v1398 = C::unpack_value_array_2(ctx, v1396);
                                            let v1401 = C::value_type(ctx, v1398.0);
                                            let v1402 = C::ty_vec_fits_in_register(ctx, v1401);
                                            if let Some(v1403) = v1402 {
                                                let v1404 = constructor_gen_icmp_mask(
                                                    ctx, v1403, v1397, v1398.0, v1398.1,
                                                );
                                                let v1405 = constructor_put_in_vreg(ctx, v1150.2);
                                                let v1406 = constructor_put_in_vreg(ctx, v1150.1);
                                                let v164 = C::vstate_from_type(ctx, v11);
                                                let v1407 = constructor_rv_vmerge_vvm(
                                                    ctx, v1405, v1406, v1404, v164,
                                                );
                                                let v1408 = constructor_output_vreg(ctx, v1407);
                                                // Rule at src/isa/riscv64/lower.isle line 1599.
                                                return Some(v1408);
                                            }
                                        }
                                    }
                                    &InstructionData::LoadNoOffset {
                                        opcode: ref v1421,
                                        arg: v1422,
                                        flags: v1423,
                                    } => {
                                        if let &Opcode::Bitcast = v1421 {
                                            let v1424 = C::def_inst(ctx, v1422);
                                            if let Some(v1425) = v1424 {
                                                let v1426 = &C::inst_data(ctx, v1425);
                                                match v1426 {
                                                    &InstructionData::FloatCompare {
                                                        opcode: ref v1427,
                                                        args: ref v1428,
                                                        cond: ref v1429,
                                                    } => {
                                                        if let &Opcode::Fcmp = v1427 {
                                                            let v1430 =
                                                                C::unpack_value_array_2(ctx, v1428);
                                                            let v1433 = C::value_type(ctx, v1430.0);
                                                            let v1434 = C::ty_vec_fits_in_register(
                                                                ctx, v1433,
                                                            );
                                                            if let Some(v1435) = v1434 {
                                                                let v1436 =
                                                                    constructor_gen_fcmp_mask(
                                                                        ctx, v1435, v1429, v1430.0,
                                                                        v1430.1,
                                                                    );
                                                                let v1405 = constructor_put_in_vreg(
                                                                    ctx, v1150.2,
                                                                );
                                                                let v1406 = constructor_put_in_vreg(
                                                                    ctx, v1150.1,
                                                                );
                                                                let v164 =
                                                                    C::vstate_from_type(ctx, v11);
                                                                let v1437 =
                                                                    constructor_rv_vmerge_vvm(
                                                                        ctx, v1405, v1406, v1436,
                                                                        v164,
                                                                    );
                                                                let v1438 = constructor_output_vreg(
                                                                    ctx, v1437,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 1607.
                                                                return Some(v1438);
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::IntCompare {
                                                        opcode: ref v1439,
                                                        args: ref v1440,
                                                        cond: ref v1441,
                                                    } => {
                                                        if let &Opcode::Icmp = v1439 {
                                                            let v1442 =
                                                                C::unpack_value_array_2(ctx, v1440);
                                                            let v1445 = C::value_type(ctx, v1442.0);
                                                            let v1446 = C::ty_vec_fits_in_register(
                                                                ctx, v1445,
                                                            );
                                                            if let Some(v1447) = v1446 {
                                                                let v1448 =
                                                                    constructor_gen_icmp_mask(
                                                                        ctx, v1447, v1441, v1442.0,
                                                                        v1442.1,
                                                                    );
                                                                let v1405 = constructor_put_in_vreg(
                                                                    ctx, v1150.2,
                                                                );
                                                                let v1406 = constructor_put_in_vreg(
                                                                    ctx, v1150.1,
                                                                );
                                                                let v164 =
                                                                    C::vstate_from_type(ctx, v11);
                                                                let v1449 =
                                                                    constructor_rv_vmerge_vvm(
                                                                        ctx, v1405, v1406, v1448,
                                                                        v164,
                                                                    );
                                                                let v1450 = constructor_output_vreg(
                                                                    ctx, v1449,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 1611.
                                                                return Some(v1450);
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let v1387 = constructor_put_in_vreg(ctx, v1150.0);
                            let v1160 = constructor_put_in_vreg(ctx, v1150.1);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1388 = constructor_rv_vand_vv(ctx, v1387, v1160, v163, v164);
                            let v1389 = constructor_put_in_vreg(ctx, v1150.0);
                            let v1390 = constructor_rv_vnot_v(ctx, v1389, v163, v164);
                            let v1391 = constructor_put_in_vreg(ctx, v1150.2);
                            let v1392 = constructor_rv_vand_vv(ctx, v1390, v1391, v163, v164);
                            let v1393 = constructor_rv_vor_vv(ctx, v1388, v1392, v163, v164);
                            let v1394 = constructor_output_vreg(ctx, v1393);
                            // Rule at src/isa/riscv64/lower.isle line 1589.
                            return Some(v1394);
                        }
                        let v34 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v35) = v34 {
                            let v1150 = C::unpack_value_array_3(ctx, v1149);
                            let v1379 = constructor_put_in_xreg(ctx, v1150.0);
                            let v1366 = constructor_put_in_xreg(ctx, v1150.1);
                            let v1380 = constructor_rv_and(ctx, v1379, v1366);
                            let v1381 = constructor_put_in_xreg(ctx, v1150.0);
                            let v1382 = constructor_rv_not(ctx, v1381);
                            let v1383 = constructor_put_in_xreg(ctx, v1150.2);
                            let v1384 = constructor_rv_and(ctx, v1382, v1383);
                            let v1385 = constructor_rv_or(ctx, v1380, v1384);
                            let v1386 = constructor_output_xreg(ctx, v1385);
                            // Rule at src/isa/riscv64/lower.isle line 1578.
                            return Some(v1386);
                        }
                    }
                }
                &Opcode::Fma => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v1150 = C::unpack_value_array_3(ctx, v1149);
                            let v1164 = C::def_inst(ctx, v1150.0);
                            if let Some(v1165) = v1164 {
                                let v1166 = &C::inst_data(ctx, v1165);
                                if let &InstructionData::Unary {
                                    opcode: ref v1167,
                                    arg: v1168,
                                } = v1166
                                {
                                    match v1167 {
                                        &Opcode::Splat => {
                                            let v1172 = C::def_inst(ctx, v1150.2);
                                            if let Some(v1173) = v1172 {
                                                let v1174 = &C::inst_data(ctx, v1173);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v1175,
                                                    arg: v1176,
                                                } = v1174
                                                {
                                                    if let &Opcode::Fneg = v1175 {
                                                        let v1177 =
                                                            constructor_put_in_vreg(ctx, v1176);
                                                        let v1160 =
                                                            constructor_put_in_vreg(ctx, v1150.1);
                                                        let v1169 =
                                                            constructor_put_in_freg(ctx, v1168);
                                                        let v163 = &constructor_unmasked(ctx);
                                                        let v164 = C::vstate_from_type(ctx, v11);
                                                        let v1180 = constructor_rv_vfmsac_vf(
                                                            ctx, v1177, v1160, v1169, v163, v164,
                                                        );
                                                        let v1181 =
                                                            constructor_output_vreg(ctx, v1180);
                                                        // Rule at src/isa/riscv64/lower.isle line 1304.
                                                        return Some(v1181);
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Fneg => {
                                            let v1185 = C::def_inst(ctx, v1168);
                                            if let Some(v1186) = v1185 {
                                                let v1187 = &C::inst_data(ctx, v1186);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v1188,
                                                    arg: v1189,
                                                } = v1187
                                                {
                                                    if let &Opcode::Splat = v1188 {
                                                        let v1172 = C::def_inst(ctx, v1150.2);
                                                        if let Some(v1173) = v1172 {
                                                            let v1174 = &C::inst_data(ctx, v1173);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v1175,
                                                                arg: v1176,
                                                            } = v1174
                                                            {
                                                                if let &Opcode::Fneg = v1175 {
                                                                    let v1177 =
                                                                        constructor_put_in_vreg(
                                                                            ctx, v1176,
                                                                        );
                                                                    let v1160 =
                                                                        constructor_put_in_vreg(
                                                                            ctx, v1150.1,
                                                                        );
                                                                    let v1190 =
                                                                        constructor_put_in_freg(
                                                                            ctx, v1189,
                                                                        );
                                                                    let v163 =
                                                                        &constructor_unmasked(ctx);
                                                                    let v164 = C::vstate_from_type(
                                                                        ctx, v11,
                                                                    );
                                                                    let v1191 =
                                                                        constructor_rv_vfnmacc_vf(
                                                                            ctx, v1177, v1160,
                                                                            v1190, v163, v164,
                                                                        );
                                                                    let v1192 =
                                                                        constructor_output_vreg(
                                                                            ctx, v1191,
                                                                        );
                                                                    // Rule at src/isa/riscv64/lower.isle line 1312.
                                                                    return Some(v1192);
                                                                }
                                                            }
                                                        }
                                                        let v1159 =
                                                            constructor_put_in_vreg(ctx, v1150.2);
                                                        let v1160 =
                                                            constructor_put_in_vreg(ctx, v1150.1);
                                                        let v1190 =
                                                            constructor_put_in_freg(ctx, v1189);
                                                        let v163 = &constructor_unmasked(ctx);
                                                        let v164 = C::vstate_from_type(ctx, v11);
                                                        let v1195 = constructor_rv_vfnmsac_vf(
                                                            ctx, v1159, v1160, v1190, v163, v164,
                                                        );
                                                        let v1196 =
                                                            constructor_output_vreg(ctx, v1195);
                                                        // Rule at src/isa/riscv64/lower.isle line 1320.
                                                        return Some(v1196);
                                                    }
                                                }
                                            }
                                            let v1172 = C::def_inst(ctx, v1150.2);
                                            if let Some(v1173) = v1172 {
                                                let v1174 = &C::inst_data(ctx, v1173);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v1175,
                                                    arg: v1176,
                                                } = v1174
                                                {
                                                    if let &Opcode::Fneg = v1175 {
                                                        let v1177 =
                                                            constructor_put_in_vreg(ctx, v1176);
                                                        let v1160 =
                                                            constructor_put_in_vreg(ctx, v1150.1);
                                                        let v1182 =
                                                            constructor_put_in_vreg(ctx, v1168);
                                                        let v163 = &constructor_unmasked(ctx);
                                                        let v164 = C::vstate_from_type(ctx, v11);
                                                        let v1183 = constructor_rv_vfnmacc_vv(
                                                            ctx, v1177, v1160, v1182, v163, v164,
                                                        );
                                                        let v1184 =
                                                            constructor_output_vreg(ctx, v1183);
                                                        // Rule at src/isa/riscv64/lower.isle line 1309.
                                                        return Some(v1184);
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v1172 = C::def_inst(ctx, v1150.2);
                            if let Some(v1173) = v1172 {
                                let v1174 = &C::inst_data(ctx, v1173);
                                if let &InstructionData::Unary {
                                    opcode: ref v1175,
                                    arg: v1176,
                                } = v1174
                                {
                                    if let &Opcode::Fneg = v1175 {
                                        let v1177 = constructor_put_in_vreg(ctx, v1176);
                                        let v1160 = constructor_put_in_vreg(ctx, v1150.1);
                                        let v1161 = constructor_put_in_vreg(ctx, v1150.0);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1178 = constructor_rv_vfmsac_vv(
                                            ctx, v1177, v1160, v1161, v163, v164,
                                        );
                                        let v1179 = constructor_output_vreg(ctx, v1178);
                                        // Rule at src/isa/riscv64/lower.isle line 1301.
                                        return Some(v1179);
                                    }
                                }
                            }
                            if let Some(v1165) = v1164 {
                                let v1166 = &C::inst_data(ctx, v1165);
                                if let &InstructionData::Unary {
                                    opcode: ref v1167,
                                    arg: v1168,
                                } = v1166
                                {
                                    match v1167 {
                                        &Opcode::Splat => {
                                            let v1159 = constructor_put_in_vreg(ctx, v1150.2);
                                            let v1160 = constructor_put_in_vreg(ctx, v1150.1);
                                            let v1169 = constructor_put_in_freg(ctx, v1168);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v164 = C::vstate_from_type(ctx, v11);
                                            let v1170 = constructor_rv_vfmacc_vf(
                                                ctx, v1159, v1160, v1169, v163, v164,
                                            );
                                            let v1171 = constructor_output_vreg(ctx, v1170);
                                            // Rule at src/isa/riscv64/lower.isle line 1296.
                                            return Some(v1171);
                                        }
                                        &Opcode::Fneg => {
                                            let v1159 = constructor_put_in_vreg(ctx, v1150.2);
                                            let v1160 = constructor_put_in_vreg(ctx, v1150.1);
                                            let v1182 = constructor_put_in_vreg(ctx, v1168);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v164 = C::vstate_from_type(ctx, v11);
                                            let v1193 = constructor_rv_vfnmsac_vv(
                                                ctx, v1159, v1160, v1182, v163, v164,
                                            );
                                            let v1194 = constructor_output_vreg(ctx, v1193);
                                            // Rule at src/isa/riscv64/lower.isle line 1317.
                                            return Some(v1194);
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v1159 = constructor_put_in_vreg(ctx, v1150.2);
                            let v1160 = constructor_put_in_vreg(ctx, v1150.1);
                            let v1161 = constructor_put_in_vreg(ctx, v1150.0);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1162 =
                                constructor_rv_vfmacc_vv(ctx, v1159, v1160, v1161, v163, v164);
                            let v1163 = constructor_output_vreg(ctx, v1162);
                            // Rule at src/isa/riscv64/lower.isle line 1293.
                            return Some(v1163);
                        }
                        let v584 = C::ty_scalar_float(ctx, v3);
                        if let Some(v585) = v584 {
                            let v1150 = C::unpack_value_array_3(ctx, v1149);
                            let v1154 = constructor_put_in_freg(ctx, v1150.0);
                            let v1155 = constructor_put_in_freg(ctx, v1150.1);
                            let v1156 = constructor_put_in_freg(ctx, v1150.2);
                            let v1157 = constructor_rv_fmadd(ctx, v585, v1154, v1155, v1156);
                            let v1158 = constructor_output_freg(ctx, v1157);
                            // Rule at src/isa/riscv64/lower.isle line 1286.
                            return Some(v1158);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref v1834,
            args: ref v1835,
            imm: v1836,
        } => {
            if let &Opcode::Insertlane = v1834 {
                let v1837 = C::unpack_value_array_2(ctx, v1835);
                let v1840 = C::value_type(ctx, v1837.0);
                let v1841 = C::ty_vec_fits_in_register(ctx, v1840);
                if let Some(v1842) = v1841 {
                    let v1860 = C::i64_from_iconst(ctx, v1837.1);
                    if let Some(v1861) = v1860 {
                        let v1862 = C::imm5_from_i64(ctx, v1861);
                        if let Some(v1863) = v1862 {
                            let v1846 = C::u8_from_uimm8(ctx, v1836);
                            let v1847 = C::u8_as_u64(ctx, v1846);
                            let v1848 = C::u64_shl(ctx, 0x1, v1847);
                            let v1849 = constructor_gen_vec_mask(ctx, v1848);
                            let v1850 = constructor_put_in_vreg(ctx, v1837.0);
                            let v1852 = C::vstate_from_type(ctx, v1842);
                            let v1864 = constructor_rv_vmerge_vim(ctx, v1850, v1863, v1849, v1852);
                            let v1865 = constructor_output_vreg(ctx, v1864);
                            // Rule at src/isa/riscv64/lower.isle line 2098.
                            return Some(v1865);
                        }
                    }
                    let v1843 = C::value_type(ctx, v1837.1);
                    let v1855 = C::ty_scalar_float(ctx, v1843);
                    if let Some(v1856) = v1855 {
                        let v1846 = C::u8_from_uimm8(ctx, v1836);
                        let v1847 = C::u8_as_u64(ctx, v1846);
                        let v1848 = C::u64_shl(ctx, 0x1, v1847);
                        let v1849 = constructor_gen_vec_mask(ctx, v1848);
                        let v1850 = constructor_put_in_vreg(ctx, v1837.0);
                        let v1857 = constructor_put_in_freg(ctx, v1837.1);
                        let v1852 = C::vstate_from_type(ctx, v1842);
                        let v1858 = constructor_rv_vfmerge_vfm(ctx, v1850, v1857, v1849, v1852);
                        let v1859 = constructor_output_vreg(ctx, v1858);
                        // Rule at src/isa/riscv64/lower.isle line 2090.
                        return Some(v1859);
                    }
                    let v1844 = C::ty_int(ctx, v1843);
                    if let Some(v1845) = v1844 {
                        let v1846 = C::u8_from_uimm8(ctx, v1836);
                        let v1847 = C::u8_as_u64(ctx, v1846);
                        let v1848 = C::u64_shl(ctx, 0x1, v1847);
                        let v1849 = constructor_gen_vec_mask(ctx, v1848);
                        let v1850 = constructor_put_in_vreg(ctx, v1837.0);
                        let v1851 = constructor_put_in_xreg(ctx, v1837.1);
                        let v1852 = C::vstate_from_type(ctx, v1842);
                        let v1853 = constructor_rv_vmerge_vxm(ctx, v1850, v1851, v1849, v1852);
                        let v1854 = constructor_output_vreg(ctx, v1853);
                        // Rule at src/isa/riscv64/lower.isle line 2083.
                        return Some(v1854);
                    }
                }
            }
        }
        &InstructionData::Trap {
            opcode: ref v1521,
            code: ref v1522,
        } => {
            match v1521 {
                &Opcode::Trap => {
                    let v1523 = constructor_udf(ctx, v1522);
                    // Rule at src/isa/riscv64/lower.isle line 1722.
                    return Some(v1523);
                }
                &Opcode::ResumableTrap => {
                    let v1523 = constructor_udf(ctx, v1522);
                    // Rule at src/isa/riscv64/lower.isle line 1727.
                    return Some(v1523);
                }
                _ => {}
            }
        }
        &InstructionData::Unary {
            opcode: ref v447,
            arg: v448,
        } => {
            match v447 {
                &Opcode::Splat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v836 = C::def_inst(ctx, v448);
                        if let Some(v837) = v836 {
                            let v841 = &C::inst_data(ctx, v837);
                            if let &InstructionData::UnaryImm {
                                opcode: ref v1873,
                                imm: v1874,
                            } = v841
                            {
                                if let &Opcode::Iconst = v1873 {
                                    let v1875 = C::u64_from_imm64(ctx, v1874);
                                    let v1876 = C::imm5_from_u64(ctx, v1875);
                                    if let Some(v1877) = v1876 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v1866 = C::vstate_from_type(ctx, v3);
                                        let v1878 = constructor_rv_vmv_vi(ctx, v1877, v1866);
                                        let v1879 = constructor_output_vreg(ctx, v1878);
                                        // Rule at src/isa/riscv64/lower.isle line 2112.
                                        return Some(v1879);
                                    }
                                }
                            }
                        }
                        let v827 = C::value_type(ctx, v448);
                        let v1869 = C::ty_int_ref_scalar_64_extract(ctx, v827);
                        if let Some(v1870) = v1869 {
                            let v715 = constructor_put_in_xreg(ctx, v448);
                            let v3 = C::value_type(ctx, v2);
                            let v1866 = C::vstate_from_type(ctx, v3);
                            let v1871 = constructor_rv_vmv_vx(ctx, v715, v1866);
                            let v1872 = constructor_output_vreg(ctx, v1871);
                            // Rule at src/isa/riscv64/lower.isle line 2109.
                            return Some(v1872);
                        }
                        let v1690 = C::ty_scalar_float(ctx, v827);
                        if let Some(v1691) = v1690 {
                            let v1132 = constructor_put_in_freg(ctx, v448);
                            let v3 = C::value_type(ctx, v2);
                            let v1866 = C::vstate_from_type(ctx, v3);
                            let v1867 = constructor_rv_vfmv_vf(ctx, v1132, v1866);
                            let v1868 = constructor_output_vreg(ctx, v1867);
                            // Rule at src/isa/riscv64/lower.isle line 2106.
                            return Some(v1868);
                        }
                    }
                }
                &Opcode::VanyTrue => {
                    let v827 = C::value_type(ctx, v448);
                    let v1908 = C::ty_vec_fits_in_register(ctx, v827);
                    if let Some(v1909) = v1908 {
                        let v452 = constructor_put_in_vreg(ctx, v448);
                        let v1696 = constructor_put_in_vreg(ctx, v448);
                        let v163 = &constructor_unmasked(ctx);
                        let v1913 = C::vstate_from_type(ctx, v1909);
                        let v1918 = constructor_rv_vredmaxu_vs(ctx, v452, v1696, v163, v1913);
                        let v1919 = constructor_rv_vmv_xs(ctx, v1918, v1913);
                        let v1920 = constructor_rv_snez(ctx, v1919);
                        let v1921 = constructor_output_xreg(ctx, v1920);
                        // Rule at src/isa/riscv64/lower.isle line 2197.
                        return Some(v1921);
                    }
                }
                &Opcode::VallTrue => {
                    let v827 = C::value_type(ctx, v448);
                    let v1908 = C::ty_vec_fits_in_register(ctx, v827);
                    if let Some(v1909) = v1908 {
                        let v1911 = C::i8_to_imm5(ctx, 0x1);
                        if let Some(v1912) = v1911 {
                            let v1913 = C::vstate_from_type(ctx, v1909);
                            let v1914 = constructor_rv_vmv_vi(ctx, v1912, v1913);
                            let v1696 = constructor_put_in_vreg(ctx, v448);
                            let v163 = &constructor_unmasked(ctx);
                            let v1915 = constructor_rv_vredminu_vs(ctx, v1696, v1914, v163, v1913);
                            let v1916 = constructor_rv_vmv_xs(ctx, v1915, v1913);
                            let v1917 = constructor_output_xreg(ctx, v1916);
                            // Rule at src/isa/riscv64/lower.isle line 2183.
                            return Some(v1917);
                        }
                    }
                }
                &Opcode::VhighBits => {
                    let v827 = C::value_type(ctx, v448);
                    let v1908 = C::ty_vec_fits_in_register(ctx, v827);
                    if let Some(v1909) = v1908 {
                        let v452 = constructor_put_in_vreg(ctx, v448);
                        let v1922 = C::zero_reg(ctx);
                        let v1923 = C::xreg_new(ctx, v1922);
                        let v163 = &constructor_unmasked(ctx);
                        let v1913 = C::vstate_from_type(ctx, v1909);
                        let v1924 = constructor_rv_vmslt_vx(ctx, v452, v1923, v163, v1913);
                        let v1926 = C::vstate_from_type(ctx, I64X2);
                        let v1927 = constructor_rv_vmv_xs(ctx, v1924, v1926);
                        let v1928 = C::ty_lane_mask(ctx, v1909);
                        let v1929 = constructor_gen_andi(ctx, v1927, v1928);
                        let v1930 = constructor_output_xreg(ctx, v1929);
                        // Rule at src/isa/riscv64/lower.isle line 2213.
                        return Some(v1930);
                    }
                }
                &Opcode::Ineg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v452 = constructor_put_in_vreg(ctx, v448);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v453 = constructor_rv_vneg_v(ctx, v452, v163, v164);
                            let v454 = constructor_output_vreg(ctx, v453);
                            // Rule at src/isa/riscv64/lower.isle line 433.
                            return Some(v454);
                        }
                        let v445 = C::ty_int(ctx, v3);
                        if let Some(v446) = v445 {
                            let v449 = C::put_in_regs(ctx, v448);
                            let v450 = constructor_neg(ctx, v446, v449);
                            let v451 = C::output(ctx, v450);
                            // Rule at src/isa/riscv64/lower.isle line 430.
                            return Some(v451);
                        }
                    }
                }
                &Opcode::Iabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v452 = constructor_put_in_vreg(ctx, v448);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v453 = constructor_rv_vneg_v(ctx, v452, v163, v164);
                            let v921 = constructor_put_in_vreg(ctx, v448);
                            let v1804 = constructor_rv_vmax_vv(ctx, v921, v453, v163, v164);
                            let v1805 = constructor_output_vreg(ctx, v1804);
                            // Rule at src/isa/riscv64/lower.isle line 2052.
                            return Some(v1805);
                        }
                        let v34 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v35) = v34 {
                            let v791 = constructor_sext(ctx, v448);
                            let v1800 = constructor_rv_neg(ctx, v791);
                            let v1801 = constructor_cmp_gt(ctx, v791, v1800);
                            let v1802 = constructor_gen_select_xreg(ctx, v1801, v791, v1800);
                            let v1803 = constructor_output_xreg(ctx, v1802);
                            // Rule at src/isa/riscv64/lower.isle line 2044.
                            return Some(v1803);
                        }
                    }
                }
                &Opcode::Bnot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v452 = constructor_put_in_vreg(ctx, v448);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v700 = constructor_rv_vnot_v(ctx, v452, v163, v164);
                            let v701 = constructor_output_vreg(ctx, v700);
                            // Rule at src/isa/riscv64/lower.isle line 810.
                            return Some(v701);
                        }
                        let v696 = C::ty_scalar(ctx, v3);
                        if let Some(v697) = v696 {
                            let v449 = C::put_in_regs(ctx, v448);
                            let v698 = constructor_gen_bnot(ctx, v697, v449);
                            let v699 = C::output(ctx, v698);
                            // Rule at src/isa/riscv64/lower.isle line 807.
                            return Some(v699);
                        }
                    }
                }
                &Opcode::Bitrev => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v449 = C::put_in_regs(ctx, v448);
                            let v705 = C::value_regs_get(ctx, v449, 0x0);
                            let v706 = constructor_lower_bit_reverse(ctx, v705, I64);
                            let v707 = C::xreg_new(ctx, v706);
                            let v708 = C::value_regs_get(ctx, v449, 0x1);
                            let v709 = constructor_lower_bit_reverse(ctx, v708, I64);
                            let v710 = C::xreg_new(ctx, v709);
                            let v711 = C::xreg_to_reg(ctx, v710);
                            let v712 = C::xreg_to_reg(ctx, v707);
                            let v713 = C::value_regs(ctx, v711, v712);
                            let v714 = C::output(ctx, v713);
                            // Rule at src/isa/riscv64/lower.isle line 817.
                            return Some(v714);
                        }
                        let v575 = C::fits_in_64(ctx, v3);
                        if let Some(v576) = v575 {
                            let v577 = C::ty_int(ctx, v576);
                            if let Some(v578) = v577 {
                                let v702 = C::put_in_reg(ctx, v448);
                                let v703 = constructor_lower_bit_reverse(ctx, v702, v578);
                                let v704 = constructor_output_reg(ctx, v703);
                                // Rule at src/isa/riscv64/lower.isle line 814.
                                return Some(v704);
                            }
                        }
                    }
                }
                &Opcode::Clz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v591 = C::has_zbb(ctx);
                        if v591 == true {
                            let v3 = C::value_type(ctx, v2);
                            match v3 {
                                I32 => {
                                    let v715 = constructor_put_in_xreg(ctx, v448);
                                    let v787 = constructor_rv_clzw(ctx, v715);
                                    let v788 = constructor_output_xreg(ctx, v787);
                                    // Rule at src/isa/riscv64/lower.isle line 908.
                                    return Some(v788);
                                }
                                I64 => {
                                    let v715 = constructor_put_in_xreg(ctx, v448);
                                    let v789 = constructor_rv_clz(ctx, v715);
                                    let v790 = constructor_output_xreg(ctx, v789);
                                    // Rule at src/isa/riscv64/lower.isle line 912.
                                    return Some(v790);
                                }
                                _ => {}
                            }
                            let v505 = C::fits_in_16(ctx, v3);
                            if let Some(v506) = v505 {
                                let v779 = constructor_zext(ctx, v448);
                                let v780 = constructor_rv_clz(ctx, v779);
                                let v781 = C::ty_bits(ctx, v506);
                                let v782 = C::u8_as_i32(ctx, v781);
                                let v784 = C::imm12_const_add(ctx, v782, -0x40);
                                let v785 = constructor_rv_addi(ctx, v780, v784);
                                let v786 = constructor_output_xreg(ctx, v785);
                                // Rule at src/isa/riscv64/lower.isle line 901.
                                return Some(v786);
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v449 = C::put_in_regs(ctx, v448);
                            let v705 = C::value_regs_get(ctx, v449, 0x0);
                            let v746 = C::xreg_new(ctx, v705);
                            let v747 = C::put_in_regs(ctx, v448);
                            let v748 = C::value_regs_get(ctx, v747, 0x1);
                            let v749 = C::xreg_new(ctx, v748);
                            let v768 = constructor_gen_clz(ctx, v749);
                            let v769 = constructor_gen_clz(ctx, v746);
                            let v770 = constructor_cmp_eqz(ctx, v749);
                            let v771 = C::zero_reg(ctx);
                            let v772 = C::xreg_new(ctx, v771);
                            let v773 = constructor_gen_select_xreg(ctx, v770, v769, v772);
                            let v774 = constructor_rv_add(ctx, v768, v773);
                            let v776 = constructor_imm(ctx, I64, 0x0);
                            let v775 = C::xreg_to_reg(ctx, v774);
                            let v777 = C::value_regs(ctx, v775, v776);
                            let v778 = C::output(ctx, v777);
                            // Rule at src/isa/riscv64/lower.isle line 891.
                            return Some(v778);
                        }
                        let v575 = C::fits_in_64(ctx, v3);
                        if let Some(v576) = v575 {
                            let v715 = constructor_put_in_xreg(ctx, v448);
                            let v766 = constructor_gen_cltz(ctx, true, v715, v576);
                            let v767 = constructor_output_xreg(ctx, v766);
                            // Rule at src/isa/riscv64/lower.isle line 888.
                            return Some(v767);
                        }
                    }
                }
                &Opcode::Cls => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v449 = C::put_in_regs(ctx, v448);
                            let v705 = C::value_regs_get(ctx, v449, 0x0);
                            let v746 = C::xreg_new(ctx, v705);
                            let v747 = C::put_in_regs(ctx, v448);
                            let v748 = C::value_regs_get(ctx, v747, 0x1);
                            let v749 = C::xreg_new(ctx, v748);
                            let v802 = constructor_cmp_ltz(ctx, v749);
                            let v803 = constructor_rv_not(ctx, v746);
                            let v804 = constructor_gen_select_xreg(ctx, v802, v803, v746);
                            let v805 = constructor_cmp_ltz(ctx, v749);
                            let v806 = constructor_rv_not(ctx, v749);
                            let v807 = constructor_gen_select_xreg(ctx, v805, v806, v749);
                            let v808 = constructor_gen_clz(ctx, v807);
                            let v809 = constructor_gen_clz(ctx, v804);
                            let v810 = constructor_cmp_eqz(ctx, v807);
                            let v811 = C::zero_reg(ctx);
                            let v812 = C::xreg_new(ctx, v811);
                            let v813 = constructor_gen_select_xreg(ctx, v810, v809, v812);
                            let v814 = constructor_rv_add(ctx, v808, v813);
                            let v816 = C::imm12_const(ctx, -0x1);
                            let v817 = constructor_rv_addi(ctx, v814, v816);
                            let v819 = constructor_imm(ctx, I64, 0x0);
                            let v818 = C::xreg_to_reg(ctx, v817);
                            let v820 = C::value_regs(ctx, v818, v819);
                            let v821 = C::output(ctx, v820);
                            // Rule at src/isa/riscv64/lower.isle line 936.
                            return Some(v821);
                        }
                        let v575 = C::fits_in_64(ctx, v3);
                        if let Some(v576) = v575 {
                            let v791 = constructor_sext(ctx, v448);
                            let v792 = constructor_cmp_ltz(ctx, v791);
                            let v793 = constructor_rv_not(ctx, v791);
                            let v794 = constructor_gen_select_xreg(ctx, v792, v793, v791);
                            let v795 = constructor_gen_clz(ctx, v794);
                            let v796 = C::ty_bits(ctx, v576);
                            let v797 = C::u8_as_i32(ctx, v796);
                            let v799 = C::imm12_const_add(ctx, v797, -0x41);
                            let v800 = constructor_rv_addi(ctx, v795, v799);
                            let v801 = constructor_output_xreg(ctx, v800);
                            // Rule at src/isa/riscv64/lower.isle line 925.
                            return Some(v801);
                        }
                    }
                }
                &Opcode::Ctz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v449 = C::put_in_regs(ctx, v448);
                            let v705 = C::value_regs_get(ctx, v449, 0x0);
                            let v746 = C::xreg_new(ctx, v705);
                            let v747 = C::put_in_regs(ctx, v448);
                            let v748 = C::value_regs_get(ctx, v747, 0x1);
                            let v749 = C::xreg_new(ctx, v748);
                            let v750 = C::xreg_to_reg(ctx, v749);
                            let v751 = constructor_lower_ctz(ctx, I64, v750);
                            let v752 = C::xreg_new(ctx, v751);
                            let v753 = C::xreg_to_reg(ctx, v746);
                            let v754 = constructor_lower_ctz(ctx, I64, v753);
                            let v755 = C::xreg_new(ctx, v754);
                            let v756 = constructor_cmp_eqz(ctx, v746);
                            let v757 = C::zero_reg(ctx);
                            let v758 = C::xreg_new(ctx, v757);
                            let v759 = constructor_gen_select_xreg(ctx, v756, v752, v758);
                            let v760 = constructor_rv_add(ctx, v755, v759);
                            let v762 = constructor_imm(ctx, I64, 0x0);
                            let v761 = C::xreg_to_reg(ctx, v760);
                            let v763 = C::value_regs(ctx, v761, v762);
                            let v764 = C::output(ctx, v763);
                            // Rule at src/isa/riscv64/lower.isle line 876.
                            return Some(v764);
                        }
                        let v575 = C::fits_in_64(ctx, v3);
                        if let Some(v576) = v575 {
                            let v702 = C::put_in_reg(ctx, v448);
                            let v744 = constructor_lower_ctz(ctx, v576, v702);
                            let v745 = constructor_output_reg(ctx, v744);
                            // Rule at src/isa/riscv64/lower.isle line 873.
                            return Some(v745);
                        }
                    }
                }
                &Opcode::Bswap => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v591 = C::has_zbb(ctx);
                        if v591 == true {
                            let v3 = C::value_type(ctx, v2);
                            match v3 {
                                I64 => {
                                    let v715 = constructor_put_in_xreg(ctx, v448);
                                    let v734 = constructor_rv_rev8(ctx, v715);
                                    let v737 = constructor_output_xreg(ctx, v734);
                                    // Rule at src/isa/riscv64/lower.isle line 838.
                                    return Some(v737);
                                }
                                I128 => {
                                    let v449 = C::put_in_regs(ctx, v448);
                                    let v718 = C::value_regs_get(ctx, v449, 0x1);
                                    let v719 = C::xreg_new(ctx, v718);
                                    let v738 = constructor_rv_rev8(ctx, v719);
                                    let v722 = C::put_in_regs(ctx, v448);
                                    let v723 = C::value_regs_get(ctx, v722, 0x0);
                                    let v724 = C::xreg_new(ctx, v723);
                                    let v740 = constructor_rv_rev8(ctx, v724);
                                    let v739 = C::xreg_to_reg(ctx, v738);
                                    let v741 = C::xreg_to_reg(ctx, v740);
                                    let v742 = C::value_regs(ctx, v739, v741);
                                    let v743 = C::output(ctx, v742);
                                    // Rule at src/isa/riscv64/lower.isle line 842.
                                    return Some(v743);
                                }
                                _ => {}
                            }
                            let v368 = C::fits_in_32(ctx, v3);
                            if let Some(v369) = v368 {
                                let v379 = C::ty_bits(ctx, v369);
                                let v730 = C::u8_as_u64(ctx, v379);
                                let v731 = C::u64_sub(ctx, 0x40, v730);
                                let v732 = constructor_u64_to_imm12(ctx, v731);
                                if let Some(v733) = v732 {
                                    let v715 = constructor_put_in_xreg(ctx, v448);
                                    let v734 = constructor_rv_rev8(ctx, v715);
                                    let v735 = constructor_rv_srli(ctx, v734, v733);
                                    let v736 = constructor_output_xreg(ctx, v735);
                                    // Rule at src/isa/riscv64/lower.isle line 833.
                                    return Some(v736);
                                }
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v449 = C::put_in_regs(ctx, v448);
                            let v718 = C::value_regs_get(ctx, v449, 0x1);
                            let v719 = C::xreg_new(ctx, v718);
                            let v720 = constructor_gen_bswap(ctx, I64, v719);
                            let v722 = C::put_in_regs(ctx, v448);
                            let v723 = C::value_regs_get(ctx, v722, 0x0);
                            let v724 = C::xreg_new(ctx, v723);
                            let v725 = constructor_gen_bswap(ctx, I64, v724);
                            let v721 = C::xreg_to_reg(ctx, v720);
                            let v726 = C::xreg_to_reg(ctx, v725);
                            let v727 = C::value_regs(ctx, v721, v726);
                            let v728 = C::output(ctx, v727);
                            // Rule at src/isa/riscv64/lower.isle line 828.
                            return Some(v728);
                        }
                        let v575 = C::fits_in_64(ctx, v3);
                        if let Some(v576) = v575 {
                            let v577 = C::ty_int(ctx, v576);
                            if let Some(v578) = v577 {
                                let v715 = constructor_put_in_xreg(ctx, v448);
                                let v716 = constructor_gen_bswap(ctx, v578, v715);
                                let v717 = constructor_output_xreg(ctx, v716);
                                // Rule at src/isa/riscv64/lower.isle line 825.
                                return Some(v717);
                            }
                        }
                    }
                }
                &Opcode::Popcnt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v907 = constructor_u64_to_uimm5(ctx, 0x1);
                            if let Some(v908) = v907 {
                                let v910 = constructor_u64_to_uimm5(ctx, 0x2);
                                if let Some(v911) = v910 {
                                    let v913 = constructor_u64_to_uimm5(ctx, 0x4);
                                    if let Some(v914) = v913 {
                                        let v915 = C::lane_type(ctx, v11);
                                        let v917 = C::ty_mask(ctx, v915);
                                        let v918 = C::u64_and(ctx, 0x5555555555555555, v917);
                                        let v919 = constructor_imm(ctx, v915, v918);
                                        let v920 = C::xreg_new(ctx, v919);
                                        let v921 = constructor_put_in_vreg(ctx, v448);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v922 =
                                            constructor_rv_vsrl_vi(ctx, v921, v908, v163, v164);
                                        let v923 =
                                            constructor_rv_vand_vx(ctx, v922, v920, v163, v164);
                                        let v924 = constructor_put_in_vreg(ctx, v448);
                                        let v925 =
                                            constructor_rv_vsub_vv(ctx, v924, v923, v163, v164);
                                        let v927 = C::u64_and(ctx, 0x3333333333333333, v917);
                                        let v928 = constructor_imm(ctx, v915, v927);
                                        let v929 = C::xreg_new(ctx, v928);
                                        let v930 =
                                            constructor_rv_vsrl_vi(ctx, v925, v911, v163, v164);
                                        let v931 =
                                            constructor_rv_vand_vx(ctx, v930, v929, v163, v164);
                                        let v932 =
                                            constructor_rv_vand_vx(ctx, v925, v929, v163, v164);
                                        let v933 =
                                            constructor_rv_vadd_vv(ctx, v932, v931, v163, v164);
                                        let v935 = C::u64_and(ctx, 0xF0F0F0F0F0F0F0F, v917);
                                        let v936 = constructor_imm(ctx, v915, v935);
                                        let v937 = C::xreg_new(ctx, v936);
                                        let v938 =
                                            constructor_rv_vsrl_vi(ctx, v933, v914, v163, v164);
                                        let v939 =
                                            constructor_rv_vadd_vv(ctx, v933, v938, v163, v164);
                                        let v940 =
                                            constructor_rv_vand_vx(ctx, v939, v937, v163, v164);
                                        let v942 = C::u64_and(ctx, 0x101010101010101, v917);
                                        let v943 = constructor_imm(ctx, v915, v942);
                                        let v944 = C::xreg_new(ctx, v943);
                                        let v945 =
                                            constructor_rv_vmul_vx(ctx, v940, v944, v163, v164);
                                        let v946 = C::ty_bits(ctx, v915);
                                        let v947 = C::u8_as_u64(ctx, v946);
                                        let v949 = C::u64_sub(ctx, v947, 0x8);
                                        let v950 = constructor_imm(ctx, I64, v949);
                                        let v951 = C::xreg_new(ctx, v950);
                                        let v952 =
                                            constructor_rv_vsrl_vx(ctx, v945, v951, v163, v164);
                                        let v953 = constructor_output_vreg(ctx, v952);
                                        // Rule at src/isa/riscv64/lower.isle line 1040.
                                        return Some(v953);
                                    }
                                }
                            }
                        }
                        let v591 = C::has_zbb(ctx);
                        if v591 == true {
                            match v3 {
                                I32 => {
                                    let v715 = constructor_put_in_xreg(ctx, v448);
                                    let v896 = constructor_rv_cpopw(ctx, v715);
                                    let v897 = constructor_output_xreg(ctx, v896);
                                    // Rule at src/isa/riscv64/lower.isle line 1015.
                                    return Some(v897);
                                }
                                I128 => {
                                    let v449 = C::put_in_regs(ctx, v448);
                                    let v705 = C::value_regs_get(ctx, v449, 0x0);
                                    let v746 = C::xreg_new(ctx, v705);
                                    let v898 = constructor_rv_cpop(ctx, v746);
                                    let v708 = C::value_regs_get(ctx, v449, 0x1);
                                    let v899 = C::xreg_new(ctx, v708);
                                    let v900 = constructor_rv_cpop(ctx, v899);
                                    let v901 = constructor_rv_add(ctx, v898, v900);
                                    let v903 = constructor_imm(ctx, I64, 0x0);
                                    let v902 = C::xreg_to_reg(ctx, v901);
                                    let v904 = C::value_regs(ctx, v902, v903);
                                    let v905 = C::output(ctx, v904);
                                    // Rule at src/isa/riscv64/lower.isle line 1019.
                                    return Some(v905);
                                }
                                _ => {}
                            }
                            let v575 = C::fits_in_64(ctx, v3);
                            if let Some(v576) = v575 {
                                let v779 = constructor_zext(ctx, v448);
                                let v894 = constructor_rv_cpop(ctx, v779);
                                let v895 = constructor_output_xreg(ctx, v894);
                                // Rule at src/isa/riscv64/lower.isle line 1011.
                                return Some(v895);
                            }
                        }
                        if v3 == I128 {
                            let v449 = C::put_in_regs(ctx, v448);
                            let v705 = C::value_regs_get(ctx, v449, 0x0);
                            let v746 = C::xreg_new(ctx, v705);
                            let v883 = constructor_gen_popcnt(ctx, v746);
                            let v884 = C::xreg_new(ctx, v883);
                            let v885 = C::value_regs_get(ctx, v449, 0x1);
                            let v886 = C::xreg_new(ctx, v885);
                            let v887 = constructor_gen_popcnt(ctx, v886);
                            let v888 = C::xreg_new(ctx, v887);
                            let v889 = constructor_rv_add(ctx, v884, v888);
                            let v891 = constructor_imm(ctx, I64, 0x0);
                            let v890 = C::xreg_to_reg(ctx, v889);
                            let v892 = C::value_regs(ctx, v890, v891);
                            let v893 = C::output(ctx, v892);
                            // Rule at src/isa/riscv64/lower.isle line 1003.
                            return Some(v893);
                        }
                        let v575 = C::fits_in_64(ctx, v3);
                        if let Some(v576) = v575 {
                            let v779 = constructor_zext(ctx, v448);
                            let v881 = constructor_gen_popcnt(ctx, v779);
                            let v882 = constructor_output_reg(ctx, v881);
                            // Rule at src/isa/riscv64/lower.isle line 1000.
                            return Some(v882);
                        }
                    }
                }
                &Opcode::Sqrt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v452 = constructor_put_in_vreg(ctx, v448);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1199 = constructor_rv_vfsqrt_v(ctx, v452, v163, v164);
                            let v1200 = constructor_output_vreg(ctx, v1199);
                            // Rule at src/isa/riscv64/lower.isle line 1328.
                            return Some(v1200);
                        }
                        let v584 = C::ty_scalar_float(ctx, v3);
                        if let Some(v585) = v584 {
                            let v1132 = constructor_put_in_freg(ctx, v448);
                            let v1197 = constructor_rv_fsqrt(ctx, v585, v1132);
                            let v1198 = constructor_output_freg(ctx, v1197);
                            // Rule at src/isa/riscv64/lower.isle line 1325.
                            return Some(v1198);
                        }
                    }
                }
                &Opcode::Fneg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v452 = constructor_put_in_vreg(ctx, v448);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1139 = constructor_rv_vfneg_v(ctx, v452, v163, v164);
                            let v1140 = constructor_output_vreg(ctx, v1139);
                            // Rule at src/isa/riscv64/lower.isle line 1272.
                            return Some(v1140);
                        }
                        let v584 = C::ty_scalar_float(ctx, v3);
                        if let Some(v585) = v584 {
                            let v1132 = constructor_put_in_freg(ctx, v448);
                            let v1137 = constructor_rv_fneg(ctx, v585, v1132);
                            let v1138 = constructor_output_freg(ctx, v1137);
                            // Rule at src/isa/riscv64/lower.isle line 1269.
                            return Some(v1138);
                        }
                    }
                }
                &Opcode::Fabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v452 = constructor_put_in_vreg(ctx, v448);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1135 = constructor_rv_vfabs_v(ctx, v452, v163, v164);
                            let v1136 = constructor_output_vreg(ctx, v1135);
                            // Rule at src/isa/riscv64/lower.isle line 1265.
                            return Some(v1136);
                        }
                        let v584 = C::ty_scalar_float(ctx, v3);
                        if let Some(v585) = v584 {
                            let v1132 = constructor_put_in_freg(ctx, v448);
                            let v1133 = constructor_rv_fabs(ctx, v585, v1132);
                            let v1134 = constructor_output_freg(ctx, v1133);
                            // Rule at src/isa/riscv64/lower.isle line 1262.
                            return Some(v1134);
                        }
                    }
                }
                &Opcode::Ceil => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v452 = constructor_put_in_vreg(ctx, v448);
                            let v1757 = constructor_gen_vec_round(ctx, v452, &FRM::RUP, v11);
                            let v1758 = constructor_output_vreg(ctx, v1757);
                            // Rule at src/isa/riscv64/lower.isle line 1973.
                            return Some(v1758);
                        }
                        let v584 = C::ty_scalar_float(ctx, v3);
                        if let Some(v585) = v584 {
                            let v702 = C::put_in_reg(ctx, v448);
                            let v1754 =
                                constructor_gen_float_round(ctx, &FloatRoundOP::Ceil, v702, v585);
                            let v1755 = constructor_output_reg(ctx, v1754);
                            // Rule at src/isa/riscv64/lower.isle line 1970.
                            return Some(v1755);
                        }
                    }
                }
                &Opcode::Floor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v452 = constructor_put_in_vreg(ctx, v448);
                            let v1763 = constructor_gen_vec_round(ctx, v452, &FRM::RDN, v11);
                            let v1764 = constructor_output_vreg(ctx, v1763);
                            // Rule at src/isa/riscv64/lower.isle line 1980.
                            return Some(v1764);
                        }
                        let v584 = C::ty_scalar_float(ctx, v3);
                        if let Some(v585) = v584 {
                            let v702 = C::put_in_reg(ctx, v448);
                            let v1760 =
                                constructor_gen_float_round(ctx, &FloatRoundOP::Floor, v702, v585);
                            let v1761 = constructor_output_reg(ctx, v1760);
                            // Rule at src/isa/riscv64/lower.isle line 1977.
                            return Some(v1761);
                        }
                    }
                }
                &Opcode::Trunc => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v452 = constructor_put_in_vreg(ctx, v448);
                            let v1769 = constructor_gen_vec_round(ctx, v452, &FRM::RTZ, v11);
                            let v1770 = constructor_output_vreg(ctx, v1769);
                            // Rule at src/isa/riscv64/lower.isle line 1987.
                            return Some(v1770);
                        }
                        let v584 = C::ty_scalar_float(ctx, v3);
                        if let Some(v585) = v584 {
                            let v702 = C::put_in_reg(ctx, v448);
                            let v1766 =
                                constructor_gen_float_round(ctx, &FloatRoundOP::Trunc, v702, v585);
                            let v1767 = constructor_output_reg(ctx, v1766);
                            // Rule at src/isa/riscv64/lower.isle line 1984.
                            return Some(v1767);
                        }
                    }
                }
                &Opcode::Nearest => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v452 = constructor_put_in_vreg(ctx, v448);
                            let v1775 = constructor_gen_vec_round(ctx, v452, &FRM::RNE, v11);
                            let v1776 = constructor_output_vreg(ctx, v1775);
                            // Rule at src/isa/riscv64/lower.isle line 1994.
                            return Some(v1776);
                        }
                        let v584 = C::ty_scalar_float(ctx, v3);
                        if let Some(v585) = v584 {
                            let v702 = C::put_in_reg(ctx, v448);
                            let v1772 = constructor_gen_float_round(
                                ctx,
                                &FloatRoundOP::Nearest,
                                v702,
                                v585,
                            );
                            let v1773 = constructor_output_reg(ctx, v1772);
                            // Rule at src/isa/riscv64/lower.isle line 1991.
                            return Some(v1773);
                        }
                    }
                }
                &Opcode::IsNull => {
                    let v715 = constructor_put_in_xreg(ctx, v448);
                    let v1358 = constructor_rv_seqz(ctx, v715);
                    let v1359 = constructor_output_xreg(ctx, v1358);
                    // Rule at src/isa/riscv64/lower.isle line 1553.
                    return Some(v1359);
                }
                &Opcode::IsInvalid => {
                    let v715 = constructor_put_in_xreg(ctx, v448);
                    let v1361 = C::imm12_const(ctx, 0x1);
                    let v1362 = constructor_rv_addi(ctx, v715, v1361);
                    let v1363 = constructor_rv_seqz(ctx, v1362);
                    let v1364 = constructor_output_xreg(ctx, v1363);
                    // Rule at src/isa/riscv64/lower.isle line 1559.
                    return Some(v1364);
                }
                &Opcode::ScalarToVector => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v630 = C::ty_vector_not_float(ctx, v11);
                            if let Some(v631) = v630 {
                                let v2032 = C::zero_reg(ctx);
                                let v2033 = C::xreg_new(ctx, v2032);
                                let v164 = C::vstate_from_type(ctx, v11);
                                let v2034 = constructor_rv_vmv_vx(ctx, v2033, v164);
                                let v2035 = constructor_gen_vec_mask(ctx, 0x1);
                                let v2036 = constructor_put_in_xreg(ctx, v448);
                                let v2037 =
                                    constructor_rv_vmerge_vxm(ctx, v2034, v2036, v2035, v164);
                                let v2038 = constructor_output_vreg(ctx, v2037);
                                // Rule at src/isa/riscv64/lower.isle line 2355.
                                return Some(v2038);
                            }
                            let v2039 = C::ty_vector_float(ctx, v11);
                            if let Some(v2040) = v2039 {
                                let v2032 = C::zero_reg(ctx);
                                let v2033 = C::xreg_new(ctx, v2032);
                                let v164 = C::vstate_from_type(ctx, v11);
                                let v2034 = constructor_rv_vmv_vx(ctx, v2033, v164);
                                let v2041 = constructor_put_in_freg(ctx, v448);
                                let v2042 = constructor_rv_vfmv_sf(ctx, v2041, v164);
                                let v2043 = constructor_gen_vec_mask(ctx, 0x1);
                                let v2044 =
                                    constructor_rv_vmerge_vvm(ctx, v2034, v2042, v2043, v164);
                                let v2045 = constructor_output_vreg(ctx, v2044);
                                // Rule at src/isa/riscv64/lower.isle line 2361.
                                return Some(v2045);
                            }
                        }
                    }
                }
                &Opcode::Bmask => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1786 = constructor_lower_bmask(ctx, v448, v3);
                        let v1787 = C::output(ctx, v1786);
                        // Rule at src/isa/riscv64/lower.isle line 2019.
                        return Some(v1787);
                    }
                }
                &Opcode::Ireduce => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v449 = C::put_in_regs(ctx, v448);
                        let v705 = C::value_regs_get(ctx, v449, 0x0);
                        let v1283 = constructor_output_reg(ctx, v705);
                        // Rule at src/isa/riscv64/lower.isle line 1423.
                        return Some(v1283);
                    }
                }
                &Opcode::SwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v836 = C::def_inst(ctx, v448);
                            if let Some(v837) = v836 {
                                let v841 = &C::inst_data(ctx, v837);
                                if let &InstructionData::Unary {
                                    opcode: ref v1961,
                                    arg: v1962,
                                } = v841
                                {
                                    if let &Opcode::SwidenLow = v1961 {
                                        let v1974 = C::def_inst(ctx, v1962);
                                        if let Some(v1975) = v1974 {
                                            let v1976 = &C::inst_data(ctx, v1975);
                                            if let &InstructionData::Unary {
                                                opcode: ref v1977,
                                                arg: v1978,
                                            } = v1976
                                            {
                                                if let &Opcode::SwidenLow = v1977 {
                                                    let v1984 = constructor_put_in_vreg(ctx, v1978);
                                                    let v163 = &constructor_unmasked(ctx);
                                                    let v164 = C::vstate_from_type(ctx, v11);
                                                    let v1999 = constructor_rv_vsext_vf8(
                                                        ctx, v1984, v163, v164,
                                                    );
                                                    let v2000 = constructor_output_vreg(ctx, v1999);
                                                    // Rule at src/isa/riscv64/lower.isle line 2286.
                                                    return Some(v2000);
                                                }
                                            }
                                        }
                                        let v1969 = constructor_put_in_vreg(ctx, v1962);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v1997 =
                                            constructor_rv_vsext_vf4(ctx, v1969, v163, v164);
                                        let v1998 = constructor_output_vreg(ctx, v1997);
                                        // Rule at src/isa/riscv64/lower.isle line 2283.
                                        return Some(v1998);
                                    }
                                }
                            }
                            let v452 = constructor_put_in_vreg(ctx, v448);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1995 = constructor_rv_vsext_vf2(ctx, v452, v163, v164);
                            let v1996 = constructor_output_vreg(ctx, v1995);
                            // Rule at src/isa/riscv64/lower.isle line 2280.
                            return Some(v1996);
                        }
                    }
                }
                &Opcode::SwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v836 = C::def_inst(ctx, v448);
                            if let Some(v837) = v836 {
                                let v841 = &C::inst_data(ctx, v837);
                                if let &InstructionData::Unary {
                                    opcode: ref v1961,
                                    arg: v1962,
                                } = v841
                                {
                                    if let &Opcode::SwidenHigh = v1961 {
                                        let v1974 = C::def_inst(ctx, v1962);
                                        if let Some(v1975) = v1974 {
                                            let v1976 = &C::inst_data(ctx, v1975);
                                            if let &InstructionData::Unary {
                                                opcode: ref v1977,
                                                arg: v1978,
                                            } = v1976
                                            {
                                                if let &Opcode::SwidenHigh = v1977 {
                                                    let v1979 = C::value_type(ctx, v1978);
                                                    let v1980 = C::ty_lane_count(ctx, v1979);
                                                    let v1965 = C::ty_lane_count(ctx, v11);
                                                    let v1981 = C::u64_sub(ctx, v1980, v1965);
                                                    let v1982 = C::uimm5_from_u64(ctx, v1981);
                                                    if let Some(v1983) = v1982 {
                                                        let v1984 =
                                                            constructor_put_in_vreg(ctx, v1978);
                                                        let v163 = &constructor_unmasked(ctx);
                                                        let v1985 = C::vstate_from_type(ctx, v1979);
                                                        let v1986 = constructor_rv_vslidedown_vi(
                                                            ctx, v1984, v1983, v163, v1985,
                                                        );
                                                        let v164 = C::vstate_from_type(ctx, v11);
                                                        let v1987 = constructor_rv_vsext_vf8(
                                                            ctx, v1986, v163, v164,
                                                        );
                                                        let v1988 =
                                                            constructor_output_vreg(ctx, v1987);
                                                        // Rule at src/isa/riscv64/lower.isle line 2260.
                                                        return Some(v1988);
                                                    }
                                                }
                                            }
                                        }
                                        let v1963 = C::value_type(ctx, v1962);
                                        let v1964 = C::ty_lane_count(ctx, v1963);
                                        let v1965 = C::ty_lane_count(ctx, v11);
                                        let v1966 = C::u64_sub(ctx, v1964, v1965);
                                        let v1967 = C::uimm5_from_u64(ctx, v1966);
                                        if let Some(v1968) = v1967 {
                                            let v1969 = constructor_put_in_vreg(ctx, v1962);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v1970 = C::vstate_from_type(ctx, v1963);
                                            let v1971 = constructor_rv_vslidedown_vi(
                                                ctx, v1969, v1968, v163, v1970,
                                            );
                                            let v164 = C::vstate_from_type(ctx, v11);
                                            let v1972 =
                                                constructor_rv_vsext_vf4(ctx, v1971, v163, v164);
                                            let v1973 = constructor_output_vreg(ctx, v1972);
                                            // Rule at src/isa/riscv64/lower.isle line 2256.
                                            return Some(v1973);
                                        }
                                    }
                                }
                            }
                            let v452 = constructor_put_in_vreg(ctx, v448);
                            let v827 = C::value_type(ctx, v448);
                            let v1958 = constructor_gen_slidedown_half(ctx, v827, v452);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1959 = constructor_rv_vsext_vf2(ctx, v1958, v163, v164);
                            let v1960 = constructor_output_vreg(ctx, v1959);
                            // Rule at src/isa/riscv64/lower.isle line 2253.
                            return Some(v1960);
                        }
                    }
                }
                &Opcode::UwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v836 = C::def_inst(ctx, v448);
                            if let Some(v837) = v836 {
                                let v841 = &C::inst_data(ctx, v837);
                                if let &InstructionData::Unary {
                                    opcode: ref v1961,
                                    arg: v1962,
                                } = v841
                                {
                                    if let &Opcode::UwidenLow = v1961 {
                                        let v1974 = C::def_inst(ctx, v1962);
                                        if let Some(v1975) = v1974 {
                                            let v1976 = &C::inst_data(ctx, v1975);
                                            if let &InstructionData::Unary {
                                                opcode: ref v1977,
                                                arg: v1978,
                                            } = v1976
                                            {
                                                if let &Opcode::UwidenLow = v1977 {
                                                    let v1984 = constructor_put_in_vreg(ctx, v1978);
                                                    let v163 = &constructor_unmasked(ctx);
                                                    let v164 = C::vstate_from_type(ctx, v11);
                                                    let v2005 = constructor_rv_vzext_vf8(
                                                        ctx, v1984, v163, v164,
                                                    );
                                                    let v2006 = constructor_output_vreg(ctx, v2005);
                                                    // Rule at src/isa/riscv64/lower.isle line 2297.
                                                    return Some(v2006);
                                                }
                                            }
                                        }
                                        let v1969 = constructor_put_in_vreg(ctx, v1962);
                                        let v163 = &constructor_unmasked(ctx);
                                        let v164 = C::vstate_from_type(ctx, v11);
                                        let v2003 =
                                            constructor_rv_vzext_vf4(ctx, v1969, v163, v164);
                                        let v2004 = constructor_output_vreg(ctx, v2003);
                                        // Rule at src/isa/riscv64/lower.isle line 2294.
                                        return Some(v2004);
                                    }
                                }
                            }
                            let v452 = constructor_put_in_vreg(ctx, v448);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v2001 = constructor_rv_vzext_vf2(ctx, v452, v163, v164);
                            let v2002 = constructor_output_vreg(ctx, v2001);
                            // Rule at src/isa/riscv64/lower.isle line 2291.
                            return Some(v2002);
                        }
                    }
                }
                &Opcode::UwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v836 = C::def_inst(ctx, v448);
                            if let Some(v837) = v836 {
                                let v841 = &C::inst_data(ctx, v837);
                                if let &InstructionData::Unary {
                                    opcode: ref v1961,
                                    arg: v1962,
                                } = v841
                                {
                                    if let &Opcode::UwidenHigh = v1961 {
                                        let v1974 = C::def_inst(ctx, v1962);
                                        if let Some(v1975) = v1974 {
                                            let v1976 = &C::inst_data(ctx, v1975);
                                            if let &InstructionData::Unary {
                                                opcode: ref v1977,
                                                arg: v1978,
                                            } = v1976
                                            {
                                                if let &Opcode::UwidenHigh = v1977 {
                                                    let v1979 = C::value_type(ctx, v1978);
                                                    let v1980 = C::ty_lane_count(ctx, v1979);
                                                    let v1965 = C::ty_lane_count(ctx, v11);
                                                    let v1981 = C::u64_sub(ctx, v1980, v1965);
                                                    let v1982 = C::uimm5_from_u64(ctx, v1981);
                                                    if let Some(v1983) = v1982 {
                                                        let v1984 =
                                                            constructor_put_in_vreg(ctx, v1978);
                                                        let v163 = &constructor_unmasked(ctx);
                                                        let v1985 = C::vstate_from_type(ctx, v1979);
                                                        let v1986 = constructor_rv_vslidedown_vi(
                                                            ctx, v1984, v1983, v163, v1985,
                                                        );
                                                        let v164 = C::vstate_from_type(ctx, v11);
                                                        let v1993 = constructor_rv_vzext_vf8(
                                                            ctx, v1986, v163, v164,
                                                        );
                                                        let v1994 =
                                                            constructor_output_vreg(ctx, v1993);
                                                        // Rule at src/isa/riscv64/lower.isle line 2274.
                                                        return Some(v1994);
                                                    }
                                                }
                                            }
                                        }
                                        let v1963 = C::value_type(ctx, v1962);
                                        let v1964 = C::ty_lane_count(ctx, v1963);
                                        let v1965 = C::ty_lane_count(ctx, v11);
                                        let v1966 = C::u64_sub(ctx, v1964, v1965);
                                        let v1967 = C::uimm5_from_u64(ctx, v1966);
                                        if let Some(v1968) = v1967 {
                                            let v1969 = constructor_put_in_vreg(ctx, v1962);
                                            let v163 = &constructor_unmasked(ctx);
                                            let v1970 = C::vstate_from_type(ctx, v1963);
                                            let v1971 = constructor_rv_vslidedown_vi(
                                                ctx, v1969, v1968, v163, v1970,
                                            );
                                            let v164 = C::vstate_from_type(ctx, v11);
                                            let v1991 =
                                                constructor_rv_vzext_vf4(ctx, v1971, v163, v164);
                                            let v1992 = constructor_output_vreg(ctx, v1991);
                                            // Rule at src/isa/riscv64/lower.isle line 2270.
                                            return Some(v1992);
                                        }
                                    }
                                }
                            }
                            let v452 = constructor_put_in_vreg(ctx, v448);
                            let v827 = C::value_type(ctx, v448);
                            let v1958 = constructor_gen_slidedown_half(ctx, v827, v452);
                            let v163 = &constructor_unmasked(ctx);
                            let v164 = C::vstate_from_type(ctx, v11);
                            let v1989 = constructor_rv_vzext_vf2(ctx, v1958, v163, v164);
                            let v1990 = constructor_output_vreg(ctx, v1989);
                            // Rule at src/isa/riscv64/lower.isle line 2267.
                            return Some(v1990);
                        }
                    }
                }
                &Opcode::Uextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v779 = constructor_zext(ctx, v448);
                            let v824 = constructor_imm(ctx, I64, 0x0);
                            let v823 = C::xreg_to_reg(ctx, v779);
                            let v825 = C::value_regs(ctx, v823, v824);
                            let v826 = C::output(ctx, v825);
                            // Rule at src/isa/riscv64/lower.isle line 955.
                            return Some(v826);
                        }
                        let v575 = C::fits_in_64(ctx, v3);
                        if let Some(v576) = v575 {
                            let v779 = constructor_zext(ctx, v448);
                            let v822 = constructor_output_xreg(ctx, v779);
                            // Rule at src/isa/riscv64/lower.isle line 953.
                            return Some(v822);
                        }
                    }
                }
                &Opcode::Sextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v836 = C::def_inst(ctx, v448);
                                if let Some(v837) = v836 {
                                    let v838 = C::first_result(ctx, v837);
                                    if let Some(v839) = v838 {
                                        let v840 = C::value_type(ctx, v839);
                                        if v840 == I32 {
                                            let v841 = &C::inst_data(ctx, v837);
                                            if let &InstructionData::Binary {
                                                opcode: ref v842,
                                                args: ref v843,
                                            } = v841
                                            {
                                                match v842 {
                                                    &Opcode::Iadd => {
                                                        let v844 =
                                                            C::unpack_value_array_2(ctx, v843);
                                                        let v868 = C::i64_from_iconst(ctx, v844.0);
                                                        if let Some(v869) = v868 {
                                                            let v870 = C::imm12_from_i64(ctx, v869);
                                                            if let Some(v871) = v870 {
                                                                let v872 = constructor_put_in_xreg(
                                                                    ctx, v844.1,
                                                                );
                                                                let v873 = constructor_rv_addiw(
                                                                    ctx, v872, v871,
                                                                );
                                                                let v874 = constructor_output_xreg(
                                                                    ctx, v873,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 986.
                                                                return Some(v874);
                                                            }
                                                        }
                                                        let v862 = C::i64_from_iconst(ctx, v844.1);
                                                        if let Some(v863) = v862 {
                                                            let v864 = C::imm12_from_i64(ctx, v863);
                                                            if let Some(v865) = v864 {
                                                                let v847 = constructor_put_in_xreg(
                                                                    ctx, v844.0,
                                                                );
                                                                let v866 = constructor_rv_addiw(
                                                                    ctx, v847, v865,
                                                                );
                                                                let v867 = constructor_output_xreg(
                                                                    ctx, v866,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 983.
                                                                return Some(v867);
                                                            }
                                                        }
                                                        let v847 =
                                                            constructor_put_in_xreg(ctx, v844.0);
                                                        let v848 =
                                                            constructor_put_in_xreg(ctx, v844.1);
                                                        let v849 =
                                                            constructor_rv_addw(ctx, v847, v848);
                                                        let v850 =
                                                            constructor_output_xreg(ctx, v849);
                                                        // Rule at src/isa/riscv64/lower.isle line 967.
                                                        return Some(v850);
                                                    }
                                                    &Opcode::Isub => {
                                                        let v844 =
                                                            C::unpack_value_array_2(ctx, v843);
                                                        let v847 =
                                                            constructor_put_in_xreg(ctx, v844.0);
                                                        let v848 =
                                                            constructor_put_in_xreg(ctx, v844.1);
                                                        let v851 =
                                                            constructor_rv_subw(ctx, v847, v848);
                                                        let v852 =
                                                            constructor_output_xreg(ctx, v851);
                                                        // Rule at src/isa/riscv64/lower.isle line 970.
                                                        return Some(v852);
                                                    }
                                                    &Opcode::Ishl => {
                                                        let v844 =
                                                            C::unpack_value_array_2(ctx, v843);
                                                        let v862 = C::i64_from_iconst(ctx, v844.1);
                                                        if let Some(v863) = v862 {
                                                            let v864 = C::imm12_from_i64(ctx, v863);
                                                            if let Some(v865) = v864 {
                                                                let v847 = constructor_put_in_xreg(
                                                                    ctx, v844.0,
                                                                );
                                                                let v875 = constructor_rv_slliw(
                                                                    ctx, v847, v865,
                                                                );
                                                                let v876 = constructor_output_xreg(
                                                                    ctx, v875,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 989.
                                                                return Some(v876);
                                                            }
                                                        }
                                                        let v847 =
                                                            constructor_put_in_xreg(ctx, v844.0);
                                                        let v853 = C::put_in_regs(ctx, v844.1);
                                                        let v854 =
                                                            C::value_regs_get(ctx, v853, 0x0);
                                                        let v855 = C::xreg_new(ctx, v854);
                                                        let v856 =
                                                            constructor_rv_sllw(ctx, v847, v855);
                                                        let v857 =
                                                            constructor_output_xreg(ctx, v856);
                                                        // Rule at src/isa/riscv64/lower.isle line 973.
                                                        return Some(v857);
                                                    }
                                                    &Opcode::Ushr => {
                                                        let v844 =
                                                            C::unpack_value_array_2(ctx, v843);
                                                        let v862 = C::i64_from_iconst(ctx, v844.1);
                                                        if let Some(v863) = v862 {
                                                            let v864 = C::imm12_from_i64(ctx, v863);
                                                            if let Some(v865) = v864 {
                                                                let v847 = constructor_put_in_xreg(
                                                                    ctx, v844.0,
                                                                );
                                                                let v877 = constructor_rv_srliw(
                                                                    ctx, v847, v865,
                                                                );
                                                                let v878 = constructor_output_xreg(
                                                                    ctx, v877,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 992.
                                                                return Some(v878);
                                                            }
                                                        }
                                                        let v847 =
                                                            constructor_put_in_xreg(ctx, v844.0);
                                                        let v853 = C::put_in_regs(ctx, v844.1);
                                                        let v854 =
                                                            C::value_regs_get(ctx, v853, 0x0);
                                                        let v855 = C::xreg_new(ctx, v854);
                                                        let v858 =
                                                            constructor_rv_srlw(ctx, v847, v855);
                                                        let v859 =
                                                            constructor_output_xreg(ctx, v858);
                                                        // Rule at src/isa/riscv64/lower.isle line 976.
                                                        return Some(v859);
                                                    }
                                                    &Opcode::Sshr => {
                                                        let v844 =
                                                            C::unpack_value_array_2(ctx, v843);
                                                        let v862 = C::i64_from_iconst(ctx, v844.1);
                                                        if let Some(v863) = v862 {
                                                            let v864 = C::imm12_from_i64(ctx, v863);
                                                            if let Some(v865) = v864 {
                                                                let v847 = constructor_put_in_xreg(
                                                                    ctx, v844.0,
                                                                );
                                                                let v879 = constructor_rv_sraiw(
                                                                    ctx, v847, v865,
                                                                );
                                                                let v880 = constructor_output_xreg(
                                                                    ctx, v879,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 995.
                                                                return Some(v880);
                                                            }
                                                        }
                                                        let v847 =
                                                            constructor_put_in_xreg(ctx, v844.0);
                                                        let v853 = C::put_in_regs(ctx, v844.1);
                                                        let v854 =
                                                            C::value_regs_get(ctx, v853, 0x0);
                                                        let v855 = C::xreg_new(ctx, v854);
                                                        let v860 =
                                                            constructor_rv_sraw(ctx, v847, v855);
                                                        let v861 =
                                                            constructor_output_xreg(ctx, v860);
                                                        // Rule at src/isa/riscv64/lower.isle line 979.
                                                        return Some(v861);
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v791 = constructor_sext(ctx, v448);
                                let v831 = C::imm12_const(ctx, 0x3F);
                                let v832 = constructor_rv_srai(ctx, v791, v831);
                                let v829 = C::xreg_to_reg(ctx, v791);
                                let v833 = C::xreg_to_reg(ctx, v832);
                                let v834 = C::value_regs(ctx, v829, v833);
                                let v835 = C::output(ctx, v834);
                                // Rule at src/isa/riscv64/lower.isle line 961.
                                return Some(v835);
                            }
                            _ => {}
                        }
                        let v575 = C::fits_in_64(ctx, v3);
                        if let Some(v576) = v575 {
                            let v791 = constructor_sext(ctx, v448);
                            let v828 = constructor_output_xreg(ctx, v791);
                            // Rule at src/isa/riscv64/lower.isle line 959.
                            return Some(v828);
                        }
                    }
                }
                &Opcode::Fpromote => {
                    let v1132 = constructor_put_in_freg(ctx, v448);
                    let v1284 = constructor_rv_fcvtds(ctx, v1132);
                    let v1285 = constructor_output_freg(ctx, v1284);
                    // Rule at src/isa/riscv64/lower.isle line 1427.
                    return Some(v1285);
                }
                &Opcode::Fdemote => {
                    let v1132 = constructor_put_in_freg(ctx, v448);
                    let v1288 = constructor_rv_fcvtsd(ctx, v1132);
                    let v1289 = constructor_output_freg(ctx, v1288);
                    // Rule at src/isa/riscv64/lower.isle line 1437.
                    return Some(v1289);
                }
                &Opcode::Fvdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            if v11 == F32X4 {
                                let v1291 = C::i8_to_imm5(ctx, 0x0);
                                if let Some(v1292) = v1291 {
                                    let v452 = constructor_put_in_vreg(ctx, v448);
                                    let v163 = &constructor_unmasked(ctx);
                                    let v164 = C::vstate_from_type(ctx, v11);
                                    let v1293 = C::vstate_mf2(ctx, v164);
                                    let v1294 = constructor_rv_vfncvt_f_f_w(ctx, v452, v163, v1293);
                                    let v1296 = constructor_gen_vec_mask(ctx, 0xC);
                                    let v1297 =
                                        constructor_rv_vmerge_vim(ctx, v1294, v1292, v1296, v164);
                                    let v1298 = constructor_output_vreg(ctx, v1297);
                                    // Rule at src/isa/riscv64/lower.isle line 1444.
                                    return Some(v1298);
                                }
                            }
                        }
                    }
                }
                &Opcode::FvpromoteLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v176 = C::ty_half_width(ctx, v11);
                            if let Some(v177) = v176 {
                                let v452 = constructor_put_in_vreg(ctx, v448);
                                let v163 = &constructor_unmasked(ctx);
                                let v181 = C::vstate_from_type(ctx, v177);
                                let v182 = C::vstate_mf2(ctx, v181);
                                let v1286 = constructor_rv_vfwcvt_f_f_v(ctx, v452, v163, v182);
                                let v1287 = constructor_output_vreg(ctx, v1286);
                                // Rule at src/isa/riscv64/lower.isle line 1432.
                                return Some(v1287);
                            }
                        }
                    }
                }
                &Opcode::FcvtToUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1132 = constructor_put_in_freg(ctx, v448);
                        let v827 = C::value_type(ctx, v448);
                        let v3 = C::value_type(ctx, v2);
                        let v1688 = constructor_gen_fcvt_int(ctx, false, v1132, false, v827, v3);
                        let v1689 = constructor_output_xreg(ctx, v1688);
                        // Rule at src/isa/riscv64/lower.isle line 1883.
                        return Some(v1689);
                    }
                }
                &Opcode::FcvtToSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v827 = C::value_type(ctx, v448);
                        let v1690 = C::ty_scalar_float(ctx, v827);
                        if let Some(v1691) = v1690 {
                            let v1132 = constructor_put_in_freg(ctx, v448);
                            let v3 = C::value_type(ctx, v2);
                            let v1692 =
                                constructor_gen_fcvt_int(ctx, false, v1132, true, v1691, v3);
                            let v1693 = constructor_output_xreg(ctx, v1692);
                            // Rule at src/isa/riscv64/lower.isle line 1887.
                            return Some(v1693);
                        }
                    }
                }
                &Opcode::FcvtToUintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v1291 = C::i8_to_imm5(ctx, 0x0);
                            if let Some(v1292) = v1291 {
                                let v452 = constructor_put_in_vreg(ctx, v448);
                                let v1696 = constructor_put_in_vreg(ctx, v448);
                                let v163 = &constructor_unmasked(ctx);
                                let v827 = C::value_type(ctx, v448);
                                let v1697 = C::vstate_from_type(ctx, v827);
                                let v1698 = constructor_rv_vmfne_vv(ctx, v452, v1696, v163, v1697);
                                let v1699 = constructor_put_in_vreg(ctx, v448);
                                let v1705 =
                                    constructor_rv_vfcvt_rtz_xu_f_v(ctx, v1699, v163, v1697);
                                let v1706 =
                                    constructor_rv_vmerge_vim(ctx, v1705, v1292, v1698, v1697);
                                let v1707 = constructor_output_vreg(ctx, v1706);
                                // Rule at src/isa/riscv64/lower.isle line 1904.
                                return Some(v1707);
                            }
                        }
                        let v827 = C::value_type(ctx, v448);
                        let v1690 = C::ty_scalar_float(ctx, v827);
                        if let Some(v1691) = v1690 {
                            let v1132 = constructor_put_in_freg(ctx, v448);
                            let v1703 =
                                constructor_gen_fcvt_int(ctx, true, v1132, false, v1691, v3);
                            let v1704 = constructor_output_xreg(ctx, v1703);
                            // Rule at src/isa/riscv64/lower.isle line 1901.
                            return Some(v1704);
                        }
                    }
                }
                &Opcode::FcvtToSintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v1291 = C::i8_to_imm5(ctx, 0x0);
                            if let Some(v1292) = v1291 {
                                let v452 = constructor_put_in_vreg(ctx, v448);
                                let v1696 = constructor_put_in_vreg(ctx, v448);
                                let v163 = &constructor_unmasked(ctx);
                                let v827 = C::value_type(ctx, v448);
                                let v1697 = C::vstate_from_type(ctx, v827);
                                let v1698 = constructor_rv_vmfne_vv(ctx, v452, v1696, v163, v1697);
                                let v1699 = constructor_put_in_vreg(ctx, v448);
                                let v1700 = constructor_rv_vfcvt_rtz_x_f_v(ctx, v1699, v163, v1697);
                                let v1701 =
                                    constructor_rv_vmerge_vim(ctx, v1700, v1292, v1698, v1697);
                                let v1702 = constructor_output_vreg(ctx, v1701);
                                // Rule at src/isa/riscv64/lower.isle line 1894.
                                return Some(v1702);
                            }
                        }
                        let v827 = C::value_type(ctx, v448);
                        let v1690 = C::ty_scalar_float(ctx, v827);
                        if let Some(v1691) = v1690 {
                            let v1132 = constructor_put_in_freg(ctx, v448);
                            let v1694 = constructor_gen_fcvt_int(ctx, true, v1132, true, v1691, v3);
                            let v1695 = constructor_output_xreg(ctx, v1694);
                            // Rule at src/isa/riscv64/lower.isle line 1891.
                            return Some(v1695);
                        }
                    }
                }
                &Opcode::FcvtFromUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v452 = constructor_put_in_vreg(ctx, v448);
                            let v163 = &constructor_unmasked(ctx);
                            let v827 = C::value_type(ctx, v448);
                            let v1697 = C::vstate_from_type(ctx, v827);
                            let v1736 = constructor_rv_vfcvt_f_xu_v(ctx, v452, v163, v1697);
                            let v1737 = constructor_output_vreg(ctx, v1736);
                            // Rule at src/isa/riscv64/lower.isle line 1951.
                            return Some(v1737);
                        }
                        match v3 {
                            F32 => {
                                let v827 = C::value_type(ctx, v448);
                                match v827 {
                                    I32 => {
                                        let v715 = constructor_put_in_xreg(ctx, v448);
                                        let v1726 = constructor_rv_fcvtswu(ctx, v715);
                                        let v1727 = constructor_output_freg(ctx, v1726);
                                        // Rule at src/isa/riscv64/lower.isle line 1936.
                                        return Some(v1727);
                                    }
                                    I64 => {
                                        let v715 = constructor_put_in_xreg(ctx, v448);
                                        let v1728 = constructor_rv_fcvtslu(ctx, v715);
                                        let v1729 = constructor_output_freg(ctx, v1728);
                                        // Rule at src/isa/riscv64/lower.isle line 1939.
                                        return Some(v1729);
                                    }
                                    _ => {}
                                }
                                let v1708 = C::fits_in_16(ctx, v827);
                                if let Some(v1709) = v1708 {
                                    let v779 = constructor_zext(ctx, v448);
                                    let v1724 = constructor_rv_fcvtslu(ctx, v779);
                                    let v1725 = constructor_output_freg(ctx, v1724);
                                    // Rule at src/isa/riscv64/lower.isle line 1933.
                                    return Some(v1725);
                                }
                            }
                            F64 => {
                                let v827 = C::value_type(ctx, v448);
                                match v827 {
                                    I32 => {
                                        let v715 = constructor_put_in_xreg(ctx, v448);
                                        let v1732 = constructor_rv_fcvtdwu(ctx, v715);
                                        let v1733 = constructor_output_freg(ctx, v1732);
                                        // Rule at src/isa/riscv64/lower.isle line 1945.
                                        return Some(v1733);
                                    }
                                    I64 => {
                                        let v715 = constructor_put_in_xreg(ctx, v448);
                                        let v1734 = constructor_rv_fcvtdlu(ctx, v715);
                                        let v1735 = constructor_output_freg(ctx, v1734);
                                        // Rule at src/isa/riscv64/lower.isle line 1948.
                                        return Some(v1735);
                                    }
                                    _ => {}
                                }
                                let v1708 = C::fits_in_16(ctx, v827);
                                if let Some(v1709) = v1708 {
                                    let v779 = constructor_zext(ctx, v448);
                                    let v1730 = constructor_rv_fcvtdlu(ctx, v779);
                                    let v1731 = constructor_output_freg(ctx, v1730);
                                    // Rule at src/isa/riscv64/lower.isle line 1942.
                                    return Some(v1731);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FcvtFromSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v452 = constructor_put_in_vreg(ctx, v448);
                            let v163 = &constructor_unmasked(ctx);
                            let v827 = C::value_type(ctx, v448);
                            let v1697 = C::vstate_from_type(ctx, v827);
                            let v1722 = constructor_rv_vfcvt_f_x_v(ctx, v452, v163, v1697);
                            let v1723 = constructor_output_vreg(ctx, v1722);
                            // Rule at src/isa/riscv64/lower.isle line 1929.
                            return Some(v1723);
                        }
                        match v3 {
                            F32 => {
                                let v827 = C::value_type(ctx, v448);
                                match v827 {
                                    I32 => {
                                        let v715 = constructor_put_in_xreg(ctx, v448);
                                        let v1712 = constructor_rv_fcvtsw(ctx, v715);
                                        let v1713 = constructor_output_freg(ctx, v1712);
                                        // Rule at src/isa/riscv64/lower.isle line 1914.
                                        return Some(v1713);
                                    }
                                    I64 => {
                                        let v715 = constructor_put_in_xreg(ctx, v448);
                                        let v1714 = constructor_rv_fcvtsl(ctx, v715);
                                        let v1715 = constructor_output_freg(ctx, v1714);
                                        // Rule at src/isa/riscv64/lower.isle line 1917.
                                        return Some(v1715);
                                    }
                                    _ => {}
                                }
                                let v1708 = C::fits_in_16(ctx, v827);
                                if let Some(v1709) = v1708 {
                                    let v791 = constructor_sext(ctx, v448);
                                    let v1710 = constructor_rv_fcvtsl(ctx, v791);
                                    let v1711 = constructor_output_freg(ctx, v1710);
                                    // Rule at src/isa/riscv64/lower.isle line 1911.
                                    return Some(v1711);
                                }
                            }
                            F64 => {
                                let v827 = C::value_type(ctx, v448);
                                match v827 {
                                    I32 => {
                                        let v715 = constructor_put_in_xreg(ctx, v448);
                                        let v1718 = constructor_rv_fcvtdw(ctx, v715);
                                        let v1719 = constructor_output_freg(ctx, v1718);
                                        // Rule at src/isa/riscv64/lower.isle line 1923.
                                        return Some(v1719);
                                    }
                                    I64 => {
                                        let v715 = constructor_put_in_xreg(ctx, v448);
                                        let v1720 = constructor_rv_fcvtdl(ctx, v715);
                                        let v1721 = constructor_output_freg(ctx, v1720);
                                        // Rule at src/isa/riscv64/lower.isle line 1926.
                                        return Some(v1721);
                                    }
                                    _ => {}
                                }
                                let v1708 = C::fits_in_16(ctx, v827);
                                if let Some(v1709) = v1708 {
                                    let v791 = constructor_sext(ctx, v448);
                                    let v1716 = constructor_rv_fcvtdl(ctx, v791);
                                    let v1717 = constructor_output_freg(ctx, v1716);
                                    // Rule at src/isa/riscv64/lower.isle line 1920.
                                    return Some(v1717);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Isplit => {
                    let v449 = C::put_in_regs(ctx, v448);
                    let v705 = C::value_regs_get(ctx, v449, 0x0);
                    let v746 = C::xreg_new(ctx, v705);
                    let v747 = C::put_in_regs(ctx, v448);
                    let v748 = C::value_regs_get(ctx, v747, 0x1);
                    let v749 = C::xreg_new(ctx, v748);
                    let v753 = C::xreg_to_reg(ctx, v746);
                    let v1451 = C::value_reg(ctx, v753);
                    let v750 = C::xreg_to_reg(ctx, v749);
                    let v1452 = C::value_reg(ctx, v750);
                    let v1453 = C::output_pair(ctx, v1451, v1452);
                    // Rule at src/isa/riscv64/lower.isle line 1618.
                    return Some(v1453);
                }
                _ => {}
            }
        }
        &InstructionData::UnaryConst {
            opcode: ref v12,
            constant_handle: v13,
        } => {
            if let &Opcode::Vconst = v12 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v10 = C::ty_vec_fits_in_register(ctx, v3);
                    if let Some(v11) = v10 {
                        let v14 = C::const_to_vconst(ctx, v13);
                        let v15 = constructor_gen_constant(ctx, v11, v14);
                        let v16 = constructor_output_vreg(ctx, v15);
                        // Rule at src/isa/riscv64/lower.isle line 14.
                        return Some(v16);
                    }
                }
            }
        }
        &InstructionData::UnaryGlobalValue {
            opcode: ref v1738,
            global_value: v1739,
        } => {
            match v1738 {
                &Opcode::SymbolValue => {
                    let v1740 = C::symbol_value_data(ctx, v1739);
                    if let Some(v1741) = v1740 {
                        let v1745 = C::load_ext_name(ctx, v1741.0, v1741.2);
                        let v1746 = constructor_output_reg(ctx, v1745);
                        // Rule at src/isa/riscv64/lower.isle line 1956.
                        return Some(v1746);
                    }
                }
                &Opcode::TlsValue => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1740 = C::symbol_value_data(ctx, v1739);
                        if let Some(v1741) = v1740 {
                            let v3 = C::value_type(ctx, v2);
                            let v1747 = &C::tls_model(ctx, v3);
                            if let &TlsModel::ElfGd = v1747 {
                                let v1748 = constructor_elf_tls_get_addr(ctx, v1741.0);
                                let v1749 = constructor_output_reg(ctx, v1748);
                                // Rule at src/isa/riscv64/lower.isle line 1961.
                                return Some(v1749);
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryIeee32 {
            opcode: ref v17,
            imm: v18,
        } => {
            if let &Opcode::F32const = v17 {
                let v19 = C::u32_from_ieee32(ctx, v18);
                let v21 = C::u32_as_u64(ctx, v19);
                let v22 = constructor_imm(ctx, F32, v21);
                let v23 = constructor_output_reg(ctx, v22);
                // Rule at src/isa/riscv64/lower.isle line 19.
                return Some(v23);
            }
        }
        &InstructionData::UnaryIeee64 {
            opcode: ref v24,
            imm: v25,
        } => {
            if let &Opcode::F64const = v24 {
                let v26 = C::u64_from_ieee64(ctx, v25);
                let v28 = constructor_imm(ctx, F64, v26);
                let v29 = constructor_output_reg(ctx, v28);
                // Rule at src/isa/riscv64/lower.isle line 24.
                return Some(v29);
            }
        }
        &InstructionData::UnaryImm {
            opcode: ref v5,
            imm: v6,
        } => {
            if let &Opcode::Iconst = v5 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v7 = C::u64_from_imm64(ctx, v6);
                    let v8 = constructor_imm(ctx, v3, v7);
                    let v9 = constructor_output_reg(ctx, v8);
                    // Rule at src/isa/riscv64/lower.isle line 9.
                    return Some(v9);
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term match_shnadd.
pub fn constructor_match_shnadd<C: Context>(ctx: &mut C, arg0: Imm64) -> Option<AluOPRRR> {
    let v1 = C::u64_from_imm64(ctx, arg0);
    match v1 {
        0x1 => {
            // Rule at src/isa/riscv64/lower.isle line 58.
            return Some(AluOPRRR::Sh1add);
        }
        0x2 => {
            // Rule at src/isa/riscv64/lower.isle line 59.
            return Some(AluOPRRR::Sh2add);
        }
        0x3 => {
            // Rule at src/isa/riscv64/lower.isle line 60.
            return Some(AluOPRRR::Sh3add);
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term match_shnadd_uw.
pub fn constructor_match_shnadd_uw<C: Context>(ctx: &mut C, arg0: Imm64) -> Option<AluOPRRR> {
    let v1 = C::u64_from_imm64(ctx, arg0);
    match v1 {
        0x1 => {
            // Rule at src/isa/riscv64/lower.isle line 80.
            return Some(AluOPRRR::Sh1adduw);
        }
        0x2 => {
            // Rule at src/isa/riscv64/lower.isle line 81.
            return Some(AluOPRRR::Sh2adduw);
        }
        0x3 => {
            // Rule at src/isa/riscv64/lower.isle line 82.
            return Some(AluOPRRR::Sh3adduw);
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term nonzero_divisor.
pub fn constructor_nonzero_divisor<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::zero_reg(ctx);
    let v3 = C::xreg_new(ctx, v2);
    let v5 = constructor_gen_trapif(
        ctx,
        &IntCC::Equal,
        arg0,
        v3,
        &TrapCode::IntegerDivisionByZero,
    );
    // Rule at src/isa/riscv64/lower.isle line 542.
    return arg0;
}

// Generated as internal constructor for term safe_sdiv_divisor.
pub fn constructor_safe_sdiv_divisor<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: XReg,
    arg2: XReg,
) -> XReg {
    let v3 = constructor_nonzero_divisor(ctx, arg2);
    let v6 = C::ty_bits(ctx, arg0);
    let v7 = C::u8_as_u64(ctx, v6);
    let v9 = C::u64_sub(ctx, v7, 0x1);
    let v10 = C::u64_shl(ctx, 0xFFFFFFFFFFFFFFFF, v9);
    let v11 = constructor_imm(ctx, I64, v10);
    let v12 = C::xreg_new(ctx, v11);
    let v13 = constructor_rv_xor(ctx, arg1, v12);
    let v14 = constructor_rv_not(ctx, v3);
    let v15 = constructor_rv_or(ctx, v13, v14);
    let v17 = C::zero_reg(ctx);
    let v18 = C::xreg_new(ctx, v17);
    let v20 = constructor_gen_trapif(ctx, &IntCC::Equal, v15, v18, &TrapCode::IntegerOverflow);
    // Rule at src/isa/riscv64/lower.isle line 582.
    return v3;
}

// Generated as internal constructor for term gen_bswap.
pub fn constructor_gen_bswap<C: Context>(ctx: &mut C, arg0: Type, arg1: XReg) -> XReg {
    let v2 = C::ty_int_ref_16_to_64(ctx, arg0);
    if let Some(v3) = v2 {
        let v4 = C::ty_half_width(ctx, v3);
        if let Some(v5) = v4 {
            let v6 = C::ty_bits(ctx, v5);
            let v7 = C::u8_as_u64(ctx, v6);
            let v8 = constructor_u64_to_imm12(ctx, v7);
            if let Some(v9) = v8 {
                let v10 = constructor_gen_bswap(ctx, v5, arg1);
                let v11 = constructor_rv_slli(ctx, v10, v9);
                let v12 = constructor_rv_srli(ctx, arg1, v9);
                let v13 = constructor_gen_bswap(ctx, v5, v12);
                let v15 = C::u64_sub(ctx, 0x40, v7);
                let v16 = C::imm_from_bits(ctx, v15);
                let v17 = constructor_rv_slli(ctx, v13, v16);
                let v18 = constructor_rv_srli(ctx, v17, v16);
                let v19 = constructor_rv_or(ctx, v11, v18);
                // Rule at src/isa/riscv64/lower.isle line 853.
                return v19;
            }
        }
    }
    if arg0 == I8 {
        // Rule at src/isa/riscv64/lower.isle line 852.
        return arg1;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_bswap", "src/isa/riscv64/lower.isle line 849"
    )
}

// Generated as internal constructor for term gen_clz.
pub fn constructor_gen_clz<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v4 = C::has_zbb(ctx);
    if v4 == true {
        let v5 = constructor_rv_clz(ctx, arg0);
        // Rule at src/isa/riscv64/lower.isle line 919.
        return v5;
    }
    let v3 = constructor_gen_cltz(ctx, true, arg0, I64);
    // Rule at src/isa/riscv64/lower.isle line 917.
    return v3;
}

// Generated as internal constructor for term gen_atomic_rmw_loop.
pub fn constructor_gen_atomic_rmw_loop<C: Context>(
    ctx: &mut C,
    arg0: &AtomicRmwOp,
    arg1: Type,
    arg2: XReg,
    arg3: XReg,
) -> XReg {
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = constructor_temp_writable_xreg(ctx);
    let v6 = constructor_gen_atomic_offset(ctx, arg2, arg1);
    let v9 = constructor_gen_atomic_p(ctx, arg2, arg1);
    let v7 = C::xreg_to_reg(ctx, v6);
    let v8 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v10 = C::xreg_to_reg(ctx, v9);
    let v11 = C::xreg_to_reg(ctx, arg3);
    let v12 = C::writable_xreg_to_writable_reg(ctx, v5);
    let v13 = MInst::AtomicRmwLoop {
        offset: v7,
        op: arg0.clone(),
        dst: v8,
        ty: arg1,
        p: v10,
        x: v11,
        t0: v12,
    };
    let v14 = C::emit(ctx, &v13);
    let v15 = C::writable_reg_to_reg(ctx, v8);
    let v16 = C::xreg_new(ctx, v15);
    // Rule at src/isa/riscv64/lower.isle line 1370.
    return v16;
}

// Generated as internal constructor for term gen_atomic_offset.
pub fn constructor_gen_atomic_offset<C: Context>(ctx: &mut C, arg0: XReg, arg1: Type) -> XReg {
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = C::imm12_const(ctx, 0x3);
        let v6 = constructor_rv_andi(ctx, arg0, v5);
        let v7 = constructor_rv_slli(ctx, v6, v5);
        // Rule at src/isa/riscv64/lower.isle line 1398.
        return v7;
    }
    let v8 = C::zero_reg(ctx);
    let v9 = C::xreg_new(ctx, v8);
    // Rule at src/isa/riscv64/lower.isle line 1401.
    return v9;
}

// Generated as internal constructor for term gen_atomic_p.
pub fn constructor_gen_atomic_p<C: Context>(ctx: &mut C, arg0: XReg, arg1: Type) -> XReg {
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = C::imm12_const(ctx, -0x4);
        let v6 = constructor_rv_andi(ctx, arg0, v5);
        // Rule at src/isa/riscv64/lower.isle line 1405.
        return v6;
    }
    // Rule at src/isa/riscv64/lower.isle line 1408.
    return arg0;
}

// Generated as internal constructor for term gen_load64_extend.
pub fn constructor_gen_load64_extend<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ExtendOp,
    arg2: MemFlags,
    arg3: AMode,
) -> VReg {
    match arg1 {
        &ExtendOp::Zero => {
            let v5 = &constructor_element_width_from_type(ctx, I64);
            let v7 = VecAMode::UnitStride { base: arg3 };
            let v8 = &constructor_unmasked(ctx);
            let v6 = C::vstate_from_type(ctx, I64);
            let v9 = constructor_vec_load(ctx, v5, &v7, arg2, v8, v6);
            let v10 = C::vreg_new(ctx, v9);
            let v11 = C::vstate_from_type(ctx, arg0);
            let v13 = constructor_rv_vzext_vf2(ctx, v10, v8, v11);
            // Rule at src/isa/riscv64/lower.isle line 1784.
            return v13;
        }
        &ExtendOp::Signed => {
            let v5 = &constructor_element_width_from_type(ctx, I64);
            let v7 = VecAMode::UnitStride { base: arg3 };
            let v8 = &constructor_unmasked(ctx);
            let v6 = C::vstate_from_type(ctx, I64);
            let v9 = constructor_vec_load(ctx, v5, &v7, arg2, v8, v6);
            let v10 = C::vreg_new(ctx, v9);
            let v11 = C::vstate_from_type(ctx, arg0);
            let v12 = constructor_rv_vsext_vf2(ctx, v10, v8, v11);
            // Rule at src/isa/riscv64/lower.isle line 1778.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_load64_extend", "src/isa/riscv64/lower.isle line 1776"
    )
}

// Generated as internal constructor for term gen_icmp.
pub fn constructor_gen_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: ValueRegs,
    arg2: ValueRegs,
    arg3: Type,
) -> XReg {
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v6 = MInst::Icmp {
        cc: arg0.clone(),
        rd: v5,
        a: arg1,
        b: arg2,
        ty: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_xreg_to_xreg(ctx, v4);
    // Rule at src/isa/riscv64/lower.isle line 1845.
    return v8;
}

// Generated as internal constructor for term lower_fcmp.
pub fn constructor_lower_fcmp<C: Context>(ctx: &mut C, arg0: &FCmp) -> XReg {
    match arg0 {
        &FCmp::One { r: v1 } => {
            // Rule at src/isa/riscv64/lower.isle line 1870.
            return v1;
        }
        &FCmp::Zero { r: v2 } => {
            let v3 = constructor_rv_seqz(ctx, v2);
            // Rule at src/isa/riscv64/lower.isle line 1871.
            return v3;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_fcmp", "src/isa/riscv64/lower.isle line 1869"
    )
}
