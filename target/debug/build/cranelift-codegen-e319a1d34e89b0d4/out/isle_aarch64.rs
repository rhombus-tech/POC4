// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src/prelude.isle
// - src/prelude_lower.isle
// - src/isa/aarch64/inst.isle
// - src/isa/aarch64/inst_neon.isle
// - src/isa/aarch64/lower.isle
// - src/isa/aarch64/lower_dynamic_neon.isle
// - /Users/talzisckind/Downloads/vm-parallel-process-7/execution/target/debug/build/cranelift-codegen-e319a1d34e89b0d4/out/clif_lower.isle

use super::*; // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self) -> Unit;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> i32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn simm32(&mut self, arg0: Imm64) -> Option<i32>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn u8_as_i8(&mut self, arg0: u8) -> i8;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i32_as_i64(&mut self, arg0: i32) -> i64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn i64_neg(&mut self, arg0: i64) -> i64;
    fn u128_as_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_as_u32(&mut self, arg0: u64) -> Option<u32>;
    fn u64_as_i32(&mut self, arg0: u64) -> i32;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shl(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shr(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_sub(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_sub(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_and(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: i32, arg1: i32) -> Option<i32>;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sdiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_shl(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_le(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_lt(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_shr(&mut self, arg0: i64, arg1: i64) -> i64;
    fn i64_ctz(&mut self, arg0: i64) -> i64;
    fn i64_sextend_u64(&mut self, arg0: Type, arg1: u64) -> i64;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn u128_replicated_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_replicated_u32(&mut self, arg0: u64) -> Option<u64>;
    fn u32_replicated_u16(&mut self, arg0: u64) -> Option<u64>;
    fn u16_replicated_u8(&mut self, arg0: u64) -> Option<u8>;
    fn ty_umin(&mut self, arg0: Type) -> u64;
    fn ty_umax(&mut self, arg0: Type) -> u64;
    fn ty_smin(&mut self, arg0: Type) -> u64;
    fn ty_smax(&mut self, arg0: Type) -> u64;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_count(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn ty_half_lanes(&mut self, arg0: Type) -> Option<Type>;
    fn ty_half_width(&mut self, arg0: Type) -> Option<Type>;
    fn ty_equal(&mut self, arg0: Type, arg1: Type) -> bool;
    fn mem_flags_trusted(&mut self) -> MemFlags;
    fn intcc_swap_args(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_complement(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_without_eq(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_swap_args(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_complement(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64_extract(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_16_to_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_addr64(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u32_from_ieee32(&mut self, arg0: Ieee32) -> u32;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_int_lane(&mut self, arg0: Type) -> Option<u32>;
    fn dynamic_fp_lane(&mut self, arg0: Type) -> Option<u32>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_i32(&mut self, arg0: Offset32) -> i32;
    fn i32_to_offset32(&mut self, arg0: i32) -> Offset32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self) -> TrapCode;
    fn trap_code_integer_overflow(&mut self) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    fn value_reg(&mut self, arg0: Reg) -> ValueRegs;
    fn writable_value_reg(&mut self, arg0: WritableReg) -> WritableValueRegs;
    fn value_regs(&mut self, arg0: Reg, arg1: Reg) -> ValueRegs;
    fn writable_value_regs(&mut self, arg0: WritableReg, arg1: WritableReg) -> WritableValueRegs;
    fn value_regs_invalid(&mut self) -> ValueRegs;
    fn output_none(&mut self) -> InstOutput;
    fn output(&mut self, arg0: ValueRegs) -> InstOutput;
    fn output_pair(&mut self, arg0: ValueRegs, arg1: ValueRegs) -> InstOutput;
    fn output_builder_new(&mut self) -> InstOutputBuilder;
    fn output_builder_push(&mut self, arg0: &InstOutputBuilder, arg1: ValueRegs) -> Unit;
    fn output_builder_finish(&mut self, arg0: &InstOutputBuilder) -> InstOutput;
    fn temp_writable_reg(&mut self, arg0: Type) -> WritableReg;
    fn is_valid_reg(&mut self, arg0: Reg) -> bool;
    fn invalid_reg(&mut self) -> Reg;
    fn mark_value_used(&mut self, arg0: Value) -> Unit;
    fn put_in_reg(&mut self, arg0: Value) -> Reg;
    fn put_in_regs(&mut self, arg0: Value) -> ValueRegs;
    fn ensure_in_vreg(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn value_regs_get(&mut self, arg0: ValueRegs, arg1: usize) -> Reg;
    fn value_regs_len(&mut self, arg0: ValueRegs) -> usize;
    fn preg_to_reg(&mut self, arg0: PReg) -> Reg;
    fn single_target(&mut self, arg0: &MachLabelSlice) -> Option<MachLabel>;
    fn two_targets(&mut self, arg0: &MachLabelSlice) -> Option<(MachLabel, MachLabel)>;
    fn jump_table_targets(&mut self, arg0: &MachLabelSlice)
        -> Option<(MachLabel, BoxVecMachLabel)>;
    fn jump_table_size(&mut self, arg0: &BoxVecMachLabel) -> u32;
    fn value_list_slice(&mut self, arg0: ValueList) -> ValueSlice;
    fn value_slice_empty(&mut self, arg0: ValueSlice) -> Option<()>;
    fn value_slice_unwrap(&mut self, arg0: ValueSlice) -> Option<(Value, ValueSlice)>;
    fn value_slice_len(&mut self, arg0: ValueSlice) -> usize;
    fn value_slice_get(&mut self, arg0: ValueSlice, arg1: usize) -> Value;
    fn writable_reg_to_reg(&mut self, arg0: WritableReg) -> Reg;
    fn inst_results(&mut self, arg0: Inst) -> ValueSlice;
    fn first_result(&mut self, arg0: Inst) -> Option<Value>;
    fn inst_data(&mut self, arg0: Inst) -> InstructionData;
    fn def_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn i64_from_iconst(&mut self, arg0: Value) -> Option<i64>;
    fn zero_value(&mut self, arg0: Value) -> Option<Value>;
    fn is_sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn maybe_uextend(&mut self, arg0: Value) -> Option<Value>;
    fn emit(&mut self, arg0: &MInst) -> Unit;
    fn sink_inst(&mut self, arg0: Inst) -> Unit;
    fn emit_u64_le_const(&mut self, arg0: u64) -> VCodeConstant;
    fn emit_u128_le_const(&mut self, arg0: u128) -> VCodeConstant;
    fn const_to_vconst(&mut self, arg0: Constant) -> VCodeConstant;
    fn tls_model(&mut self, arg0: Type) -> TlsModel;
    fn tls_model_is_elf_gd(&mut self) -> Option<Unit>;
    fn tls_model_is_macho(&mut self) -> Option<Unit>;
    fn tls_model_is_coff(&mut self) -> Option<Unit>;
    fn preserve_frame_pointers(&mut self) -> Option<Unit>;
    fn box_external_name(&mut self, arg0: ExternalName) -> BoxExternalName;
    fn func_ref_data(&mut self, arg0: FuncRef) -> (SigRef, ExternalName, RelocDistance);
    fn symbol_value_data(
        &mut self,
        arg0: GlobalValue,
    ) -> Option<(ExternalName, RelocDistance, i64)>;
    fn reloc_distance_near(&mut self, arg0: RelocDistance) -> Option<()>;
    fn vec_mask_from_immediate(&mut self, arg0: Immediate) -> Option<VecMask>;
    fn u128_from_immediate(&mut self, arg0: Immediate) -> Option<u128>;
    fn vconst_from_immediate(&mut self, arg0: Immediate) -> Option<VCodeConstant>;
    fn u128_from_constant(&mut self, arg0: Constant) -> Option<u128>;
    fn u64_from_constant(&mut self, arg0: Constant) -> Option<u64>;
    fn shuffle64_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8)>;
    fn shuffle32_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8)>;
    fn shuffle16_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8, u8, u8, u8, u8)>;
    fn only_writable_reg(&mut self, arg0: WritableValueRegs) -> Option<WritableReg>;
    fn writable_regs_get(&mut self, arg0: WritableValueRegs, arg1: usize) -> WritableReg;
    fn abi_num_args(&mut self, arg0: Sig) -> usize;
    fn abi_get_arg(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_num_rets(&mut self, arg0: Sig) -> usize;
    fn abi_get_ret(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_ret_arg(&mut self, arg0: Sig) -> Option<ABIArg>;
    fn abi_no_ret_arg(&mut self, arg0: Sig) -> Option<()>;
    fn abi_sized_stack_arg_space(&mut self, arg0: Sig) -> i64;
    fn abi_sized_stack_ret_space(&mut self, arg0: Sig) -> i64;
    fn abi_stackslot_addr(&mut self, arg0: WritableReg, arg1: StackSlot, arg2: Offset32) -> MInst;
    fn abi_dynamic_stackslot_addr(&mut self, arg0: WritableReg, arg1: DynamicStackSlot) -> MInst;
    fn abi_arg_only_slot(&mut self, arg0: &ABIArg) -> Option<ABIArgSlot>;
    fn abi_arg_struct_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, u64)>;
    fn abi_arg_implicit_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, Type)>;
    fn real_reg_to_reg(&mut self, arg0: RealReg) -> Reg;
    fn real_reg_to_writable_reg(&mut self, arg0: RealReg) -> WritableReg;
    fn gen_move(&mut self, arg0: Type, arg1: WritableReg, arg2: Reg) -> MInst;
    fn gen_return(&mut self, arg0: ValueSlice) -> Unit;
    fn gen_return_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_return_call_indirect(
        &mut self,
        arg0: SigRef,
        arg1: Value,
        arg2: ValueSlice,
    ) -> InstOutput;
    fn safe_divisor_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<u64>;
    fn sign_return_address_disabled(&mut self) -> Option<Unit>;
    fn use_lse(&mut self, arg0: Inst) -> Option<()>;
    fn move_wide_const_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<MoveWideConst>;
    fn move_wide_const_from_inverted_u64(&mut self, arg0: Type, arg1: u64)
        -> Option<MoveWideConst>;
    fn imm_logic_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<ImmLogic>;
    fn imm_logic_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<ImmLogic>;
    fn imm_shift_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<ImmShift>;
    fn imm_shift_from_u8(&mut self, arg0: u8) -> ImmShift;
    fn imm12_from_u64(&mut self, arg0: u64) -> Option<Imm12>;
    fn u8_into_uimm5(&mut self, arg0: u8) -> UImm5;
    fn u8_into_imm12(&mut self, arg0: u8) -> Imm12;
    fn u64_into_imm_logic(&mut self, arg0: Type, arg1: u64) -> ImmLogic;
    fn branch_target(&mut self, arg0: MachLabel) -> BranchTarget;
    fn targets_jt_space(&mut self, arg0: &BoxVecMachLabel) -> CodeOffset;
    fn min_fp_value(&mut self, arg0: bool, arg1: u8, arg2: u8) -> Reg;
    fn max_fp_value(&mut self, arg0: bool, arg1: u8, arg2: u8) -> Reg;
    fn fpu_op_ri_ushr(&mut self, arg0: u8, arg1: u8) -> FPUOpRI;
    fn fpu_op_ri_sli(&mut self, arg0: u8, arg1: u8) -> FPUOpRIMod;
    fn lshr_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<ShiftOpAndAmt>;
    fn lshl_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<ShiftOpAndAmt>;
    fn lshl_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<ShiftOpAndAmt>;
    fn ashr_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<ShiftOpAndAmt>;
    fn integral_ty(&mut self, arg0: Type) -> Option<Type>;
    fn valid_atomic_transaction(&mut self, arg0: Type) -> Option<Type>;
    fn is_zero_simm9(&mut self, arg0: &SImm9) -> Option<Unit>;
    fn is_zero_uimm12(&mut self, arg0: &UImm12Scaled) -> Option<Unit>;
    fn extended_value_from_value(&mut self, arg0: Value) -> Option<ExtendedValue>;
    fn put_extended_in_reg(&mut self, arg0: &ExtendedValue) -> Reg;
    fn get_extended_op(&mut self, arg0: &ExtendedValue) -> ExtendOp;
    fn nzcv(&mut self, arg0: bool, arg1: bool, arg2: bool, arg3: bool) -> NZCV;
    fn cond_br_zero(&mut self, arg0: Reg) -> CondBrKind;
    fn cond_br_not_zero(&mut self, arg0: Reg) -> CondBrKind;
    fn cond_br_cond(&mut self, arg0: &Cond) -> CondBrKind;
    fn zero_reg(&mut self) -> Reg;
    fn fp_reg(&mut self) -> Reg;
    fn stack_reg(&mut self) -> Reg;
    fn writable_link_reg(&mut self) -> WritableReg;
    fn writable_zero_reg(&mut self) -> WritableReg;
    fn load_constant64_full(&mut self, arg0: Type, arg1: &ImmExtend, arg2: u64) -> Reg;
    fn simm7_scaled_from_i64(&mut self, arg0: i64, arg1: Type) -> Option<SImm7Scaled>;
    fn uimm12_scaled_from_i64(&mut self, arg0: i64, arg1: Type) -> Option<UImm12Scaled>;
    fn simm9_from_i64(&mut self, arg0: i64) -> Option<SImm9>;
    fn u64_low32_bits_unset(&mut self, arg0: u64) -> Option<u64>;
    fn fp_cond_code(&mut self, arg0: &FloatCC) -> Cond;
    fn cond_code(&mut self, arg0: &IntCC) -> Cond;
    fn invert_cond(&mut self, arg0: &Cond) -> Cond;
    fn float_cc_cmp_zero_to_vec_misc_op(&mut self, arg0: &FloatCC) -> VecMisc2;
    fn float_cc_cmp_zero_to_vec_misc_op_swap(&mut self, arg0: &FloatCC) -> VecMisc2;
    fn fcmp_zero_cond(&mut self, arg0: &FloatCC) -> Option<FloatCC>;
    fn fcmp_zero_cond_not_eq(&mut self, arg0: &FloatCC) -> Option<FloatCC>;
    fn int_cc_cmp_zero_to_vec_misc_op(&mut self, arg0: &IntCC) -> VecMisc2;
    fn int_cc_cmp_zero_to_vec_misc_op_swap(&mut self, arg0: &IntCC) -> VecMisc2;
    fn icmp_zero_cond(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn icmp_zero_cond_not_eq(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn preg_sp(&mut self) -> PReg;
    fn preg_fp(&mut self) -> PReg;
    fn preg_link(&mut self) -> PReg;
    fn preg_pinned(&mut self) -> PReg;
    fn gen_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_call_indirect(&mut self, arg0: SigRef, arg1: Value, arg2: ValueSlice) -> InstOutput;
    fn asimd_mov_mod_imm_zero(&mut self, arg0: &ScalarSize) -> ASIMDMovModImm;
    fn asimd_mov_mod_imm_from_u64(
        &mut self,
        arg0: u64,
        arg1: &ScalarSize,
    ) -> Option<ASIMDMovModImm>;
    fn asimd_fp_mod_imm_from_u64(&mut self, arg0: u64, arg1: &ScalarSize) -> Option<ASIMDFPModImm>;
    fn shuffle_dup8_from_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn shuffle_dup16_from_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn shuffle_dup32_from_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn shuffle_dup64_from_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn vec_extract_imm4_from_immediate(&mut self, arg0: Immediate) -> Option<u8>;
    fn shift_masked_imm(&mut self, arg0: Type, arg1: u64) -> u8;
    fn shift_mask(&mut self, arg0: Type) -> ImmLogic;
    fn negate_imm_shift(&mut self, arg0: Type, arg1: ImmShift) -> ImmShift;
    fn rotr_mask(&mut self, arg0: Type) -> ImmLogic;
    fn rotr_opposite_amount(&mut self, arg0: Type, arg1: ImmShift) -> ImmShift;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
}

pub struct ContextIterWrapper<Item, I: Iterator<Item = Item>, C: Context> {
    iter: I,
    _ctx: PhantomData<C>,
}
impl<Item, I: Iterator<Item = Item>, C: Context> From<I> for ContextIterWrapper<Item, I, C> {
    fn from(iter: I) -> Self {
        Self {
            iter,
            _ctx: PhantomData,
        }
    }
}
impl<Item, I: Iterator<Item = Item>, C: Context> ContextIter for ContextIterWrapper<Item, I, C> {
    type Context = C;
    type Output = Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
}

/// Internal type MultiReg: defined at src/prelude_lower.isle line 21.
#[derive(Clone, Debug)]
pub enum MultiReg {
    Empty,
    One { a: Reg },
    Two { a: Reg, b: Reg },
    Three { a: Reg, b: Reg, c: Reg },
    Four { a: Reg, b: Reg, c: Reg, d: Reg },
}

/// Internal type SideEffectNoResult: defined at src/prelude_lower.isle line 340.
#[derive(Clone, Debug)]
pub enum SideEffectNoResult {
    Inst {
        inst: MInst,
    },
    Inst2 {
        inst1: MInst,
        inst2: MInst,
    },
    Inst3 {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
    },
}

/// Internal type ProducesFlags: defined at src/prelude_lower.isle line 382.
#[derive(Clone, Debug)]
pub enum ProducesFlags {
    AlreadyExistingFlags,
    ProducesFlagsSideEffect { inst: MInst },
    ProducesFlagsTwiceSideEffect { inst1: MInst, inst2: MInst },
    ProducesFlagsReturnsReg { inst: MInst, result: Reg },
    ProducesFlagsReturnsResultWithConsumer { inst: MInst, result: Reg },
}

/// Internal type ConsumesAndProducesFlags: defined at src/prelude_lower.isle line 401.
#[derive(Clone, Debug)]
pub enum ConsumesAndProducesFlags {
    SideEffect { inst: MInst },
    ReturnsReg { inst: MInst, result: Reg },
}

/// Internal type ConsumesFlags: defined at src/prelude_lower.isle line 409.
#[derive(Clone, Debug)]
pub enum ConsumesFlags {
    ConsumesFlagsSideEffect {
        inst: MInst,
    },
    ConsumesFlagsSideEffect2 {
        inst1: MInst,
        inst2: MInst,
    },
    ConsumesFlagsReturnsResultWithProducer {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsTwiceReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        result: ValueRegs,
    },
    ConsumesFlagsFourTimesReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
        inst4: MInst,
        result: ValueRegs,
    },
}

/// Internal type MInst: defined at src/isa/aarch64/inst.isle line 2.
#[derive(Clone, Debug)]
pub enum MInst {
    Nop0,
    Nop4,
    AluRRR {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    AluRRRR {
        alu_op: ALUOp3,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    AluRRImm12 {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        imm12: Imm12,
    },
    AluRRImmLogic {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        imml: ImmLogic,
    },
    AluRRImmShift {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        immshift: ImmShift,
    },
    AluRRRShift {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        shiftop: ShiftOpAndAmt,
    },
    AluRRRExtend {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        extendop: ExtendOp,
    },
    BitRR {
        op: BitOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
    },
    ULoad8 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    SLoad8 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    ULoad16 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    SLoad16 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    ULoad32 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    SLoad32 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    ULoad64 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    Store8 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    Store16 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    Store32 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    Store64 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    StoreP64 {
        rt: Reg,
        rt2: Reg,
        mem: PairAMode,
        flags: MemFlags,
    },
    LoadP64 {
        rt: WritableReg,
        rt2: WritableReg,
        mem: PairAMode,
        flags: MemFlags,
    },
    Mov {
        size: OperandSize,
        rd: WritableReg,
        rm: Reg,
    },
    MovFromPReg {
        rd: WritableReg,
        rm: PReg,
    },
    MovToPReg {
        rd: PReg,
        rm: Reg,
    },
    MovWide {
        op: MoveWideOp,
        rd: WritableReg,
        imm: MoveWideConst,
        size: OperandSize,
    },
    MovK {
        rd: WritableReg,
        rn: Reg,
        imm: MoveWideConst,
        size: OperandSize,
    },
    Extend {
        rd: WritableReg,
        rn: Reg,
        signed: bool,
        from_bits: u8,
        to_bits: u8,
    },
    CSel {
        rd: WritableReg,
        cond: Cond,
        rn: Reg,
        rm: Reg,
    },
    CSNeg {
        rd: WritableReg,
        cond: Cond,
        rn: Reg,
        rm: Reg,
    },
    CSet {
        rd: WritableReg,
        cond: Cond,
    },
    CSetm {
        rd: WritableReg,
        cond: Cond,
    },
    CCmp {
        size: OperandSize,
        rn: Reg,
        rm: Reg,
        nzcv: NZCV,
        cond: Cond,
    },
    CCmpImm {
        size: OperandSize,
        rn: Reg,
        imm: UImm5,
        nzcv: NZCV,
        cond: Cond,
    },
    AtomicRMWLoop {
        ty: Type,
        op: AtomicRMWLoopOp,
        flags: MemFlags,
        addr: Reg,
        operand: Reg,
        oldval: WritableReg,
        scratch1: WritableReg,
        scratch2: WritableReg,
    },
    AtomicCASLoop {
        ty: Type,
        flags: MemFlags,
        addr: Reg,
        expected: Reg,
        replacement: Reg,
        oldval: WritableReg,
        scratch: WritableReg,
    },
    AtomicRMW {
        op: AtomicRMWOp,
        rs: Reg,
        rt: WritableReg,
        rn: Reg,
        ty: Type,
        flags: MemFlags,
    },
    AtomicCAS {
        rd: WritableReg,
        rs: Reg,
        rt: Reg,
        rn: Reg,
        ty: Type,
        flags: MemFlags,
    },
    LoadAcquire {
        access_ty: Type,
        rt: WritableReg,
        rn: Reg,
        flags: MemFlags,
    },
    StoreRelease {
        access_ty: Type,
        rt: Reg,
        rn: Reg,
        flags: MemFlags,
    },
    Fence,
    Csdb,
    FpuMove64 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuMove128 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuMoveFromVec {
        rd: WritableReg,
        rn: Reg,
        idx: u8,
        size: VectorSize,
    },
    FpuExtend {
        rd: WritableReg,
        rn: Reg,
        size: ScalarSize,
    },
    FpuRR {
        fpu_op: FPUOp1,
        size: ScalarSize,
        rd: WritableReg,
        rn: Reg,
    },
    FpuRRR {
        fpu_op: FPUOp2,
        size: ScalarSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    FpuRRI {
        fpu_op: FPUOpRI,
        rd: WritableReg,
        rn: Reg,
    },
    FpuRRIMod {
        fpu_op: FPUOpRIMod,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
    },
    FpuRRRR {
        fpu_op: FPUOp3,
        size: ScalarSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    FpuCmp {
        size: ScalarSize,
        rn: Reg,
        rm: Reg,
    },
    FpuLoad32 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuStore32 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuLoad64 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuStore64 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuLoad128 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuStore128 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuLoadP64 {
        rt: WritableReg,
        rt2: WritableReg,
        mem: PairAMode,
        flags: MemFlags,
    },
    FpuStoreP64 {
        rt: Reg,
        rt2: Reg,
        mem: PairAMode,
        flags: MemFlags,
    },
    FpuLoadP128 {
        rt: WritableReg,
        rt2: WritableReg,
        mem: PairAMode,
        flags: MemFlags,
    },
    FpuStoreP128 {
        rt: Reg,
        rt2: Reg,
        mem: PairAMode,
        flags: MemFlags,
    },
    FpuToInt {
        op: FpuToIntOp,
        rd: WritableReg,
        rn: Reg,
    },
    IntToFpu {
        op: IntToFpuOp,
        rd: WritableReg,
        rn: Reg,
    },
    FpuCSel32 {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        cond: Cond,
    },
    FpuCSel64 {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        cond: Cond,
    },
    FpuRound {
        op: FpuRoundMode,
        rd: WritableReg,
        rn: Reg,
    },
    MovToFpu {
        rd: WritableReg,
        rn: Reg,
        size: ScalarSize,
    },
    FpuMoveFPImm {
        rd: WritableReg,
        imm: ASIMDFPModImm,
        size: ScalarSize,
    },
    MovToVec {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        idx: u8,
        size: VectorSize,
    },
    MovFromVec {
        rd: WritableReg,
        rn: Reg,
        idx: u8,
        size: ScalarSize,
    },
    MovFromVecSigned {
        rd: WritableReg,
        rn: Reg,
        idx: u8,
        size: VectorSize,
        scalar_size: OperandSize,
    },
    VecDup {
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
    },
    VecDupFromFpu {
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
        lane: u8,
    },
    VecDupFPImm {
        rd: WritableReg,
        imm: ASIMDFPModImm,
        size: VectorSize,
    },
    VecDupImm {
        rd: WritableReg,
        imm: ASIMDMovModImm,
        invert: bool,
        size: VectorSize,
    },
    VecExtend {
        t: VecExtendOp,
        rd: WritableReg,
        rn: Reg,
        high_half: bool,
        lane_size: ScalarSize,
    },
    VecMovElement {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        dest_idx: u8,
        src_idx: u8,
        size: VectorSize,
    },
    VecRRLong {
        op: VecRRLongOp,
        rd: WritableReg,
        rn: Reg,
        high_half: bool,
    },
    VecRRNarrowLow {
        op: VecRRNarrowOp,
        rd: WritableReg,
        rn: Reg,
        lane_size: ScalarSize,
    },
    VecRRNarrowHigh {
        op: VecRRNarrowOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        lane_size: ScalarSize,
    },
    VecRRPair {
        op: VecPairOp,
        rd: WritableReg,
        rn: Reg,
    },
    VecRRRLong {
        alu_op: VecRRRLongOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        high_half: bool,
    },
    VecRRRLongMod {
        alu_op: VecRRRLongModOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rm: Reg,
        high_half: bool,
    },
    VecRRPairLong {
        op: VecRRPairLongOp,
        rd: WritableReg,
        rn: Reg,
    },
    VecRRR {
        alu_op: VecALUOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        size: VectorSize,
    },
    VecRRRMod {
        alu_op: VecALUModOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rm: Reg,
        size: VectorSize,
    },
    VecFmlaElem {
        alu_op: VecALUModOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rm: Reg,
        size: VectorSize,
        idx: u8,
    },
    VecMisc {
        op: VecMisc2,
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
    },
    VecLanes {
        op: VecLanesOp,
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
    },
    VecShiftImm {
        op: VecShiftImmOp,
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
        imm: u8,
    },
    VecShiftImmMod {
        op: VecShiftImmModOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        size: VectorSize,
        imm: u8,
    },
    VecExtract {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        imm4: u8,
    },
    VecTbl {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecTblExt {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rm: Reg,
    },
    VecTbl2 {
        rd: WritableReg,
        rn: Reg,
        rn2: Reg,
        rm: Reg,
    },
    VecTbl2Ext {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rn2: Reg,
        rm: Reg,
    },
    VecLoadReplicate {
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
        flags: MemFlags,
    },
    VecCSel {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        cond: Cond,
    },
    MovToNZCV {
        rn: Reg,
    },
    MovFromNZCV {
        rd: WritableReg,
    },
    Call {
        info: BoxCallInfo,
    },
    CallInd {
        info: BoxCallIndInfo,
    },
    ReturnCall {
        callee: BoxExternalName,
        info: BoxReturnCallInfo,
    },
    ReturnCallInd {
        callee: Reg,
        info: BoxReturnCallInfo,
    },
    Args {
        args: VecArgPair,
    },
    Rets {
        rets: VecRetPair,
    },
    Ret,
    AuthenticatedRet {
        key: APIKey,
        is_hint: bool,
    },
    Jump {
        dest: BranchTarget,
    },
    CondBr {
        taken: BranchTarget,
        not_taken: BranchTarget,
        kind: CondBrKind,
    },
    TrapIf {
        kind: CondBrKind,
        trap_code: TrapCode,
    },
    IndirectBr {
        rn: Reg,
        targets: VecMachLabel,
    },
    Brk,
    Udf {
        trap_code: TrapCode,
    },
    Adr {
        rd: WritableReg,
        off: i32,
    },
    Adrp {
        rd: WritableReg,
        off: i32,
    },
    Word4 {
        data: u32,
    },
    Word8 {
        data: u64,
    },
    JTSequence {
        default: MachLabel,
        targets: BoxVecMachLabel,
        ridx: Reg,
        rtmp1: WritableReg,
        rtmp2: WritableReg,
    },
    LoadExtName {
        rd: WritableReg,
        name: BoxExternalName,
        offset: i64,
    },
    LoadAddr {
        rd: WritableReg,
        mem: AMode,
    },
    Paci {
        key: APIKey,
    },
    Xpaclri,
    Bti {
        targets: BranchTargetType,
    },
    VirtualSPOffsetAdj {
        offset: i64,
    },
    EmitIsland {
        needed_space: CodeOffset,
    },
    ElfTlsGetAddr {
        symbol: ExternalName,
        rd: WritableReg,
    },
    MachOTlsGetAddr {
        symbol: ExternalName,
        rd: WritableReg,
    },
    Unwind {
        inst: UnwindInst,
    },
    DummyUse {
        reg: Reg,
    },
    StackProbeLoop {
        start: WritableReg,
        end: Reg,
        step: Imm12,
    },
}

/// Internal type ALUOp: defined at src/isa/aarch64/inst.isle line 976.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ALUOp {
    Add,
    Sub,
    Orr,
    OrrNot,
    And,
    AndS,
    AndNot,
    Eor,
    EorNot,
    AddS,
    SubS,
    SMulH,
    UMulH,
    SDiv,
    UDiv,
    RotR,
    Lsr,
    Asr,
    Lsl,
    Adc,
    AdcS,
    Sbc,
    SbcS,
}

/// Internal type ALUOp3: defined at src/isa/aarch64/inst.isle line 1014.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ALUOp3 {
    MAdd,
    MSub,
    UMAddL,
    SMAddL,
}

/// Internal type MoveWideOp: defined at src/isa/aarch64/inst.isle line 1026.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum MoveWideOp {
    MovZ,
    MovN,
}

/// Internal type BitOp: defined at src/isa/aarch64/inst.isle line 1066.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum BitOp {
    RBit,
    Clz,
    Cls,
    Rev16,
    Rev32,
    Rev64,
}

/// Internal type AMode: defined at src/isa/aarch64/inst.isle line 1083.
#[derive(Clone, Debug)]
pub enum AMode {
    SPPostIndexed {
        simm9: SImm9,
    },
    SPPreIndexed {
        simm9: SImm9,
    },
    RegReg {
        rn: Reg,
        rm: Reg,
    },
    RegScaled {
        rn: Reg,
        rm: Reg,
        ty: Type,
    },
    RegScaledExtended {
        rn: Reg,
        rm: Reg,
        ty: Type,
        extendop: ExtendOp,
    },
    RegExtended {
        rn: Reg,
        rm: Reg,
        extendop: ExtendOp,
    },
    Unscaled {
        rn: Reg,
        simm9: SImm9,
    },
    UnsignedOffset {
        rn: Reg,
        uimm12: UImm12Scaled,
    },
    Label {
        label: MemLabel,
    },
    RegOffset {
        rn: Reg,
        off: i64,
        ty: Type,
    },
    SPOffset {
        off: i64,
        ty: Type,
    },
    FPOffset {
        off: i64,
        ty: Type,
    },
    Const {
        addr: VCodeConstant,
    },
    NominalSPOffset {
        off: i64,
        ty: Type,
    },
}

/// Internal type PairAMode: defined at src/isa/aarch64/inst.isle line 1185.
#[derive(Clone, Debug)]
pub enum PairAMode {
    SignedOffset { reg: Reg, simm7: SImm7Scaled },
    SPPreIndexed { simm7: SImm7Scaled },
    SPPostIndexed { simm7: SImm7Scaled },
}

/// Internal type FPUOp1: defined at src/isa/aarch64/inst.isle line 1299.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp1 {
    Abs,
    Neg,
    Sqrt,
    Cvt32To64,
    Cvt64To32,
}

/// Internal type FPUOp2: defined at src/isa/aarch64/inst.isle line 1309.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp2 {
    Add,
    Sub,
    Mul,
    Div,
    Max,
    Min,
}

/// Internal type FPUOp3: defined at src/isa/aarch64/inst.isle line 1320.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp3 {
    MAdd,
}

/// Internal type FpuToIntOp: defined at src/isa/aarch64/inst.isle line 1326.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuToIntOp {
    F32ToU32,
    F32ToI32,
    F32ToU64,
    F32ToI64,
    F64ToU32,
    F64ToI32,
    F64ToU64,
    F64ToI64,
}

/// Internal type IntToFpuOp: defined at src/isa/aarch64/inst.isle line 1339.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum IntToFpuOp {
    U32ToF32,
    I32ToF32,
    U32ToF64,
    I32ToF64,
    U64ToF32,
    I64ToF32,
    U64ToF64,
    I64ToF64,
}

/// Internal type FpuRoundMode: defined at src/isa/aarch64/inst.isle line 1353.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuRoundMode {
    Minus32,
    Minus64,
    Plus32,
    Plus64,
    Zero32,
    Zero64,
    Nearest32,
    Nearest64,
}

/// Internal type VecExtendOp: defined at src/isa/aarch64/inst.isle line 1366.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecExtendOp {
    Sxtl,
    Uxtl,
}

/// Internal type VecALUOp: defined at src/isa/aarch64/inst.isle line 1375.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecALUOp {
    Sqadd,
    Uqadd,
    Sqsub,
    Uqsub,
    Cmeq,
    Cmge,
    Cmgt,
    Cmhs,
    Cmhi,
    Fcmeq,
    Fcmgt,
    Fcmge,
    And,
    Bic,
    Orr,
    Eor,
    Umaxp,
    Add,
    Sub,
    Mul,
    Sshl,
    Ushl,
    Umin,
    Smin,
    Umax,
    Smax,
    Urhadd,
    Fadd,
    Fsub,
    Fdiv,
    Fmax,
    Fmin,
    Fmul,
    Addp,
    Zip1,
    Zip2,
    Sqrdmulh,
    Uzp1,
    Uzp2,
    Trn1,
    Trn2,
}

/// Internal type VecALUModOp: defined at src/isa/aarch64/inst.isle line 1462.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecALUModOp {
    Bsl,
    Fmla,
    Fmls,
}

/// Internal type VecMisc2: defined at src/isa/aarch64/inst.isle line 1473.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecMisc2 {
    Not,
    Neg,
    Abs,
    Fabs,
    Fneg,
    Fsqrt,
    Rev16,
    Rev32,
    Rev64,
    Fcvtzs,
    Fcvtzu,
    Scvtf,
    Ucvtf,
    Frintn,
    Frintz,
    Frintm,
    Frintp,
    Cnt,
    Cmeq0,
    Cmge0,
    Cmgt0,
    Cmle0,
    Cmlt0,
    Fcmeq0,
    Fcmge0,
    Fcmgt0,
    Fcmle0,
    Fcmlt0,
}

/// Internal type VecRRLongOp: defined at src/isa/aarch64/inst.isle line 1534.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRLongOp {
    Fcvtl16,
    Fcvtl32,
    Shll8,
    Shll16,
    Shll32,
}

/// Internal type VecRRNarrowOp: defined at src/isa/aarch64/inst.isle line 1549.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRNarrowOp {
    Xtn,
    Sqxtn,
    Sqxtun,
    Uqxtn,
    Fcvtn,
}

/// Internal type VecRRRLongOp: defined at src/isa/aarch64/inst.isle line 1563.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRRLongOp {
    Smull8,
    Smull16,
    Smull32,
    Umull8,
    Umull16,
    Umull32,
}

/// Internal type VecRRRLongModOp: defined at src/isa/aarch64/inst.isle line 1575.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRRLongModOp {
    Umlal8,
    Umlal16,
    Umlal32,
}

/// Internal type VecPairOp: defined at src/isa/aarch64/inst.isle line 1584.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecPairOp {
    Addp,
}

/// Internal type VecRRPairLongOp: defined at src/isa/aarch64/inst.isle line 1592.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRPairLongOp {
    Saddlp8,
    Saddlp16,
    Uaddlp8,
    Uaddlp16,
}

/// Internal type VecLanesOp: defined at src/isa/aarch64/inst.isle line 1603.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecLanesOp {
    Addv,
    Uminv,
}

/// Internal type VecShiftImmOp: defined at src/isa/aarch64/inst.isle line 1612.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecShiftImmOp {
    Shl,
    Ushr,
    Sshr,
}

/// Internal type VecShiftImmModOp: defined at src/isa/aarch64/inst.isle line 1623.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecShiftImmModOp {
    Sli,
}

/// Internal type AtomicRMWOp: defined at src/isa/aarch64/inst.isle line 1630.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AtomicRMWOp {
    Add,
    Clr,
    Eor,
    Set,
    Smax,
    Smin,
    Umax,
    Umin,
    Swp,
}

/// Internal type AtomicRMWLoopOp: defined at src/isa/aarch64/inst.isle line 1645.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AtomicRMWLoopOp {
    Add,
    Sub,
    And,
    Nand,
    Eor,
    Orr,
    Smax,
    Smin,
    Umax,
    Umin,
    Xchg,
}

/// Internal type APIKey: defined at src/isa/aarch64/inst.isle line 1661.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum APIKey {
    ASP,
    BSP,
    AZ,
    BZ,
}

/// Internal type BranchTargetType: defined at src/isa/aarch64/inst.isle line 1674.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum BranchTargetType {
    None,
    C,
    J,
    JC,
}

/// Internal type ImmExtend: defined at src/isa/aarch64/inst.isle line 2892.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ImmExtend {
    Sign,
    Zero,
}

/// Internal type FlagsAndCC: defined at src/isa/aarch64/inst.isle line 3774.
#[derive(Clone, Debug)]
pub enum FlagsAndCC {
    FlagsAndCC { flags: ProducesFlags, cc: IntCC },
}

// Generated as internal constructor for term output_reg.
pub fn constructor_output_reg<C: Context>(ctx: &mut C, arg0: Reg) -> InstOutput {
    let v1 = C::value_reg(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 73.
    return v2;
}

// Generated as internal constructor for term output_value.
pub fn constructor_output_value<C: Context>(ctx: &mut C, arg0: Value) -> InstOutput {
    let v1 = C::put_in_regs(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 77.
    return v2;
}

// Generated as internal constructor for term temp_reg.
pub fn constructor_temp_reg<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    let v1 = C::temp_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/prelude_lower.isle line 97.
    return v2;
}

// Generated as internal constructor for term value_regs_range.
pub fn constructor_value_regs_range<C: Context>(ctx: &mut C, arg0: ValueRegs) -> Range {
    let v2 = C::value_regs_len(ctx, arg0);
    let v3 = C::range(ctx, 0x0, v2);
    // Rule at src/prelude_lower.isle line 146.
    return v3;
}

// Generated as internal constructor for term lo_reg.
pub fn constructor_lo_reg<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = C::value_regs_get(ctx, v1, 0x0);
    // Rule at src/prelude_lower.isle line 157.
    return v3;
}

// Generated as internal constructor for term multi_reg_to_pair_and_single.
pub fn constructor_multi_reg_to_pair_and_single<C: Context>(
    ctx: &mut C,
    arg0: &MultiReg,
) -> InstOutput {
    if let &MultiReg::Three {
        a: v1,
        b: v2,
        c: v3,
    } = arg0
    {
        let v4 = C::value_regs(ctx, v1, v2);
        let v5 = C::value_reg(ctx, v3);
        let v6 = C::output_pair(ctx, v4, v5);
        // Rule at src/prelude_lower.isle line 168.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair_and_single", "src/prelude_lower.isle line 167"
    )
}

// Generated as internal constructor for term multi_reg_to_pair.
pub fn constructor_multi_reg_to_pair<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::Two { a: v1, b: v2 } = arg0 {
        let v3 = C::value_regs(ctx, v1, v2);
        let v4 = C::output(ctx, v3);
        // Rule at src/prelude_lower.isle line 173.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair", "src/prelude_lower.isle line 172"
    )
}

// Generated as internal constructor for term multi_reg_to_single.
pub fn constructor_multi_reg_to_single<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::One { a: v1 } = arg0 {
        let v2 = C::value_reg(ctx, v1);
        let v3 = C::output(ctx, v2);
        // Rule at src/prelude_lower.isle line 178.
        return v3;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_single", "src/prelude_lower.isle line 177"
    )
}

// Generated as internal constructor for term emit_side_effect.
pub fn constructor_emit_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> Unit {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            let v2 = C::emit(ctx, v1);
            // Rule at src/prelude_lower.isle line 350.
            return v2;
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v3,
            inst2: ref v4,
        } => {
            let v5 = C::emit(ctx, v3);
            let v6 = C::emit(ctx, v4);
            // Rule at src/prelude_lower.isle line 352.
            return v6;
        }
        &SideEffectNoResult::Inst3 {
            inst1: ref v7,
            inst2: ref v8,
            inst3: ref v9,
        } => {
            let v10 = C::emit(ctx, v7);
            let v11 = C::emit(ctx, v8);
            let v12 = C::emit(ctx, v9);
            // Rule at src/prelude_lower.isle line 355.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_side_effect", "src/prelude_lower.isle line 349"
    )
}

// Generated as internal constructor for term side_effect.
pub fn constructor_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> InstOutput {
    let v1 = constructor_emit_side_effect(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 363.
    return v2;
}

// Generated as internal constructor for term side_effect_concat.
pub fn constructor_side_effect_concat<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
    arg1: &SideEffectNoResult,
) -> SideEffectNoResult {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            match arg1 {
                &SideEffectNoResult::Inst { inst: ref v3 } => {
                    let v4 = SideEffectNoResult::Inst2 {
                        inst1: v1.clone(),
                        inst2: v3.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 368.
                    return v4;
                }
                &SideEffectNoResult::Inst2 {
                    inst1: ref v5,
                    inst2: ref v6,
                } => {
                    let v7 = SideEffectNoResult::Inst3 {
                        inst1: v1.clone(),
                        inst2: v5.clone(),
                        inst3: v6.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 370.
                    return v7;
                }
                _ => {}
            }
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v8,
            inst2: ref v9,
        } => {
            if let &SideEffectNoResult::Inst { inst: ref v3 } = arg1 {
                let v10 = SideEffectNoResult::Inst3 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                    inst3: v3.clone(),
                };
                // Rule at src/prelude_lower.isle line 372.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "side_effect_concat", "src/prelude_lower.isle line 367"
    )
}

// Generated as internal constructor for term produces_flags_concat.
pub fn constructor_produces_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ProducesFlags,
) -> ProducesFlags {
    if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } = arg0 {
        if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v3 } = arg1 {
            let v4 = ProducesFlags::ProducesFlagsTwiceSideEffect {
                inst1: v1.clone(),
                inst2: v3.clone(),
            };
            // Rule at src/prelude_lower.isle line 397.
            return v4;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_concat", "src/prelude_lower.isle line 396"
    )
}

// Generated as internal constructor for term produces_flags_get_reg.
pub fn constructor_produces_flags_get_reg<C: Context>(ctx: &mut C, arg0: &ProducesFlags) -> Reg {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            // Rule at src/prelude_lower.isle line 427.
            return v2;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v3,
            result: v4,
        } => {
            // Rule at src/prelude_lower.isle line 428.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_get_reg", "src/prelude_lower.isle line 426"
    )
}

// Generated as internal constructor for term produces_flags_ignore.
pub fn constructor_produces_flags_ignore<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> ProducesFlags {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v1.clone() };
            // Rule at src/prelude_lower.isle line 433.
            return v3;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v4,
            result: v5,
        } => {
            let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v4.clone() };
            // Rule at src/prelude_lower.isle line 435.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_ignore", "src/prelude_lower.isle line 432"
    )
}

// Generated as internal constructor for term consumes_flags_concat.
pub fn constructor_consumes_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ConsumesFlags,
    arg1: &ConsumesFlags,
) -> ConsumesFlags {
    match arg0 {
        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v8 } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } = arg1 {
                let v10 = ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                };
                // Rule at src/prelude_lower.isle line 448.
                return v10;
            }
        }
        &ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            if let &ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: ref v4,
                result: v5,
            } = arg1
            {
                let v6 = C::value_regs(ctx, v2, v5);
                let v7 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: v1.clone(),
                    inst2: v4.clone(),
                    result: v6,
                };
                // Rule at src/prelude_lower.isle line 442.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "consumes_flags_concat", "src/prelude_lower.isle line 441"
    )
}

// Generated as internal constructor for term with_flags.
pub fn constructor_with_flags<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> ValueRegs {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v12 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v16 = C::emit(ctx, v13);
                    let v17 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 479.
                    return v17;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v21 = C::emit(ctx, v18);
                    let v22 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 485.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v28 = C::emit(ctx, v23);
                    let v29 = C::emit(ctx, v24);
                    let v30 = C::emit(ctx, v25);
                    let v31 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 497.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v32,
            inst2: ref v33,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v36 = C::emit(ctx, v13);
                    let v37 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 513.
                    return v37;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v38 = C::emit(ctx, v18);
                    let v39 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 520.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v40 = C::emit(ctx, v23);
                    let v41 = C::emit(ctx, v24);
                    let v42 = C::emit(ctx, v25);
                    let v43 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 533.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v1,
            result: v2,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } => {
                    let v6 = C::emit(ctx, v1);
                    let v10 = C::emit(ctx, v9);
                    let v11 = C::value_reg(ctx, v2);
                    // Rule at src/prelude_lower.isle line 473.
                    return v11;
                }
                &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                    inst: ref v4,
                    result: v5,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v7 = C::emit(ctx, v4);
                    let v8 = C::value_regs(ctx, v2, v5);
                    // Rule at src/prelude_lower.isle line 465.
                    return v8;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags", "src/prelude_lower.isle line 463"
    )
}

// Generated as internal constructor for term with_flags_reg.
pub fn constructor_with_flags_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Reg {
    let v2 = constructor_with_flags(ctx, arg0, arg1);
    let v4 = C::value_regs_get(ctx, v2, 0x0);
    // Rule at src/prelude_lower.isle line 551.
    return v4;
}

// Generated as internal constructor for term flags_to_producesflags.
pub fn constructor_flags_to_producesflags<C: Context>(ctx: &mut C, arg0: Value) -> ProducesFlags {
    let v1 = C::mark_value_used(ctx, arg0);
    // Rule at src/prelude_lower.isle line 558.
    return ProducesFlags::AlreadyExistingFlags;
}

// Generated as internal constructor for term with_flags_side_effect.
pub fn constructor_with_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> SideEffectNoResult {
    match arg0 {
        &ProducesFlags::AlreadyExistingFlags => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v3 = SideEffectNoResult::Inst { inst: v2.clone() };
                    // Rule at src/prelude_lower.isle line 569.
                    return v3;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v6 = SideEffectNoResult::Inst2 {
                        inst1: v4.clone(),
                        inst2: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 574.
                    return v6;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v7 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v8 = SideEffectNoResult::Inst2 {
                        inst1: v7.clone(),
                        inst2: v2.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 579.
                    return v8;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v9 = SideEffectNoResult::Inst3 {
                        inst1: v7.clone(),
                        inst2: v4.clone(),
                        inst3: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 584.
                    return v9;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v10,
            inst2: ref v11,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } = arg1 {
                let v12 = SideEffectNoResult::Inst3 {
                    inst1: v10.clone(),
                    inst2: v11.clone(),
                    inst3: v2.clone(),
                };
                // Rule at src/prelude_lower.isle line 589.
                return v12;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_side_effect", "src/prelude_lower.isle line 567"
    )
}

// Generated as internal constructor for term with_flags_chained.
pub fn constructor_with_flags_chained<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesAndProducesFlags,
    arg2: &ConsumesFlags,
) -> MultiReg {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            // Rule at src/prelude_lower.isle line 598.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            // Rule at src/prelude_lower.isle line 606.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v17 = MultiReg::One { a: v15 };
                            // Rule at src/prelude_lower.isle line 615.
                            return v17;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v27 = MultiReg::Two { a: v24, b: v26 };
                            // Rule at src/prelude_lower.isle line 623.
                            return v27;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v39 = MultiReg::Two { a: v37, b: v38 };
                            // Rule at src/prelude_lower.isle line 632.
                            return v39;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src/prelude_lower.isle line 692.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src/prelude_lower.isle line 700.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v51 = MultiReg::Two { a: v48, b: v15 };
                            // Rule at src/prelude_lower.isle line 709.
                            return v51;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v52 = MultiReg::Three {
                                a: v48,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src/prelude_lower.isle line 717.
                            return v52;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v53 = MultiReg::Three {
                                a: v48,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src/prelude_lower.isle line 726.
                            return v53;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v40,
            result: v41,
        } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src/prelude_lower.isle line 645.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src/prelude_lower.isle line 653.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v44 = MultiReg::Two { a: v41, b: v15 };
                            // Rule at src/prelude_lower.isle line 662.
                            return v44;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v45 = MultiReg::Three {
                                a: v41,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src/prelude_lower.isle line 670.
                            return v45;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v46 = MultiReg::Three {
                                a: v41,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src/prelude_lower.isle line 679.
                            return v46;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src/prelude_lower.isle line 739.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src/prelude_lower.isle line 747.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v55 = MultiReg::Three {
                                a: v41,
                                b: v48,
                                c: v15,
                            };
                            // Rule at src/prelude_lower.isle line 756.
                            return v55;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v56 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v24,
                                d: v26,
                            };
                            // Rule at src/prelude_lower.isle line 764.
                            return v56;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v57 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v37,
                                d: v38,
                            };
                            // Rule at src/prelude_lower.isle line 773.
                            return v57;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v58,
            result: v59,
        } => {
            if let &ConsumesAndProducesFlags::ReturnsReg {
                inst: ref v47,
                result: v48,
            } = arg1
            {
                match arg2 {
                    &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v8 = C::emit(ctx, v5);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src/prelude_lower.isle line 785.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsSideEffect2 {
                        inst1: ref v10,
                        inst2: ref v11,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v12 = C::emit(ctx, v10);
                        let v13 = C::emit(ctx, v11);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src/prelude_lower.isle line 793.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                        inst: ref v63,
                        result: v64,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v65 = C::emit(ctx, v63);
                        let v66 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v64,
                        };
                        // Rule at src/prelude_lower.isle line 810.
                        return v66;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsReg {
                        inst: ref v14,
                        result: v15,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v16 = C::emit(ctx, v14);
                        let v62 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v15,
                        };
                        // Rule at src/prelude_lower.isle line 802.
                        return v62;
                    }
                    &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                        inst1: ref v18,
                        inst2: ref v19,
                        result: v20,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v21 = C::emit(ctx, v18);
                        let v22 = C::emit(ctx, v19);
                        let v24 = C::value_regs_get(ctx, v20, 0x0);
                        let v26 = C::value_regs_get(ctx, v20, 0x1);
                        let v67 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v24,
                            d: v26,
                        };
                        // Rule at src/prelude_lower.isle line 818.
                        return v67;
                    }
                    &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                        inst1: ref v28,
                        inst2: ref v29,
                        inst3: ref v30,
                        inst4: ref v31,
                        result: v32,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v33 = C::emit(ctx, v28);
                        let v34 = C::emit(ctx, v29);
                        let v35 = C::emit(ctx, v30);
                        let v36 = C::emit(ctx, v31);
                        let v37 = C::value_regs_get(ctx, v32, 0x0);
                        let v38 = C::value_regs_get(ctx, v32, 0x1);
                        let v68 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v37,
                            d: v38,
                        };
                        // Rule at src/prelude_lower.isle line 827.
                        return v68;
                    }
                    _ => {}
                }
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_chained", "src/prelude_lower.isle line 595"
    )
}

// Generated as internal constructor for term lower_return.
pub fn constructor_lower_return<C: Context>(ctx: &mut C, arg0: ValueSlice) -> InstOutput {
    let v1 = C::gen_return(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 1027.
    return v2;
}

// Generated as internal constructor for term operand_size.
pub fn constructor_operand_size<C: Context>(ctx: &mut C, arg0: Type) -> OperandSize {
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/aarch64/inst.isle line 1207.
        return OperandSize::Size32;
    }
    let v4 = C::fits_in_64(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/aarch64/inst.isle line 1208.
        return OperandSize::Size64;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "operand_size", "src/isa/aarch64/inst.isle line 1206"
    )
}

// Generated as internal constructor for term scalar_size.
pub fn constructor_scalar_size<C: Context>(ctx: &mut C, arg0: Type) -> ScalarSize {
    match arg0 {
        I8 => {
            // Rule at src/isa/aarch64/inst.isle line 1220.
            return ScalarSize::Size8;
        }
        I16 => {
            // Rule at src/isa/aarch64/inst.isle line 1221.
            return ScalarSize::Size16;
        }
        I32 => {
            // Rule at src/isa/aarch64/inst.isle line 1222.
            return ScalarSize::Size32;
        }
        I64 => {
            // Rule at src/isa/aarch64/inst.isle line 1223.
            return ScalarSize::Size64;
        }
        I128 => {
            // Rule at src/isa/aarch64/inst.isle line 1224.
            return ScalarSize::Size128;
        }
        F32 => {
            // Rule at src/isa/aarch64/inst.isle line 1226.
            return ScalarSize::Size32;
        }
        F64 => {
            // Rule at src/isa/aarch64/inst.isle line 1227.
            return ScalarSize::Size64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "scalar_size", "src/isa/aarch64/inst.isle line 1218"
    )
}

// Generated as internal constructor for term lane_size.
pub fn constructor_lane_size<C: Context>(ctx: &mut C, arg0: Type) -> ScalarSize {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                // Rule at src/isa/aarch64/inst.isle line 1231.
                return ScalarSize::Size8;
            }
            0x10 => {
                // Rule at src/isa/aarch64/inst.isle line 1232.
                return ScalarSize::Size16;
            }
            0x20 => {
                // Rule at src/isa/aarch64/inst.isle line 1233.
                return ScalarSize::Size32;
            }
            0x40 => {
                // Rule at src/isa/aarch64/inst.isle line 1234.
                return ScalarSize::Size64;
            }
            _ => {}
        }
    }
    let v9 = C::dynamic_lane(ctx, arg0);
    if let Some(v10) = v9 {
        match v10.0 {
            0x8 => {
                // Rule at src/isa/aarch64/inst.isle line 1235.
                return ScalarSize::Size8;
            }
            0x10 => {
                // Rule at src/isa/aarch64/inst.isle line 1236.
                return ScalarSize::Size16;
            }
            0x20 => {
                // Rule at src/isa/aarch64/inst.isle line 1237.
                return ScalarSize::Size32;
            }
            0x40 => {
                // Rule at src/isa/aarch64/inst.isle line 1238.
                return ScalarSize::Size64;
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lane_size", "src/isa/aarch64/inst.isle line 1230"
    )
}

// Generated as internal constructor for term vector_lane_size.
pub fn constructor_vector_lane_size<C: Context>(ctx: &mut C, arg0: &VectorSize) -> ScalarSize {
    match arg0 {
        &VectorSize::Size8x8 => {
            // Rule at src/isa/aarch64/inst.isle line 1243.
            return ScalarSize::Size8;
        }
        &VectorSize::Size8x16 => {
            // Rule at src/isa/aarch64/inst.isle line 1242.
            return ScalarSize::Size8;
        }
        &VectorSize::Size16x4 => {
            // Rule at src/isa/aarch64/inst.isle line 1245.
            return ScalarSize::Size16;
        }
        &VectorSize::Size16x8 => {
            // Rule at src/isa/aarch64/inst.isle line 1244.
            return ScalarSize::Size16;
        }
        &VectorSize::Size32x2 => {
            // Rule at src/isa/aarch64/inst.isle line 1247.
            return ScalarSize::Size32;
        }
        &VectorSize::Size32x4 => {
            // Rule at src/isa/aarch64/inst.isle line 1246.
            return ScalarSize::Size32;
        }
        &VectorSize::Size64x2 => {
            // Rule at src/isa/aarch64/inst.isle line 1248.
            return ScalarSize::Size64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vector_lane_size", "src/isa/aarch64/inst.isle line 1241"
    )
}

// Generated as internal constructor for term vector_size.
pub fn constructor_vector_size<C: Context>(ctx: &mut C, arg0: Type) -> VectorSize {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                match v2.1 {
                    0x8 => {
                        // Rule at src/isa/aarch64/inst.isle line 1283.
                        return VectorSize::Size8x8;
                    }
                    0x10 => {
                        // Rule at src/isa/aarch64/inst.isle line 1284.
                        return VectorSize::Size8x16;
                    }
                    _ => {}
                }
            }
            0x10 => {
                match v2.1 {
                    0x4 => {
                        // Rule at src/isa/aarch64/inst.isle line 1285.
                        return VectorSize::Size16x4;
                    }
                    0x8 => {
                        // Rule at src/isa/aarch64/inst.isle line 1286.
                        return VectorSize::Size16x8;
                    }
                    _ => {}
                }
            }
            0x20 => {
                match v2.1 {
                    0x2 => {
                        // Rule at src/isa/aarch64/inst.isle line 1287.
                        return VectorSize::Size32x2;
                    }
                    0x4 => {
                        // Rule at src/isa/aarch64/inst.isle line 1288.
                        return VectorSize::Size32x4;
                    }
                    _ => {}
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src/isa/aarch64/inst.isle line 1289.
                    return VectorSize::Size64x2;
                }
            }
            _ => {}
        }
    }
    let v12 = C::dynamic_lane(ctx, arg0);
    if let Some(v13) = v12 {
        match v13.0 {
            0x8 => {
                match v13.1 {
                    0x8 => {
                        // Rule at src/isa/aarch64/inst.isle line 1290.
                        return VectorSize::Size8x8;
                    }
                    0x10 => {
                        // Rule at src/isa/aarch64/inst.isle line 1291.
                        return VectorSize::Size8x16;
                    }
                    _ => {}
                }
            }
            0x10 => {
                match v13.1 {
                    0x4 => {
                        // Rule at src/isa/aarch64/inst.isle line 1292.
                        return VectorSize::Size16x4;
                    }
                    0x8 => {
                        // Rule at src/isa/aarch64/inst.isle line 1293.
                        return VectorSize::Size16x8;
                    }
                    _ => {}
                }
            }
            0x20 => {
                match v13.1 {
                    0x2 => {
                        // Rule at src/isa/aarch64/inst.isle line 1294.
                        return VectorSize::Size32x2;
                    }
                    0x4 => {
                        // Rule at src/isa/aarch64/inst.isle line 1295.
                        return VectorSize::Size32x4;
                    }
                    _ => {}
                }
            }
            0x40 => {
                if v13.1 == 0x2 {
                    // Rule at src/isa/aarch64/inst.isle line 1296.
                    return VectorSize::Size64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vector_size", "src/isa/aarch64/inst.isle line 1282"
    )
}

// Generated as internal constructor for term imm12_from_negated_value.
pub fn constructor_imm12_from_negated_value<C: Context>(ctx: &mut C, arg0: Value) -> Option<Imm12> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::first_result(ctx, v2);
        if let Some(v4) = v3 {
            let v6 = &C::inst_data(ctx, v2);
            if let &InstructionData::UnaryImm {
                opcode: ref v7,
                imm: v8,
            } = v6
            {
                if let &Opcode::Iconst = v7 {
                    let v5 = C::value_type(ctx, v4);
                    let v9 = C::i64_sextend_imm64(ctx, v5, v8);
                    let v10 = C::i64_neg(ctx, v9);
                    let v11 = C::i64_as_u64(ctx, v10);
                    let v12 = C::imm12_from_u64(ctx, v11);
                    if let Some(v13) = v12 {
                        // Rule at src/isa/aarch64/inst.isle line 1788.
                        return Some(v13);
                    }
                }
            }
        }
    }
    None
}

// Generated as internal constructor for term value_regs_zero.
pub fn constructor_value_regs_zero<C: Context>(ctx: &mut C) -> ValueRegs {
    let v3 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
    let v4 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
    let v5 = C::value_regs(ctx, v3, v4);
    // Rule at src/isa/aarch64/inst.isle line 1834.
    return v5;
}

// Generated as internal constructor for term mov.
pub fn constructor_mov<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = &constructor_operand_size(ctx, arg1);
    let v5 = MInst::Mov {
        size: v4.clone(),
        rd: v3,
        rm: arg0,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 1842.
    return v7;
}

// Generated as internal constructor for term movz.
pub fn constructor_movz<C: Context>(ctx: &mut C, arg0: MoveWideConst, arg1: &OperandSize) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::MovWide {
        op: MoveWideOp::MovZ,
        rd: v3,
        imm: arg0,
        size: arg1.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 1849.
    return v7;
}

// Generated as internal constructor for term movn.
pub fn constructor_movn<C: Context>(ctx: &mut C, arg0: MoveWideConst, arg1: &OperandSize) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::MovWide {
        op: MoveWideOp::MovN,
        rd: v3,
        imm: arg0,
        size: arg1.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 1856.
    return v7;
}

// Generated as internal constructor for term alu_rr_imm_logic.
pub fn constructor_alu_rr_imm_logic<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: ImmLogic,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg1);
    let v7 = MInst::AluRRImmLogic {
        alu_op: arg0.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg2,
        imml: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 1863.
    return v9;
}

// Generated as internal constructor for term alu_rr_imm_shift.
pub fn constructor_alu_rr_imm_shift<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: ImmShift,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg1);
    let v7 = MInst::AluRRImmShift {
        alu_op: arg0.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg2,
        immshift: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 1870.
    return v9;
}

// Generated as internal constructor for term alu_rrr.
pub fn constructor_alu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg1);
    let v7 = MInst::AluRRR {
        alu_op: arg0.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg2,
        rm: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 1877.
    return v9;
}

// Generated as internal constructor for term vec_rrr.
pub fn constructor_vec_rrr<C: Context>(
    ctx: &mut C,
    arg0: &VecALUOp,
    arg1: Reg,
    arg2: Reg,
    arg3: &VectorSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecRRR {
        alu_op: arg0.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
        size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 1884.
    return v8;
}

// Generated as internal constructor for term fpu_rr.
pub fn constructor_fpu_rr<C: Context>(
    ctx: &mut C,
    arg0: &FPUOp1,
    arg1: Reg,
    arg2: &ScalarSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, F64);
    let v5 = MInst::FpuRR {
        fpu_op: arg0.clone(),
        size: arg2.clone(),
        rd: v4,
        rn: arg1,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 1891.
    return v7;
}

// Generated as internal constructor for term vec_rrr_mod.
pub fn constructor_vec_rrr_mod<C: Context>(
    ctx: &mut C,
    arg0: &VecALUModOp,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
    arg4: &VectorSize,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I8X16);
    let v7 = MInst::VecRRRMod {
        alu_op: arg0.clone(),
        rd: v6,
        ri: arg1,
        rn: arg2,
        rm: arg3,
        size: arg4.clone(),
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 1899.
    return v9;
}

// Generated as internal constructor for term vec_fmla_elem.
pub fn constructor_vec_fmla_elem<C: Context>(
    ctx: &mut C,
    arg0: &VecALUModOp,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
    arg4: &VectorSize,
    arg5: u8,
) -> Reg {
    let v7 = C::temp_writable_reg(ctx, I8X16);
    let v8 = MInst::VecFmlaElem {
        alu_op: arg0.clone(),
        rd: v7,
        ri: arg1,
        rn: arg2,
        rm: arg3,
        size: arg4.clone(),
        idx: arg5,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v7);
    // Rule at src/isa/aarch64/inst.isle line 1907.
    return v10;
}

// Generated as internal constructor for term fpu_rri.
pub fn constructor_fpu_rri<C: Context>(ctx: &mut C, arg0: &FPUOpRI, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64);
    let v4 = MInst::FpuRRI {
        fpu_op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 1913.
    return v6;
}

// Generated as internal constructor for term fpu_rri_mod.
pub fn constructor_fpu_rri_mod<C: Context>(
    ctx: &mut C,
    arg0: &FPUOpRIMod,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, F64);
    let v5 = MInst::FpuRRIMod {
        fpu_op: arg0.clone(),
        rd: v4,
        ri: arg1,
        rn: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 1919.
    return v7;
}

// Generated as internal constructor for term fpu_rrr.
pub fn constructor_fpu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &FPUOp2,
    arg1: Reg,
    arg2: Reg,
    arg3: &ScalarSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, F64);
    let v6 = MInst::FpuRRR {
        fpu_op: arg0.clone(),
        size: arg3.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 1926.
    return v8;
}

// Generated as internal constructor for term fpu_rrrr.
pub fn constructor_fpu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: &FPUOp3,
    arg1: &ScalarSize,
    arg2: Reg,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, F64);
    let v7 = MInst::FpuRRRR {
        fpu_op: arg0.clone(),
        size: arg1.clone(),
        rd: v6,
        rn: arg2,
        rm: arg3,
        ra: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 1933.
    return v9;
}

// Generated as internal constructor for term fpu_cmp.
pub fn constructor_fpu_cmp<C: Context>(
    ctx: &mut C,
    arg0: &ScalarSize,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = MInst::FpuCmp {
        size: arg0.clone(),
        rn: arg1,
        rm: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 1940.
    return v4;
}

// Generated as internal constructor for term vec_lanes.
pub fn constructor_vec_lanes<C: Context>(
    ctx: &mut C,
    arg0: &VecLanesOp,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecLanes {
        op: arg0.clone(),
        rd: v4,
        rn: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 1946.
    return v7;
}

// Generated as internal constructor for term vec_shift_imm.
pub fn constructor_vec_shift_imm<C: Context>(
    ctx: &mut C,
    arg0: &VecShiftImmOp,
    arg1: u8,
    arg2: Reg,
    arg3: &VectorSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecShiftImm {
        op: arg0.clone(),
        rd: v5,
        rn: arg2,
        size: arg3.clone(),
        imm: arg1,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 1953.
    return v8;
}

// Generated as internal constructor for term vec_dup.
pub fn constructor_vec_dup<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::VecDup {
        rd: v3,
        rn: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 1960.
    return v6;
}

// Generated as internal constructor for term vec_dup_from_fpu.
pub fn constructor_vec_dup_from_fpu<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &VectorSize,
    arg2: u8,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecDupFromFpu {
        rd: v4,
        rn: arg0,
        size: arg1.clone(),
        lane: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 1967.
    return v7;
}

// Generated as internal constructor for term vec_dup_imm.
pub fn constructor_vec_dup_imm<C: Context>(
    ctx: &mut C,
    arg0: ASIMDMovModImm,
    arg1: bool,
    arg2: &VectorSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecDupImm {
        rd: v4,
        imm: arg0,
        invert: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 1974.
    return v7;
}

// Generated as internal constructor for term alu_rr_imm12.
pub fn constructor_alu_rr_imm12<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Imm12,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg1);
    let v7 = MInst::AluRRImm12 {
        alu_op: arg0.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg2,
        imm12: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 1981.
    return v9;
}

// Generated as internal constructor for term alu_rrr_shift.
pub fn constructor_alu_rrr_shift<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
    arg4: ShiftOpAndAmt,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = &constructor_operand_size(ctx, arg1);
    let v8 = MInst::AluRRRShift {
        alu_op: arg0.clone(),
        size: v7.clone(),
        rd: v6,
        rn: arg2,
        rm: arg3,
        shiftop: arg4,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 1988.
    return v10;
}

// Generated as internal constructor for term cmp_rr_shift.
pub fn constructor_cmp_rr_shift<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
    arg3: u64,
) -> ProducesFlags {
    let v5 = C::lshr_from_u64(ctx, I64, arg3);
    if let Some(v6) = v5 {
        let v8 = C::writable_zero_reg(ctx);
        let v9 = MInst::AluRRRShift {
            alu_op: ALUOp::SubS,
            size: arg0.clone(),
            rd: v8,
            rn: arg1,
            rm: arg2,
            shiftop: v6,
        };
        let v10 = ProducesFlags::ProducesFlagsSideEffect { inst: v9 };
        // Rule at src/isa/aarch64/inst.isle line 1996.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_rr_shift", "src/isa/aarch64/inst.isle line 1995"
    )
}

// Generated as internal constructor for term cmp_rr_shift_asr.
pub fn constructor_cmp_rr_shift_asr<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
    arg3: u64,
) -> ProducesFlags {
    let v5 = C::ashr_from_u64(ctx, I64, arg3);
    if let Some(v6) = v5 {
        let v8 = C::writable_zero_reg(ctx);
        let v9 = MInst::AluRRRShift {
            alu_op: ALUOp::SubS,
            size: arg0.clone(),
            rd: v8,
            rn: arg1,
            rm: arg2,
            shiftop: v6,
        };
        let v10 = ProducesFlags::ProducesFlagsSideEffect { inst: v9 };
        // Rule at src/isa/aarch64/inst.isle line 2005.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_rr_shift_asr", "src/isa/aarch64/inst.isle line 2004"
    )
}

// Generated as internal constructor for term alu_rrr_extend.
pub fn constructor_alu_rrr_extend<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
    arg4: &ExtendOp,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = &constructor_operand_size(ctx, arg1);
    let v8 = MInst::AluRRRExtend {
        alu_op: arg0.clone(),
        size: v7.clone(),
        rd: v6,
        rn: arg2,
        rm: arg3,
        extendop: arg4.clone(),
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 2013.
    return v10;
}

// Generated as internal constructor for term alu_rr_extend_reg.
pub fn constructor_alu_rr_extend_reg<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: &ExtendedValue,
) -> Reg {
    let v4 = C::put_extended_in_reg(ctx, arg3);
    let v5 = &C::get_extended_op(ctx, arg3);
    let v6 = constructor_alu_rrr_extend(ctx, arg0, arg1, arg2, v4, v5);
    // Rule at src/isa/aarch64/inst.isle line 2021.
    return v6;
}

// Generated as internal constructor for term alu_rrrr.
pub fn constructor_alu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp3,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = &constructor_operand_size(ctx, arg1);
    let v8 = MInst::AluRRRR {
        alu_op: arg0.clone(),
        size: v7.clone(),
        rd: v6,
        rn: arg2,
        rm: arg3,
        ra: arg4,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 2028.
    return v10;
}

// Generated as internal constructor for term alu_rrr_with_flags_paired.
pub fn constructor_alu_rrr_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &ALUOp,
) -> ProducesFlags {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: arg3.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v5);
    let v9 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v7,
        result: v8,
    };
    // Rule at src/isa/aarch64/inst.isle line 2035.
    return v9;
}

// Generated as internal constructor for term alu_rrr_with_flags_chained.
pub fn constructor_alu_rrr_with_flags_chained<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &ALUOp,
) -> ConsumesAndProducesFlags {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: arg3.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v5);
    let v9 = ConsumesAndProducesFlags::ReturnsReg {
        inst: v7,
        result: v8,
    };
    // Rule at src/isa/aarch64/inst.isle line 2043.
    return v9;
}

// Generated as internal constructor for term bit_rr.
pub fn constructor_bit_rr<C: Context>(ctx: &mut C, arg0: &BitOp, arg1: Type, arg2: Reg) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = &constructor_operand_size(ctx, arg1);
    let v6 = MInst::BitRR {
        op: arg0.clone(),
        size: v5.clone(),
        rd: v4,
        rn: arg2,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2051.
    return v8;
}

// Generated as internal constructor for term add_with_flags_paired.
pub fn constructor_add_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: ALUOp::AddS,
        size: v6.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v9 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v7,
        result: v8,
    };
    // Rule at src/isa/aarch64/inst.isle line 2058.
    return v9;
}

// Generated as internal constructor for term adc_paired.
pub fn constructor_adc_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: ALUOp::Adc,
        size: v6.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v9 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v7,
        result: v8,
    };
    // Rule at src/isa/aarch64/inst.isle line 2066.
    return v9;
}

// Generated as internal constructor for term sub_with_flags_paired.
pub fn constructor_sub_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: ALUOp::SubS,
        size: v6.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v9 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v7,
        result: v8,
    };
    // Rule at src/isa/aarch64/inst.isle line 2074.
    return v9;
}

// Generated as internal constructor for term materialize_bool_result.
pub fn constructor_materialize_bool_result<C: Context>(ctx: &mut C, arg0: &Cond) -> ConsumesFlags {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::CSet {
        rd: v2,
        cond: arg0.clone(),
    };
    let v4 = C::writable_reg_to_reg(ctx, v2);
    let v5 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v3,
        result: v4,
    };
    // Rule at src/isa/aarch64/inst.isle line 2083.
    return v5;
}

// Generated as internal constructor for term cmn_imm.
pub fn constructor_cmn_imm<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Imm12,
) -> ProducesFlags {
    let v4 = C::writable_zero_reg(ctx);
    let v5 = MInst::AluRRImm12 {
        alu_op: ALUOp::AddS,
        size: arg0.clone(),
        rd: v4,
        rn: arg1,
        imm12: arg2,
    };
    let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v5 };
    // Rule at src/isa/aarch64/inst.isle line 2090.
    return v6;
}

// Generated as internal constructor for term cmp.
pub fn constructor_cmp<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v4 = C::writable_zero_reg(ctx);
    let v5 = MInst::AluRRR {
        alu_op: ALUOp::SubS,
        size: arg0.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v5 };
    // Rule at src/isa/aarch64/inst.isle line 2096.
    return v6;
}

// Generated as internal constructor for term cmp_imm.
pub fn constructor_cmp_imm<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Imm12,
) -> ProducesFlags {
    let v4 = C::writable_zero_reg(ctx);
    let v5 = MInst::AluRRImm12 {
        alu_op: ALUOp::SubS,
        size: arg0.clone(),
        rd: v4,
        rn: arg1,
        imm12: arg2,
    };
    let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v5 };
    // Rule at src/isa/aarch64/inst.isle line 2102.
    return v6;
}

// Generated as internal constructor for term cmp64_imm.
pub fn constructor_cmp64_imm<C: Context>(ctx: &mut C, arg0: Reg, arg1: Imm12) -> ProducesFlags {
    let v3 = &constructor_cmp_imm(ctx, &OperandSize::Size64, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2108.
    return v3.clone();
}

// Generated as internal constructor for term cmp_extend.
pub fn constructor_cmp_extend<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
    arg3: &ExtendOp,
) -> ProducesFlags {
    let v5 = C::writable_zero_reg(ctx);
    let v6 = MInst::AluRRRExtend {
        alu_op: ALUOp::SubS,
        size: arg0.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
        extendop: arg3.clone(),
    };
    let v7 = ProducesFlags::ProducesFlagsSideEffect { inst: v6 };
    // Rule at src/isa/aarch64/inst.isle line 2112.
    return v7;
}

// Generated as internal constructor for term sbc_paired.
pub fn constructor_sbc_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: ALUOp::Sbc,
        size: v6.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v9 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v7,
        result: v8,
    };
    // Rule at src/isa/aarch64/inst.isle line 2119.
    return v9;
}

// Generated as internal constructor for term vec_misc.
pub fn constructor_vec_misc<C: Context>(
    ctx: &mut C,
    arg0: &VecMisc2,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecMisc {
        op: arg0.clone(),
        rd: v4,
        rn: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2127.
    return v7;
}

// Generated as internal constructor for term vec_tbl.
pub fn constructor_vec_tbl<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::VecTbl {
        rd: v3,
        rn: arg0,
        rm: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2134.
    return v6;
}

// Generated as internal constructor for term vec_tbl_ext.
pub fn constructor_vec_tbl_ext<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecTblExt {
        rd: v4,
        ri: arg0,
        rn: arg1,
        rm: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2140.
    return v7;
}

// Generated as internal constructor for term vec_tbl2.
pub fn constructor_vec_tbl2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecTbl2 {
        rd: v5,
        rn: arg0,
        rn2: arg1,
        rm: arg2,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2147.
    return v8;
}

// Generated as internal constructor for term vec_tbl2_ext.
pub fn constructor_vec_tbl2_ext<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
    arg4: Type,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I8X16);
    let v7 = MInst::VecTbl2Ext {
        rd: v6,
        ri: arg0,
        rn: arg1,
        rn2: arg2,
        rm: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 2156.
    return v9;
}

// Generated as internal constructor for term vec_rrr_long.
pub fn constructor_vec_rrr_long<C: Context>(
    ctx: &mut C,
    arg0: &VecRRRLongOp,
    arg1: Reg,
    arg2: Reg,
    arg3: bool,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecRRRLong {
        alu_op: arg0.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
        high_half: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2165.
    return v8;
}

// Generated as internal constructor for term vec_rr_pair_long.
pub fn constructor_vec_rr_pair_long<C: Context>(
    ctx: &mut C,
    arg0: &VecRRPairLongOp,
    arg1: Reg,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::VecRRPairLong {
        op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2172.
    return v6;
}

// Generated as internal constructor for term vec_rrrr_long.
pub fn constructor_vec_rrrr_long<C: Context>(
    ctx: &mut C,
    arg0: &VecRRRLongModOp,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
    arg4: bool,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I8X16);
    let v7 = MInst::VecRRRLongMod {
        alu_op: arg0.clone(),
        rd: v6,
        ri: arg1,
        rn: arg2,
        rm: arg3,
        high_half: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 2179.
    return v9;
}

// Generated as internal constructor for term vec_rr_narrow_low.
pub fn constructor_vec_rr_narrow_low<C: Context>(
    ctx: &mut C,
    arg0: &VecRRNarrowOp,
    arg1: Reg,
    arg2: &ScalarSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecRRNarrowLow {
        op: arg0.clone(),
        rd: v4,
        rn: arg1,
        lane_size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2186.
    return v7;
}

// Generated as internal constructor for term vec_rr_narrow_high.
pub fn constructor_vec_rr_narrow_high<C: Context>(
    ctx: &mut C,
    arg0: &VecRRNarrowOp,
    arg1: Reg,
    arg2: Reg,
    arg3: &ScalarSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecRRNarrowHigh {
        op: arg0.clone(),
        rd: v5,
        ri: arg1,
        rn: arg2,
        lane_size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2194.
    return v8;
}

// Generated as internal constructor for term vec_rr_long.
pub fn constructor_vec_rr_long<C: Context>(
    ctx: &mut C,
    arg0: &VecRRLongOp,
    arg1: Reg,
    arg2: bool,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecRRLong {
        op: arg0.clone(),
        rd: v4,
        rn: arg1,
        high_half: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2201.
    return v7;
}

// Generated as internal constructor for term fpu_csel.
pub fn constructor_fpu_csel<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: Reg,
    arg3: Reg,
) -> ConsumesFlags {
    match arg0 {
        F32 => {
            let v5 = C::temp_writable_reg(ctx, F32);
            let v6 = MInst::FpuCSel32 {
                rd: v5,
                rn: arg2,
                rm: arg3,
                cond: arg1.clone(),
            };
            let v7 = C::writable_reg_to_reg(ctx, v5);
            let v8 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v6,
                result: v7,
            };
            // Rule at src/isa/aarch64/inst.isle line 2209.
            return v8;
        }
        F64 => {
            let v10 = C::temp_writable_reg(ctx, F64);
            let v11 = MInst::FpuCSel64 {
                rd: v10,
                rn: arg2,
                rm: arg3,
                cond: arg1.clone(),
            };
            let v12 = C::writable_reg_to_reg(ctx, v10);
            let v13 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v11,
                result: v12,
            };
            // Rule at src/isa/aarch64/inst.isle line 2215.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpu_csel", "src/isa/aarch64/inst.isle line 2208"
    )
}

// Generated as internal constructor for term vec_csel.
pub fn constructor_vec_csel<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecCSel {
        rd: v4,
        rn: arg1,
        rm: arg2,
        cond: arg0.clone(),
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/aarch64/inst.isle line 2223.
    return v7;
}

// Generated as internal constructor for term fpu_round.
pub fn constructor_fpu_round<C: Context>(ctx: &mut C, arg0: &FpuRoundMode, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64);
    let v4 = MInst::FpuRound {
        op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2231.
    return v6;
}

// Generated as internal constructor for term fpu_move.
pub fn constructor_fpu_move<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v7 = C::fits_in_64(ctx, arg0);
    if let Some(v8) = v7 {
        let v10 = C::temp_writable_reg(ctx, F64);
        let v11 = MInst::FpuMove64 { rd: v10, rn: arg1 };
        let v12 = C::emit(ctx, &v11);
        let v13 = C::writable_reg_to_reg(ctx, v10);
        // Rule at src/isa/aarch64/inst.isle line 2242.
        return v13;
    }
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::FpuMove128 { rd: v3, rn: arg1 };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2238.
    return v6;
}

// Generated as internal constructor for term mov_to_fpu.
pub fn constructor_mov_to_fpu<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::MovToFpu {
        rd: v3,
        rn: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2249.
    return v6;
}

// Generated as internal constructor for term fpu_move_fp_imm.
pub fn constructor_fpu_move_fp_imm<C: Context>(
    ctx: &mut C,
    arg0: ASIMDFPModImm,
    arg1: &ScalarSize,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::FpuMoveFPImm {
        rd: v3,
        imm: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2256.
    return v6;
}

// Generated as internal constructor for term mov_to_vec.
pub fn constructor_mov_to_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: u8,
    arg3: &VectorSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::MovToVec {
        rd: v5,
        ri: arg0,
        rn: arg1,
        idx: arg2,
        size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2263.
    return v8;
}

// Generated as internal constructor for term mov_vec_elem.
pub fn constructor_mov_vec_elem<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: u8,
    arg3: u8,
    arg4: &VectorSize,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I8X16);
    let v7 = MInst::VecMovElement {
        rd: v6,
        ri: arg0,
        rn: arg1,
        dest_idx: arg2,
        src_idx: arg3,
        size: arg4.clone(),
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 2270.
    return v9;
}

// Generated as internal constructor for term mov_from_vec.
pub fn constructor_mov_from_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &ScalarSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::MovFromVec {
        rd: v4,
        rn: arg0,
        idx: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2277.
    return v7;
}

// Generated as internal constructor for term mov_from_vec_signed.
pub fn constructor_mov_from_vec_signed<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
    arg3: &OperandSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = MInst::MovFromVecSigned {
        rd: v5,
        rn: arg0,
        idx: arg1,
        size: arg2.clone(),
        scalar_size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2284.
    return v8;
}

// Generated as internal constructor for term fpu_move_from_vec.
pub fn constructor_fpu_move_from_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::FpuMoveFromVec {
        rd: v4,
        rn: arg0,
        idx: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2290.
    return v7;
}

// Generated as internal constructor for term extend.
pub fn constructor_extend<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: bool,
    arg2: u8,
    arg3: u8,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = MInst::Extend {
        rd: v5,
        rn: arg0,
        signed: arg1,
        from_bits: arg2,
        to_bits: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2297.
    return v8;
}

// Generated as internal constructor for term fpu_extend.
pub fn constructor_fpu_extend<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F32X4);
    let v4 = MInst::FpuExtend {
        rd: v3,
        rn: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2304.
    return v6;
}

// Generated as internal constructor for term vec_extend.
pub fn constructor_vec_extend<C: Context>(
    ctx: &mut C,
    arg0: &VecExtendOp,
    arg1: Reg,
    arg2: bool,
    arg3: &ScalarSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecExtend {
        t: arg0.clone(),
        rd: v5,
        rn: arg1,
        high_half: arg2,
        lane_size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2311.
    return v8;
}

// Generated as internal constructor for term vec_extract.
pub fn constructor_vec_extract<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: u8) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecExtract {
        rd: v4,
        rn: arg0,
        rm: arg1,
        imm4: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2318.
    return v7;
}

// Generated as internal constructor for term load_acquire.
pub fn constructor_load_acquire<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::LoadAcquire {
        access_ty: arg0,
        rt: v4,
        rn: arg2,
        flags: arg1,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2325.
    return v7;
}

// Generated as internal constructor for term store_release.
pub fn constructor_store_release<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Reg,
    arg3: Reg,
) -> SideEffectNoResult {
    let v4 = MInst::StoreRelease {
        access_ty: arg0,
        rt: arg2,
        rn: arg3,
        flags: arg1,
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    // Rule at src/isa/aarch64/inst.isle line 2332.
    return v5;
}

// Generated as internal constructor for term tst_imm.
pub fn constructor_tst_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmLogic,
) -> ProducesFlags {
    let v4 = &constructor_operand_size(ctx, arg0);
    let v5 = C::writable_zero_reg(ctx);
    let v6 = MInst::AluRRImmLogic {
        alu_op: ALUOp::AndS,
        size: v4.clone(),
        rd: v5,
        rn: arg1,
        imml: arg2,
    };
    let v7 = ProducesFlags::ProducesFlagsSideEffect { inst: v6 };
    // Rule at src/isa/aarch64/inst.isle line 2340.
    return v7;
}

// Generated as internal constructor for term csel.
pub fn constructor_csel<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::CSel {
        rd: v4,
        cond: arg0.clone(),
        rn: arg1,
        rm: arg2,
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/aarch64/inst.isle line 2354.
    return v7;
}

// Generated as internal constructor for term cset.
pub fn constructor_cset<C: Context>(ctx: &mut C, arg0: &Cond) -> ConsumesFlags {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::CSet {
        rd: v2,
        cond: arg0.clone(),
    };
    let v4 = C::writable_reg_to_reg(ctx, v2);
    let v5 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v3,
        result: v4,
    };
    // Rule at src/isa/aarch64/inst.isle line 2362.
    return v5;
}

// Generated as internal constructor for term cset_paired.
pub fn constructor_cset_paired<C: Context>(ctx: &mut C, arg0: &Cond) -> ConsumesFlags {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::CSet {
        rd: v2,
        cond: arg0.clone(),
    };
    let v4 = C::writable_reg_to_reg(ctx, v2);
    let v5 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v3,
        result: v4,
    };
    // Rule at src/isa/aarch64/inst.isle line 2369.
    return v5;
}

// Generated as internal constructor for term csetm.
pub fn constructor_csetm<C: Context>(ctx: &mut C, arg0: &Cond) -> ConsumesFlags {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::CSetm {
        rd: v2,
        cond: arg0.clone(),
    };
    let v4 = C::writable_reg_to_reg(ctx, v2);
    let v5 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v3,
        result: v4,
    };
    // Rule at src/isa/aarch64/inst.isle line 2375.
    return v5;
}

// Generated as internal constructor for term csneg.
pub fn constructor_csneg<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::CSNeg {
        rd: v4,
        cond: arg0.clone(),
        rn: arg1,
        rm: arg2,
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/aarch64/inst.isle line 2385.
    return v7;
}

// Generated as internal constructor for term ccmp.
pub fn constructor_ccmp<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
    arg3: NZCV,
    arg4: &Cond,
    arg5: &ProducesFlags,
) -> ProducesFlags {
    let v6 = MInst::CCmp {
        size: arg0.clone(),
        rn: arg1,
        rm: arg2,
        nzcv: arg3,
        cond: arg4.clone(),
    };
    let v7 = ProducesFlags::ProducesFlagsSideEffect { inst: v6 };
    let v8 = &constructor_produces_flags_concat(ctx, arg5, &v7);
    // Rule at src/isa/aarch64/inst.isle line 2395.
    return v8.clone();
}

// Generated as internal constructor for term ccmp_imm.
pub fn constructor_ccmp_imm<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: UImm5,
    arg3: NZCV,
    arg4: &Cond,
) -> ConsumesFlags {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    let v10 = C::value_reg(ctx, v9);
    let v7 = MInst::CCmpImm {
        size: arg0.clone(),
        rn: arg1,
        imm: arg2,
        nzcv: arg3,
        cond: arg4.clone(),
    };
    let v8 = MInst::CSet {
        rd: v6,
        cond: arg4.clone(),
    };
    let v11 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
        inst1: v7,
        inst2: v8,
        result: v10,
    };
    // Rule at src/isa/aarch64/inst.isle line 2400.
    return v11;
}

// Generated as internal constructor for term add.
pub fn constructor_add<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Add, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2410.
    return v4;
}

// Generated as internal constructor for term add_imm.
pub fn constructor_add_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Imm12) -> Reg {
    let v4 = constructor_alu_rr_imm12(ctx, &ALUOp::Add, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2413.
    return v4;
}

// Generated as internal constructor for term add_extend.
pub fn constructor_add_extend<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &ExtendedValue,
) -> Reg {
    let v4 = constructor_alu_rr_extend_reg(ctx, &ALUOp::Add, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2416.
    return v4;
}

// Generated as internal constructor for term add_extend_op.
pub fn constructor_add_extend_op<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &ExtendOp,
) -> Reg {
    let v5 = constructor_alu_rrr_extend(ctx, &ALUOp::Add, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2419.
    return v5;
}

// Generated as internal constructor for term add_shift.
pub fn constructor_add_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: ShiftOpAndAmt,
) -> Reg {
    let v5 = constructor_alu_rrr_shift(ctx, &ALUOp::Add, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2422.
    return v5;
}

// Generated as internal constructor for term add_vec.
pub fn constructor_add_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Add, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2425.
    return v4;
}

// Generated as internal constructor for term sub.
pub fn constructor_sub<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Sub, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2430.
    return v4;
}

// Generated as internal constructor for term sub_imm.
pub fn constructor_sub_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Imm12) -> Reg {
    let v4 = constructor_alu_rr_imm12(ctx, &ALUOp::Sub, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2433.
    return v4;
}

// Generated as internal constructor for term sub_extend.
pub fn constructor_sub_extend<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &ExtendedValue,
) -> Reg {
    let v4 = constructor_alu_rr_extend_reg(ctx, &ALUOp::Sub, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2436.
    return v4;
}

// Generated as internal constructor for term sub_shift.
pub fn constructor_sub_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: ShiftOpAndAmt,
) -> Reg {
    let v5 = constructor_alu_rrr_shift(ctx, &ALUOp::Sub, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2439.
    return v5;
}

// Generated as internal constructor for term sub_vec.
pub fn constructor_sub_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Sub, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2442.
    return v4;
}

// Generated as internal constructor for term sub_i128.
pub fn constructor_sub_i128<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0);
    let v5 = C::value_regs_get(ctx, arg0, 0x1);
    let v6 = C::value_regs_get(ctx, arg1, 0x0);
    let v7 = C::value_regs_get(ctx, arg1, 0x1);
    let v9 = &constructor_sub_with_flags_paired(ctx, I64, v3, v6);
    let v10 = &constructor_sbc_paired(ctx, I64, v5, v7);
    let v11 = constructor_with_flags(ctx, v9, v10);
    // Rule at src/isa/aarch64/inst.isle line 2445.
    return v11;
}

// Generated as internal constructor for term madd.
pub fn constructor_madd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v5 = constructor_alu_rrrr(ctx, &ALUOp3::MAdd, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2465.
    return v5;
}

// Generated as internal constructor for term msub.
pub fn constructor_msub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v5 = constructor_alu_rrrr(ctx, &ALUOp3::MSub, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2470.
    return v5;
}

// Generated as internal constructor for term umaddl.
pub fn constructor_umaddl<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: Reg) -> Reg {
    let v5 = constructor_alu_rrrr(ctx, &ALUOp3::UMAddL, I32, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2474.
    return v5;
}

// Generated as internal constructor for term smaddl.
pub fn constructor_smaddl<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: Reg) -> Reg {
    let v5 = constructor_alu_rrrr(ctx, &ALUOp3::SMAddL, I32, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2478.
    return v5;
}

// Generated as internal constructor for term uqadd.
pub fn constructor_uqadd<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Uqadd, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2482.
    return v4;
}

// Generated as internal constructor for term sqadd.
pub fn constructor_sqadd<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Sqadd, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2486.
    return v4;
}

// Generated as internal constructor for term uqsub.
pub fn constructor_uqsub<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Uqsub, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2490.
    return v4;
}

// Generated as internal constructor for term sqsub.
pub fn constructor_sqsub<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Sqsub, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2494.
    return v4;
}

// Generated as internal constructor for term umulh.
pub fn constructor_umulh<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::UMulH, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2498.
    return v4;
}

// Generated as internal constructor for term smulh.
pub fn constructor_smulh<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::SMulH, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2502.
    return v4;
}

// Generated as internal constructor for term mul.
pub fn constructor_mul<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Mul, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2506.
    return v4;
}

// Generated as internal constructor for term neg.
pub fn constructor_neg<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Neg, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2510.
    return v3;
}

// Generated as internal constructor for term rev16.
pub fn constructor_rev16<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Rev16, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2514.
    return v3;
}

// Generated as internal constructor for term rev32.
pub fn constructor_rev32<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Rev32, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2518.
    return v3;
}

// Generated as internal constructor for term rev64.
pub fn constructor_rev64<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Rev64, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2522.
    return v3;
}

// Generated as internal constructor for term xtn.
pub fn constructor_xtn<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Xtn, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2526.
    return v3;
}

// Generated as internal constructor for term fcvtn.
pub fn constructor_fcvtn<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Fcvtn, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2530.
    return v3;
}

// Generated as internal constructor for term sqxtn.
pub fn constructor_sqxtn<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Sqxtn, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2534.
    return v3;
}

// Generated as internal constructor for term sqxtn2.
pub fn constructor_sqxtn2<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &ScalarSize) -> Reg {
    let v4 = constructor_vec_rr_narrow_high(ctx, &VecRRNarrowOp::Sqxtn, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2538.
    return v4;
}

// Generated as internal constructor for term sqxtun.
pub fn constructor_sqxtun<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Sqxtun, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2542.
    return v3;
}

// Generated as internal constructor for term sqxtun2.
pub fn constructor_sqxtun2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &ScalarSize,
) -> Reg {
    let v4 = constructor_vec_rr_narrow_high(ctx, &VecRRNarrowOp::Sqxtun, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2546.
    return v4;
}

// Generated as internal constructor for term uqxtn.
pub fn constructor_uqxtn<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Uqxtn, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2550.
    return v3;
}

// Generated as internal constructor for term uqxtn2.
pub fn constructor_uqxtn2<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &ScalarSize) -> Reg {
    let v4 = constructor_vec_rr_narrow_high(ctx, &VecRRNarrowOp::Uqxtn, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2554.
    return v4;
}

// Generated as internal constructor for term aarch64_fence.
pub fn constructor_aarch64_fence<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst { inst: MInst::Fence };
    // Rule at src/isa/aarch64/inst.isle line 2558.
    return v1;
}

// Generated as internal constructor for term csdb.
pub fn constructor_csdb<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst { inst: MInst::Csdb };
    // Rule at src/isa/aarch64/inst.isle line 2563.
    return v1;
}

// Generated as internal constructor for term brk.
pub fn constructor_brk<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst { inst: MInst::Brk };
    // Rule at src/isa/aarch64/inst.isle line 2568.
    return v1;
}

// Generated as internal constructor for term addp.
pub fn constructor_addp<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Addp, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2573.
    return v4;
}

// Generated as internal constructor for term zip1.
pub fn constructor_zip1<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Zip1, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2577.
    return v4;
}

// Generated as internal constructor for term vec_abs.
pub fn constructor_vec_abs<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Abs, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2581.
    return v3;
}

// Generated as internal constructor for term abs.
pub fn constructor_abs<C: Context>(ctx: &mut C, arg0: &OperandSize, arg1: Reg) -> Reg {
    let v3 = C::u8_into_imm12(ctx, 0x0);
    let v4 = &constructor_cmp_imm(ctx, arg0, arg1, v3);
    let v6 = &constructor_csneg(ctx, &Cond::Gt, arg1, arg1);
    let v7 = constructor_with_flags(ctx, v4, v6);
    let v9 = C::value_regs_get(ctx, v7, 0x0);
    // Rule at src/isa/aarch64/inst.isle line 2586.
    return v9;
}

// Generated as internal constructor for term addv.
pub fn constructor_addv<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_lanes(ctx, &VecLanesOp::Addv, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2592.
    return v3;
}

// Generated as internal constructor for term shll32.
pub fn constructor_shll32<C: Context>(ctx: &mut C, arg0: Reg, arg1: bool) -> Reg {
    let v3 = constructor_vec_rr_long(ctx, &VecRRLongOp::Shll32, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2596.
    return v3;
}

// Generated as internal constructor for term saddlp8.
pub fn constructor_saddlp8<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = constructor_vec_rr_pair_long(ctx, &VecRRPairLongOp::Saddlp8, arg0);
    // Rule at src/isa/aarch64/inst.isle line 2601.
    return v2;
}

// Generated as internal constructor for term saddlp16.
pub fn constructor_saddlp16<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = constructor_vec_rr_pair_long(ctx, &VecRRPairLongOp::Saddlp16, arg0);
    // Rule at src/isa/aarch64/inst.isle line 2604.
    return v2;
}

// Generated as internal constructor for term uaddlp8.
pub fn constructor_uaddlp8<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = constructor_vec_rr_pair_long(ctx, &VecRRPairLongOp::Uaddlp8, arg0);
    // Rule at src/isa/aarch64/inst.isle line 2607.
    return v2;
}

// Generated as internal constructor for term uaddlp16.
pub fn constructor_uaddlp16<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = constructor_vec_rr_pair_long(ctx, &VecRRPairLongOp::Uaddlp16, arg0);
    // Rule at src/isa/aarch64/inst.isle line 2610.
    return v2;
}

// Generated as internal constructor for term umlal32.
pub fn constructor_umlal32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: bool,
) -> Reg {
    let v5 = constructor_vec_rrrr_long(ctx, &VecRRRLongModOp::Umlal32, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2614.
    return v5;
}

// Generated as internal constructor for term smull8.
pub fn constructor_smull8<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Smull8, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2618.
    return v4;
}

// Generated as internal constructor for term umull8.
pub fn constructor_umull8<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Umull8, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2622.
    return v4;
}

// Generated as internal constructor for term smull16.
pub fn constructor_smull16<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Smull16, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2626.
    return v4;
}

// Generated as internal constructor for term umull16.
pub fn constructor_umull16<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Umull16, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2630.
    return v4;
}

// Generated as internal constructor for term smull32.
pub fn constructor_smull32<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Smull32, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2634.
    return v4;
}

// Generated as internal constructor for term umull32.
pub fn constructor_umull32<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Umull32, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2638.
    return v4;
}

// Generated as internal constructor for term asr.
pub fn constructor_asr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Asr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2642.
    return v4;
}

// Generated as internal constructor for term asr_imm.
pub fn constructor_asr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: ImmShift) -> Reg {
    let v4 = constructor_alu_rr_imm_shift(ctx, &ALUOp::Asr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2645.
    return v4;
}

// Generated as internal constructor for term lsr.
pub fn constructor_lsr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Lsr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2649.
    return v4;
}

// Generated as internal constructor for term lsr_imm.
pub fn constructor_lsr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: ImmShift) -> Reg {
    let v4 = constructor_alu_rr_imm_shift(ctx, &ALUOp::Lsr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2652.
    return v4;
}

// Generated as internal constructor for term lsl.
pub fn constructor_lsl<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Lsl, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2656.
    return v4;
}

// Generated as internal constructor for term lsl_imm.
pub fn constructor_lsl_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: ImmShift) -> Reg {
    let v4 = constructor_alu_rr_imm_shift(ctx, &ALUOp::Lsl, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2659.
    return v4;
}

// Generated as internal constructor for term a64_udiv.
pub fn constructor_a64_udiv<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::UDiv, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2663.
    return v4;
}

// Generated as internal constructor for term a64_sdiv.
pub fn constructor_a64_sdiv<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::SDiv, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2667.
    return v4;
}

// Generated as internal constructor for term not.
pub fn constructor_not<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Not, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2671.
    return v3;
}

// Generated as internal constructor for term orr_not.
pub fn constructor_orr_not<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::OrrNot, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2676.
    return v4;
}

// Generated as internal constructor for term orr_not_shift.
pub fn constructor_orr_not_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: ShiftOpAndAmt,
) -> Reg {
    let v5 = constructor_alu_rrr_shift(ctx, &ALUOp::OrrNot, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2679.
    return v5;
}

// Generated as internal constructor for term orr.
pub fn constructor_orr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Orr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2684.
    return v4;
}

// Generated as internal constructor for term orr_imm.
pub fn constructor_orr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: ImmLogic) -> Reg {
    let v4 = constructor_alu_rr_imm_logic(ctx, &ALUOp::Orr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2687.
    return v4;
}

// Generated as internal constructor for term orr_shift.
pub fn constructor_orr_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: ShiftOpAndAmt,
) -> Reg {
    let v5 = constructor_alu_rrr_shift(ctx, &ALUOp::Orr, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2690.
    return v5;
}

// Generated as internal constructor for term orr_vec.
pub fn constructor_orr_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Orr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2693.
    return v4;
}

// Generated as internal constructor for term and_reg.
pub fn constructor_and_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::And, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2698.
    return v4;
}

// Generated as internal constructor for term and_imm.
pub fn constructor_and_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: ImmLogic) -> Reg {
    let v4 = constructor_alu_rr_imm_logic(ctx, &ALUOp::And, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2701.
    return v4;
}

// Generated as internal constructor for term and_vec.
pub fn constructor_and_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::And, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2704.
    return v4;
}

// Generated as internal constructor for term eor_vec.
pub fn constructor_eor_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Eor, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2708.
    return v4;
}

// Generated as internal constructor for term bic.
pub fn constructor_bic<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::AndNot, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2713.
    return v4;
}

// Generated as internal constructor for term bic_vec.
pub fn constructor_bic_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Bic, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2716.
    return v4;
}

// Generated as internal constructor for term sshl.
pub fn constructor_sshl<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Sshl, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2720.
    return v4;
}

// Generated as internal constructor for term ushl.
pub fn constructor_ushl<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Ushl, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2724.
    return v4;
}

// Generated as internal constructor for term ushl_vec_imm.
pub fn constructor_ushl_vec_imm<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_shift_imm(ctx, &VecShiftImmOp::Shl, arg1, arg0, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2728.
    return v4;
}

// Generated as internal constructor for term ushr_vec_imm.
pub fn constructor_ushr_vec_imm<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_shift_imm(ctx, &VecShiftImmOp::Ushr, arg1, arg0, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2732.
    return v4;
}

// Generated as internal constructor for term sshr_vec_imm.
pub fn constructor_sshr_vec_imm<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_shift_imm(ctx, &VecShiftImmOp::Sshr, arg1, arg0, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2736.
    return v4;
}

// Generated as internal constructor for term a64_rotr.
pub fn constructor_a64_rotr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::RotR, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2741.
    return v4;
}

// Generated as internal constructor for term a64_rotr_imm.
pub fn constructor_a64_rotr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmShift,
) -> Reg {
    let v4 = constructor_alu_rr_imm_shift(ctx, &ALUOp::RotR, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2744.
    return v4;
}

// Generated as internal constructor for term rbit.
pub fn constructor_rbit<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::RBit, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2749.
    return v3;
}

// Generated as internal constructor for term a64_clz.
pub fn constructor_a64_clz<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Clz, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2754.
    return v3;
}

// Generated as internal constructor for term a64_cls.
pub fn constructor_a64_cls<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Cls, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2759.
    return v3;
}

// Generated as internal constructor for term a64_rev16.
pub fn constructor_a64_rev16<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Rev16, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2764.
    return v3;
}

// Generated as internal constructor for term a64_rev32.
pub fn constructor_a64_rev32<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Rev32, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2767.
    return v3;
}

// Generated as internal constructor for term a64_rev64.
pub fn constructor_a64_rev64<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Rev64, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2770.
    return v3;
}

// Generated as internal constructor for term eon.
pub fn constructor_eon<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::EorNot, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2775.
    return v4;
}

// Generated as internal constructor for term vec_cnt.
pub fn constructor_vec_cnt<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Cnt, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2780.
    return v3;
}

// Generated as internal constructor for term bsl.
pub fn constructor_bsl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v5 = &constructor_vector_size(ctx, arg0);
    let v6 = constructor_vec_rrr_mod(ctx, &VecALUModOp::Bsl, arg1, arg2, arg3, v5);
    // Rule at src/isa/aarch64/inst.isle line 2785.
    return v6;
}

// Generated as internal constructor for term udf.
pub fn constructor_udf<C: Context>(ctx: &mut C, arg0: &TrapCode) -> SideEffectNoResult {
    let v1 = MInst::Udf {
        trap_code: arg0.clone(),
    };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/aarch64/inst.isle line 2791.
    return v2;
}

// Generated as internal constructor for term aarch64_uload8.
pub fn constructor_aarch64_uload8<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::ULoad8 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2797.
    return v6;
}

// Generated as internal constructor for term aarch64_sload8.
pub fn constructor_aarch64_sload8<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::SLoad8 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2802.
    return v6;
}

// Generated as internal constructor for term aarch64_uload16.
pub fn constructor_aarch64_uload16<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::ULoad16 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2807.
    return v6;
}

// Generated as internal constructor for term aarch64_sload16.
pub fn constructor_aarch64_sload16<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::SLoad16 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2812.
    return v6;
}

// Generated as internal constructor for term aarch64_uload32.
pub fn constructor_aarch64_uload32<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::ULoad32 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2817.
    return v6;
}

// Generated as internal constructor for term aarch64_sload32.
pub fn constructor_aarch64_sload32<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::SLoad32 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2822.
    return v6;
}

// Generated as internal constructor for term aarch64_uload64.
pub fn constructor_aarch64_uload64<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::ULoad64 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2827.
    return v6;
}

// Generated as internal constructor for term aarch64_fpuload32.
pub fn constructor_aarch64_fpuload32<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64);
    let v4 = MInst::FpuLoad32 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2832.
    return v6;
}

// Generated as internal constructor for term aarch64_fpuload64.
pub fn constructor_aarch64_fpuload64<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64);
    let v4 = MInst::FpuLoad64 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2837.
    return v6;
}

// Generated as internal constructor for term aarch64_fpuload128.
pub fn constructor_aarch64_fpuload128<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64X2);
    let v4 = MInst::FpuLoad128 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2842.
    return v6;
}

// Generated as internal constructor for term aarch64_loadp64.
pub fn constructor_aarch64_loadp64<C: Context>(
    ctx: &mut C,
    arg0: &PairAMode,
    arg1: MemFlags,
) -> ValueRegs {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::LoadP64 {
        rt: v3,
        rt2: v4,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v9 = C::value_regs(ctx, v7, v8);
    // Rule at src/isa/aarch64/inst.isle line 2847.
    return v9;
}

// Generated as internal constructor for term aarch64_store8.
pub fn constructor_aarch64_store8<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::Store8 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 2856.
    return v4;
}

// Generated as internal constructor for term aarch64_store16.
pub fn constructor_aarch64_store16<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::Store16 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 2859.
    return v4;
}

// Generated as internal constructor for term aarch64_store32.
pub fn constructor_aarch64_store32<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::Store32 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 2862.
    return v4;
}

// Generated as internal constructor for term aarch64_store64.
pub fn constructor_aarch64_store64<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::Store64 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 2865.
    return v4;
}

// Generated as internal constructor for term aarch64_fpustore32.
pub fn constructor_aarch64_fpustore32<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::FpuStore32 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 2868.
    return v4;
}

// Generated as internal constructor for term aarch64_fpustore64.
pub fn constructor_aarch64_fpustore64<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::FpuStore64 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 2871.
    return v4;
}

// Generated as internal constructor for term aarch64_fpustore128.
pub fn constructor_aarch64_fpustore128<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::FpuStore128 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 2874.
    return v4;
}

// Generated as internal constructor for term aarch64_storep64.
pub fn constructor_aarch64_storep64<C: Context>(
    ctx: &mut C,
    arg0: &PairAMode,
    arg1: MemFlags,
    arg2: Reg,
    arg3: Reg,
) -> SideEffectNoResult {
    let v4 = MInst::StoreP64 {
        rt: arg2,
        rt2: arg3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    // Rule at src/isa/aarch64/inst.isle line 2877.
    return v5;
}

// Generated as internal constructor for term trap_if.
pub fn constructor_trap_if<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &TrapCode,
    arg2: &Cond,
) -> InstOutput {
    let v3 = C::cond_br_cond(ctx, arg2);
    let v4 = MInst::TrapIf {
        kind: v3,
        trap_code: arg1.clone(),
    };
    let v5 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v4 };
    let v6 = &constructor_with_flags_side_effect(ctx, arg0, &v5);
    let v7 = constructor_side_effect(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 2883.
    return v7;
}

// Generated as internal constructor for term imm.
pub fn constructor_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: &ImmExtend, arg2: u64) -> Reg {
    let v1 = C::integral_ty(ctx, arg0);
    if let Some(v2) = v1 {
        if let &ImmExtend::Zero = arg1 {
            let v5 = C::move_wide_const_from_u64(ctx, v2, arg2);
            if let Some(v6) = v5 {
                let v7 = &constructor_operand_size(ctx, v2);
                let v8 = constructor_movz(ctx, v6, v7);
                // Rule at src/isa/aarch64/inst.isle line 2911.
                return v8;
            }
            let v9 = C::ty_32_or_64(ctx, v2);
            if let Some(v10) = v9 {
                let v11 = C::move_wide_const_from_inverted_u64(ctx, v10, arg2);
                if let Some(v12) = v11 {
                    let v13 = &constructor_operand_size(ctx, v10);
                    let v14 = constructor_movn(ctx, v12, v13);
                    // Rule at src/isa/aarch64/inst.isle line 2914.
                    return v14;
                }
            }
            let v15 = C::imm_logic_from_u64(ctx, v2, arg2);
            if let Some(v16) = v15 {
                let v17 = C::zero_reg(ctx);
                let v18 = constructor_orr_imm(ctx, v2, v17, v16);
                // Rule at src/isa/aarch64/inst.isle line 2920.
                return v18;
            }
        }
        let v19 = C::load_constant64_full(ctx, v2, arg1, arg2);
        // Rule at src/isa/aarch64/inst.isle line 2928.
        return v19;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "imm", "src/isa/aarch64/inst.isle line 2907"
    )
}

// Generated as internal constructor for term put_in_reg_sext32.
pub fn constructor_put_in_reg_sext32<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    match v1 {
        I32 => {
            let v4 = C::put_in_reg(ctx, arg0);
            // Rule at src/isa/aarch64/inst.isle line 2939.
            return v4;
        }
        I64 => {
            let v4 = C::put_in_reg(ctx, arg0);
            // Rule at src/isa/aarch64/inst.isle line 2940.
            return v4;
        }
        _ => {}
    }
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v6 = C::ty_bits(ctx, v3);
        let v8 = constructor_extend(ctx, v4, true, v6, 0x20);
        // Rule at src/isa/aarch64/inst.isle line 2935.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_sext32", "src/isa/aarch64/inst.isle line 2934"
    )
}

// Generated as internal constructor for term put_in_reg_zext32.
pub fn constructor_put_in_reg_zext32<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    match v1 {
        I32 => {
            let v4 = C::put_in_reg(ctx, arg0);
            // Rule at src/isa/aarch64/inst.isle line 2948.
            return v4;
        }
        I64 => {
            let v4 = C::put_in_reg(ctx, arg0);
            // Rule at src/isa/aarch64/inst.isle line 2949.
            return v4;
        }
        _ => {}
    }
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v6 = C::ty_bits(ctx, v3);
        let v8 = constructor_extend(ctx, v4, false, v6, 0x20);
        // Rule at src/isa/aarch64/inst.isle line 2944.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_zext32", "src/isa/aarch64/inst.isle line 2943"
    )
}

// Generated as internal constructor for term put_in_reg_sext64.
pub fn constructor_put_in_reg_sext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v6 = C::ty_bits(ctx, v3);
        let v8 = constructor_extend(ctx, v4, true, v6, 0x40);
        // Rule at src/isa/aarch64/inst.isle line 2953.
        return v8;
    }
    if v1 == I64 {
        let v4 = C::put_in_reg(ctx, arg0);
        // Rule at src/isa/aarch64/inst.isle line 2957.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_sext64", "src/isa/aarch64/inst.isle line 2952"
    )
}

// Generated as internal constructor for term put_in_reg_zext64.
pub fn constructor_put_in_reg_zext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v6 = C::ty_bits(ctx, v3);
        let v8 = constructor_extend(ctx, v4, false, v6, 0x40);
        // Rule at src/isa/aarch64/inst.isle line 2961.
        return v8;
    }
    if v1 == I64 {
        let v4 = C::put_in_reg(ctx, arg0);
        // Rule at src/isa/aarch64/inst.isle line 2965.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_zext64", "src/isa/aarch64/inst.isle line 2960"
    )
}

// Generated as internal constructor for term trap_if_zero_divisor.
pub fn constructor_trap_if_zero_divisor<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v1 = C::cond_br_zero(ctx, arg0);
    let v2 = &C::trap_code_division_by_zero(ctx);
    let v3 = MInst::TrapIf {
        kind: v1,
        trap_code: v2.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    // Rule at src/isa/aarch64/inst.isle line 2970.
    return arg0;
}

// Generated as internal constructor for term size_from_ty.
pub fn constructor_size_from_ty<C: Context>(ctx: &mut C, arg0: Type) -> OperandSize {
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/aarch64/inst.isle line 2975.
        return OperandSize::Size32;
    }
    if arg0 == I64 {
        // Rule at src/isa/aarch64/inst.isle line 2976.
        return OperandSize::Size64;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "size_from_ty", "src/isa/aarch64/inst.isle line 2974"
    )
}

// Generated as internal constructor for term trap_if_div_overflow.
pub fn constructor_trap_if_div_overflow<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v4 = &constructor_operand_size(ctx, arg0);
    let v5 = C::writable_zero_reg(ctx);
    let v7 = C::u8_into_imm12(ctx, 0x1);
    let v8 = MInst::AluRRImm12 {
        alu_op: ALUOp::AddS,
        size: v4.clone(),
        rd: v5,
        rn: arg2,
        imm12: v7,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = &constructor_size_from_ty(ctx, arg0);
    let v11 = C::u8_into_uimm5(ctx, 0x1);
    let v13 = C::nzcv(ctx, false, false, false, false);
    let v15 = MInst::CCmpImm {
        size: v10.clone(),
        rn: arg1,
        imm: v11,
        nzcv: v13,
        cond: Cond::Eq,
    };
    let v16 = C::emit(ctx, &v15);
    let v18 = C::cond_br_cond(ctx, &Cond::Vs);
    let v19 = &C::trap_code_integer_overflow(ctx);
    let v20 = MInst::TrapIf {
        kind: v18,
        trap_code: v19.clone(),
    };
    let v21 = C::emit(ctx, &v20);
    // Rule at src/isa/aarch64/inst.isle line 2982.
    return arg1;
}

// Generated as internal constructor for term trap_if_overflow.
pub fn constructor_trap_if_overflow<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &TrapCode,
) -> Reg {
    let v3 = C::cond_br_cond(ctx, &Cond::Hs);
    let v4 = MInst::TrapIf {
        kind: v3,
        trap_code: arg1.clone(),
    };
    let v5 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v4 };
    let v6 = constructor_with_flags_reg(ctx, arg0, &v5);
    // Rule at src/isa/aarch64/inst.isle line 3001.
    return v6;
}

// Generated as internal constructor for term sink_atomic_load.
pub fn constructor_sink_atomic_load<C: Context>(ctx: &mut C, arg0: Inst) -> Reg {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::LoadNoOffset {
        opcode: ref v2,
        arg: v3,
        flags: v4,
    } = v1
    {
        if let &Opcode::AtomicLoad = v2 {
            let v5 = C::sink_inst(ctx, arg0);
            let v6 = C::put_in_reg(ctx, v3);
            // Rule at src/isa/aarch64/inst.isle line 3008.
            return v6;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_atomic_load", "src/isa/aarch64/inst.isle line 3007"
    )
}

// Generated as internal constructor for term alu_rs_imm_logic_commutative.
pub fn constructor_alu_rs_imm_logic_commutative<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Value,
    arg3: Value,
) -> Reg {
    let v15 = C::def_inst(ctx, arg2);
    if let Some(v16) = v15 {
        let v17 = &C::inst_data(ctx, v16);
        match v17 {
            &InstructionData::Binary {
                opcode: ref v38,
                args: ref v39,
            } => {
                if let &Opcode::Ishl = v38 {
                    let v40 = C::unpack_value_array_2(ctx, v39);
                    let v43 = C::def_inst(ctx, v40.1);
                    if let Some(v44) = v43 {
                        let v45 = &C::inst_data(ctx, v44);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v46,
                            imm: v47,
                        } = v45
                        {
                            if let &Opcode::Iconst = v46 {
                                let v48 = C::lshl_from_imm64(ctx, arg1, v47);
                                if let Some(v49) = v48 {
                                    let v22 = C::put_in_reg(ctx, arg3);
                                    let v50 = C::put_in_reg(ctx, v40.0);
                                    let v51 =
                                        constructor_alu_rrr_shift(ctx, arg0, arg1, v22, v50, v49);
                                    // Rule at src/isa/aarch64/inst.isle line 3033.
                                    return v51;
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryImm {
                opcode: ref v18,
                imm: v19,
            } => {
                if let &Opcode::Iconst = v18 {
                    let v20 = C::imm_logic_from_imm64(ctx, arg1, v19);
                    if let Some(v21) = v20 {
                        let v22 = C::put_in_reg(ctx, arg3);
                        let v23 = constructor_alu_rr_imm_logic(ctx, arg0, arg1, v22, v21);
                        // Rule at src/isa/aarch64/inst.isle line 3025.
                        return v23;
                    }
                }
            }
            _ => {}
        }
    }
    let v7 = C::def_inst(ctx, arg3);
    if let Some(v8) = v7 {
        let v9 = &C::inst_data(ctx, v8);
        match v9 {
            &InstructionData::Binary {
                opcode: ref v24,
                args: ref v25,
            } => {
                if let &Opcode::Ishl = v24 {
                    let v26 = C::unpack_value_array_2(ctx, v25);
                    let v29 = C::def_inst(ctx, v26.1);
                    if let Some(v30) = v29 {
                        let v31 = &C::inst_data(ctx, v30);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v32,
                            imm: v33,
                        } = v31
                        {
                            if let &Opcode::Iconst = v32 {
                                let v34 = C::lshl_from_imm64(ctx, arg1, v33);
                                if let Some(v35) = v34 {
                                    let v4 = C::put_in_reg(ctx, arg2);
                                    let v36 = C::put_in_reg(ctx, v26.0);
                                    let v37 =
                                        constructor_alu_rrr_shift(ctx, arg0, arg1, v4, v36, v35);
                                    // Rule at src/isa/aarch64/inst.isle line 3030.
                                    return v37;
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryImm {
                opcode: ref v10,
                imm: v11,
            } => {
                if let &Opcode::Iconst = v10 {
                    let v12 = C::imm_logic_from_imm64(ctx, arg1, v11);
                    if let Some(v13) = v12 {
                        let v4 = C::put_in_reg(ctx, arg2);
                        let v14 = constructor_alu_rr_imm_logic(ctx, arg0, arg1, v4, v13);
                        // Rule at src/isa/aarch64/inst.isle line 3022.
                        return v14;
                    }
                }
            }
            _ => {}
        }
    }
    let v4 = C::put_in_reg(ctx, arg2);
    let v5 = C::put_in_reg(ctx, arg3);
    let v6 = constructor_alu_rrr(ctx, arg0, arg1, v4, v5);
    // Rule at src/isa/aarch64/inst.isle line 3018.
    return v6;
}

// Generated as internal constructor for term alu_rs_imm_logic.
pub fn constructor_alu_rs_imm_logic<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Value,
    arg3: Value,
) -> Reg {
    let v7 = C::def_inst(ctx, arg3);
    if let Some(v8) = v7 {
        let v9 = &C::inst_data(ctx, v8);
        match v9 {
            &InstructionData::Binary {
                opcode: ref v15,
                args: ref v16,
            } => {
                if let &Opcode::Ishl = v15 {
                    let v17 = C::unpack_value_array_2(ctx, v16);
                    let v20 = C::def_inst(ctx, v17.1);
                    if let Some(v21) = v20 {
                        let v22 = &C::inst_data(ctx, v21);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v23,
                            imm: v24,
                        } = v22
                        {
                            if let &Opcode::Iconst = v23 {
                                let v25 = C::lshl_from_imm64(ctx, arg1, v24);
                                if let Some(v26) = v25 {
                                    let v4 = C::put_in_reg(ctx, arg2);
                                    let v27 = C::put_in_reg(ctx, v17.0);
                                    let v28 =
                                        constructor_alu_rrr_shift(ctx, arg0, arg1, v4, v27, v26);
                                    // Rule at src/isa/aarch64/inst.isle line 3045.
                                    return v28;
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryImm {
                opcode: ref v10,
                imm: v11,
            } => {
                if let &Opcode::Iconst = v10 {
                    let v12 = C::imm_logic_from_imm64(ctx, arg1, v11);
                    if let Some(v13) = v12 {
                        let v4 = C::put_in_reg(ctx, arg2);
                        let v14 = constructor_alu_rr_imm_logic(ctx, arg0, arg1, v4, v13);
                        // Rule at src/isa/aarch64/inst.isle line 3042.
                        return v14;
                    }
                }
            }
            _ => {}
        }
    }
    let v4 = C::put_in_reg(ctx, arg2);
    let v5 = C::put_in_reg(ctx, arg3);
    let v6 = constructor_alu_rrr(ctx, arg0, arg1, v4, v5);
    // Rule at src/isa/aarch64/inst.isle line 3040.
    return v6;
}

// Generated as internal constructor for term i128_alu_bitop.
pub fn constructor_i128_alu_bitop<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Value,
    arg3: Value,
) -> ValueRegs {
    let v4 = C::put_in_regs(ctx, arg2);
    let v6 = C::value_regs_get(ctx, v4, 0x0);
    let v8 = C::value_regs_get(ctx, v4, 0x1);
    let v9 = C::put_in_regs(ctx, arg3);
    let v10 = C::value_regs_get(ctx, v9, 0x0);
    let v11 = C::value_regs_get(ctx, v9, 0x1);
    let v12 = constructor_alu_rrr(ctx, arg0, arg1, v6, v10);
    let v13 = constructor_alu_rrr(ctx, arg0, arg1, v8, v11);
    let v14 = C::value_regs(ctx, v12, v13);
    // Rule at src/isa/aarch64/inst.isle line 3054.
    return v14;
}

// Generated as internal constructor for term ld1r.
pub fn constructor_ld1r<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &VectorSize,
    arg2: MemFlags,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecLoadReplicate {
        rd: v4,
        rn: arg0,
        size: arg1.clone(),
        flags: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 3069.
    return v7;
}

// Generated as internal constructor for term load_ext_name.
pub fn constructor_load_ext_name<C: Context>(ctx: &mut C, arg0: BoxExternalName, arg1: i64) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::LoadExtName {
        rd: v3,
        name: arg0,
        offset: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 3076.
    return v6;
}

// Generated as internal constructor for term amode.
pub fn constructor_amode<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: i32) -> AMode {
    let v4 = C::def_inst(ctx, arg1);
    if let Some(v5) = v4 {
        let v6 = &C::inst_data(ctx, v5);
        if let &InstructionData::Binary {
            opcode: ref v7,
            args: ref v8,
        } = v6
        {
            if let &Opcode::Iadd = v7 {
                let v9 = C::unpack_value_array_2(ctx, v8);
                let v22 = C::def_inst(ctx, v9.0);
                if let Some(v23) = v22 {
                    let v24 = &C::inst_data(ctx, v23);
                    if let &InstructionData::UnaryImm {
                        opcode: ref v25,
                        imm: v26,
                    } = v24
                    {
                        if let &Opcode::Iconst = v25 {
                            let v27 = C::simm32(ctx, v26);
                            if let Some(v28) = v27 {
                                let v29 = C::s32_add_fallible(ctx, v28, arg2);
                                if let Some(v30) = v29 {
                                    let v31 =
                                        &constructor_amode_no_more_iconst(ctx, arg0, v9.1, v30);
                                    // Rule at src/isa/aarch64/inst.isle line 3101.
                                    return v31.clone();
                                }
                            }
                        }
                    }
                }
                let v12 = C::def_inst(ctx, v9.1);
                if let Some(v13) = v12 {
                    let v14 = &C::inst_data(ctx, v13);
                    if let &InstructionData::UnaryImm {
                        opcode: ref v15,
                        imm: v16,
                    } = v14
                    {
                        if let &Opcode::Iconst = v15 {
                            let v17 = C::simm32(ctx, v16);
                            if let Some(v18) = v17 {
                                let v19 = C::s32_add_fallible(ctx, v18, arg2);
                                if let Some(v20) = v19 {
                                    let v21 =
                                        &constructor_amode_no_more_iconst(ctx, arg0, v9.0, v20);
                                    // Rule at src/isa/aarch64/inst.isle line 3098.
                                    return v21.clone();
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    let v3 = &constructor_amode_no_more_iconst(ctx, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3096.
    return v3.clone();
}

// Generated as internal constructor for term amode_no_more_iconst.
pub fn constructor_amode_no_more_iconst<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: i32,
) -> AMode {
    let v16 = C::def_inst(ctx, arg1);
    if let Some(v17) = v16 {
        let v18 = &C::inst_data(ctx, v17);
        if let &InstructionData::Binary {
            opcode: ref v19,
            args: ref v20,
        } = v18
        {
            if let &Opcode::Iadd = v19 {
                let v21 = C::unpack_value_array_2(ctx, v20);
                let v39 = C::def_inst(ctx, v21.0);
                if let Some(v40) = v39 {
                    let v41 = &C::inst_data(ctx, v40);
                    if let &InstructionData::Binary {
                        opcode: ref v67,
                        args: ref v68,
                    } = v41
                    {
                        if let &Opcode::Ishl = v67 {
                            let v69 = C::unpack_value_array_2(ctx, v68);
                            let v72 = C::def_inst(ctx, v69.1);
                            if let Some(v73) = v72 {
                                let v74 = &C::inst_data(ctx, v73);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v75,
                                    imm: v76,
                                } = v74
                                {
                                    if let &Opcode::Iconst = v75 {
                                        let v61 = C::ty_bytes(ctx, arg0);
                                        let v62 = C::u16_as_u64(ctx, v61);
                                        let v77 = C::u64_from_imm64(ctx, v76);
                                        let v78 = C::u64_shl(ctx, 0x1, v77);
                                        let v79 = C::u64_eq(ctx, v62, v78);
                                        if v79 == true {
                                            let v45 = C::put_in_reg(ctx, v21.1);
                                            let v46 = constructor_amode_add(ctx, v45, arg2);
                                            let v80 = &constructor_amode_reg_scaled(
                                                ctx, v46, v69.0, arg0,
                                            );
                                            // Rule at src/isa/aarch64/inst.isle line 3148.
                                            return v80.clone();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                let v28 = C::def_inst(ctx, v21.1);
                if let Some(v29) = v28 {
                    let v30 = &C::inst_data(ctx, v29);
                    if let &InstructionData::Binary {
                        opcode: ref v50,
                        args: ref v51,
                    } = v30
                    {
                        if let &Opcode::Ishl = v50 {
                            let v52 = C::unpack_value_array_2(ctx, v51);
                            let v55 = C::def_inst(ctx, v52.1);
                            if let Some(v56) = v55 {
                                let v57 = &C::inst_data(ctx, v56);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v58,
                                    imm: v59,
                                } = v57
                                {
                                    if let &Opcode::Iconst = v58 {
                                        let v61 = C::ty_bytes(ctx, arg0);
                                        let v62 = C::u16_as_u64(ctx, v61);
                                        let v60 = C::u64_from_imm64(ctx, v59);
                                        let v64 = C::u64_shl(ctx, 0x1, v60);
                                        let v65 = C::u64_eq(ctx, v62, v64);
                                        if v65 == true {
                                            let v24 = C::put_in_reg(ctx, v21.0);
                                            let v25 = constructor_amode_add(ctx, v24, arg2);
                                            let v66 = &constructor_amode_reg_scaled(
                                                ctx, v25, v52.0, arg0,
                                            );
                                            // Rule at src/isa/aarch64/inst.isle line 3145.
                                            return v66.clone();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if let Some(v40) = v39 {
                    let v41 = &C::inst_data(ctx, v40);
                    if let &InstructionData::Unary {
                        opcode: ref v42,
                        arg: v43,
                    } = v41
                    {
                        match v42 {
                            &Opcode::Uextend => {
                                let v44 = C::value_type(ctx, v43);
                                if v44 == I32 {
                                    let v45 = C::put_in_reg(ctx, v21.1);
                                    let v46 = constructor_amode_add(ctx, v45, arg2);
                                    let v47 = C::put_in_reg(ctx, v43);
                                    let v48 = AMode::RegExtended {
                                        rn: v46,
                                        rm: v47,
                                        extendop: ExtendOp::UXTW,
                                    };
                                    // Rule at src/isa/aarch64/inst.isle line 3133.
                                    return v48;
                                }
                            }
                            &Opcode::Sextend => {
                                let v44 = C::value_type(ctx, v43);
                                if v44 == I32 {
                                    let v45 = C::put_in_reg(ctx, v21.1);
                                    let v46 = constructor_amode_add(ctx, v45, arg2);
                                    let v47 = C::put_in_reg(ctx, v43);
                                    let v49 = AMode::RegExtended {
                                        rn: v46,
                                        rm: v47,
                                        extendop: ExtendOp::SXTW,
                                    };
                                    // Rule at src/isa/aarch64/inst.isle line 3135.
                                    return v49;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                if let Some(v29) = v28 {
                    let v30 = &C::inst_data(ctx, v29);
                    if let &InstructionData::Unary {
                        opcode: ref v31,
                        arg: v32,
                    } = v30
                    {
                        match v31 {
                            &Opcode::Uextend => {
                                let v33 = C::value_type(ctx, v32);
                                if v33 == I32 {
                                    let v24 = C::put_in_reg(ctx, v21.0);
                                    let v25 = constructor_amode_add(ctx, v24, arg2);
                                    let v34 = C::put_in_reg(ctx, v32);
                                    let v36 = AMode::RegExtended {
                                        rn: v25,
                                        rm: v34,
                                        extendop: ExtendOp::UXTW,
                                    };
                                    // Rule at src/isa/aarch64/inst.isle line 3129.
                                    return v36;
                                }
                            }
                            &Opcode::Sextend => {
                                let v33 = C::value_type(ctx, v32);
                                if v33 == I32 {
                                    let v24 = C::put_in_reg(ctx, v21.0);
                                    let v25 = constructor_amode_add(ctx, v24, arg2);
                                    let v34 = C::put_in_reg(ctx, v32);
                                    let v38 = AMode::RegExtended {
                                        rn: v25,
                                        rm: v34,
                                        extendop: ExtendOp::SXTW,
                                    };
                                    // Rule at src/isa/aarch64/inst.isle line 3131.
                                    return v38;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                let v24 = C::put_in_reg(ctx, v21.0);
                let v25 = constructor_amode_add(ctx, v24, arg2);
                let v26 = C::put_in_reg(ctx, v21.1);
                let v27 = AMode::RegReg { rn: v25, rm: v26 };
                // Rule at src/isa/aarch64/inst.isle line 3127.
                return v27;
            }
        }
    }
    let v6 = C::i32_as_i64(ctx, arg2);
    let v13 = &C::uimm12_scaled_from_i64(ctx, v6, arg0);
    if let Some(v14) = v13 {
        let v3 = C::put_in_reg(ctx, arg1);
        let v15 = AMode::UnsignedOffset {
            rn: v3,
            uimm12: v14.clone(),
        };
        // Rule at src/isa/aarch64/inst.isle line 3116.
        return v15;
    }
    let v10 = &C::simm9_from_i64(ctx, v6);
    if let Some(v11) = v10 {
        let v3 = C::put_in_reg(ctx, arg1);
        let v12 = AMode::Unscaled {
            rn: v3,
            simm9: v11.clone(),
        };
        // Rule at src/isa/aarch64/inst.isle line 3113.
        return v12;
    }
    let v3 = C::put_in_reg(ctx, arg1);
    let v7 = C::i64_as_u64(ctx, v6);
    let v8 = constructor_imm(ctx, I64, &ImmExtend::Zero, v7);
    let v9 = AMode::RegReg { rn: v3, rm: v8 };
    // Rule at src/isa/aarch64/inst.isle line 3108.
    return v9;
}

// Generated as internal constructor for term amode_reg_scaled.
pub fn constructor_amode_reg_scaled<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Value,
    arg2: Type,
) -> AMode {
    let v5 = C::def_inst(ctx, arg1);
    if let Some(v6) = v5 {
        let v7 = &C::inst_data(ctx, v6);
        if let &InstructionData::Unary {
            opcode: ref v8,
            arg: v9,
        } = v7
        {
            match v8 {
                &Opcode::Uextend => {
                    let v10 = C::value_type(ctx, v9);
                    if v10 == I32 {
                        let v11 = C::put_in_reg(ctx, v9);
                        let v13 = AMode::RegScaledExtended {
                            rn: arg0,
                            rm: v11,
                            ty: arg2,
                            extendop: ExtendOp::UXTW,
                        };
                        // Rule at src/isa/aarch64/inst.isle line 3155.
                        return v13;
                    }
                }
                &Opcode::Sextend => {
                    let v10 = C::value_type(ctx, v9);
                    if v10 == I32 {
                        let v11 = C::put_in_reg(ctx, v9);
                        let v15 = AMode::RegScaledExtended {
                            rn: arg0,
                            rm: v11,
                            ty: arg2,
                            extendop: ExtendOp::SXTW,
                        };
                        // Rule at src/isa/aarch64/inst.isle line 3157.
                        return v15;
                    }
                }
                _ => {}
            }
        }
    }
    let v3 = C::put_in_reg(ctx, arg1);
    let v4 = AMode::RegScaled {
        rn: arg0,
        rm: v3,
        ty: arg2,
    };
    // Rule at src/isa/aarch64/inst.isle line 3153.
    return v4;
}

// Generated as internal constructor for term amode_add.
pub fn constructor_amode_add<C: Context>(ctx: &mut C, arg0: Reg, arg1: i32) -> Reg {
    if arg1 == 0x0 {
        // Rule at src/isa/aarch64/inst.isle line 3168.
        return arg0;
    }
    let v4 = C::i32_as_i64(ctx, arg1);
    let v5 = C::i64_as_u64(ctx, v4);
    let v8 = C::imm12_from_u64(ctx, v5);
    if let Some(v9) = v8 {
        let v10 = constructor_add_imm(ctx, I64, arg0, v9);
        // Rule at src/isa/aarch64/inst.isle line 3165.
        return v10;
    }
    let v6 = constructor_imm(ctx, I64, &ImmExtend::Zero, v5);
    let v7 = constructor_add(ctx, I64, arg0, v6);
    // Rule at src/isa/aarch64/inst.isle line 3163.
    return v7;
}

// Generated as internal constructor for term pair_amode.
pub fn constructor_pair_amode<C: Context>(ctx: &mut C, arg0: Value, arg1: i32) -> PairAMode {
    let v9 = C::i32_as_i64(ctx, arg1);
    let v10 = C::simm7_scaled_from_i64(ctx, v9, I64);
    if let Some(v11) = v10 {
        let v6 = C::put_in_reg(ctx, arg0);
        let v12 = PairAMode::SignedOffset {
            reg: v6,
            simm7: v11,
        };
        // Rule at src/isa/aarch64/inst.isle line 3180.
        return v12;
    }
    let v4 = C::simm7_scaled_from_i64(ctx, 0x0, I64);
    if let Some(v5) = v4 {
        let v6 = C::put_in_reg(ctx, arg0);
        let v7 = constructor_amode_add(ctx, v6, arg1);
        let v8 = PairAMode::SignedOffset { reg: v7, simm7: v5 };
        // Rule at src/isa/aarch64/inst.isle line 3175.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "pair_amode", "src/isa/aarch64/inst.isle line 3172"
    )
}

// Generated as internal constructor for term sink_load_into_addr.
pub fn constructor_sink_load_into_addr<C: Context>(ctx: &mut C, arg0: Type, arg1: Inst) -> Reg {
    let v2 = &C::inst_data(ctx, arg1);
    if let &InstructionData::Load {
        opcode: ref v3,
        arg: v4,
        flags: v5,
        offset: v6,
    } = v2
    {
        if let &Opcode::Load = v3 {
            let v8 = C::sink_inst(ctx, arg1);
            let v9 = C::put_in_reg(ctx, v4);
            let v7 = C::offset32(ctx, v6);
            let v10 = C::i32_as_i64(ctx, v7);
            let v11 = C::i64_as_u64(ctx, v10);
            let v12 = constructor_add_imm_to_addr(ctx, v9, v11);
            // Rule at src/isa/aarch64/inst.isle line 3195.
            return v12;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_load_into_addr", "src/isa/aarch64/inst.isle line 3194"
    )
}

// Generated as internal constructor for term add_imm_to_addr.
pub fn constructor_add_imm_to_addr<C: Context>(ctx: &mut C, arg0: Reg, arg1: u64) -> Reg {
    if arg1 == 0x0 {
        // Rule at src/isa/aarch64/inst.isle line 3200.
        return arg0;
    }
    let v2 = C::imm12_from_u64(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = constructor_add_imm(ctx, I64, arg0, v3);
        // Rule at src/isa/aarch64/inst.isle line 3201.
        return v5;
    }
    let v7 = constructor_imm(ctx, I64, &ImmExtend::Zero, arg1);
    let v8 = constructor_add(ctx, I64, arg0, v7);
    // Rule at src/isa/aarch64/inst.isle line 3202.
    return v8;
}

// Generated as internal constructor for term constant_f32.
pub fn constructor_constant_f32<C: Context>(ctx: &mut C, arg0: u32) -> Reg {
    if arg0 == 0x0 {
        let v2 = C::asimd_mov_mod_imm_zero(ctx, &ScalarSize::Size32);
        let v5 = constructor_vec_dup_imm(ctx, v2, false, &VectorSize::Size32x2);
        // Rule at src/isa/aarch64/inst.isle line 3210.
        return v5;
    }
    let v6 = C::u32_as_u64(ctx, arg0);
    let v7 = C::asimd_fp_mod_imm_from_u64(ctx, v6, &ScalarSize::Size32);
    if let Some(v8) = v7 {
        let v9 = constructor_fpu_move_fp_imm(ctx, v8, &ScalarSize::Size32);
        // Rule at src/isa/aarch64/inst.isle line 3214.
        return v9;
    }
    let v12 = constructor_imm(ctx, I32, &ImmExtend::Zero, v6);
    let v13 = constructor_mov_to_fpu(ctx, v12, &ScalarSize::Size32);
    // Rule at src/isa/aarch64/inst.isle line 3217.
    return v13;
}

// Generated as internal constructor for term constant_f64.
pub fn constructor_constant_f64<C: Context>(ctx: &mut C, arg0: u64) -> Reg {
    if arg0 == 0x0 {
        let v2 = C::asimd_mov_mod_imm_zero(ctx, &ScalarSize::Size32);
        let v5 = constructor_vec_dup_imm(ctx, v2, false, &VectorSize::Size32x2);
        // Rule at src/isa/aarch64/inst.isle line 3228.
        return v5;
    }
    let v7 = C::asimd_fp_mod_imm_from_u64(ctx, arg0, &ScalarSize::Size64);
    if let Some(v8) = v7 {
        let v9 = constructor_fpu_move_fp_imm(ctx, v8, &ScalarSize::Size64);
        // Rule at src/isa/aarch64/inst.isle line 3232.
        return v9;
    }
    let v10 = C::u64_as_u32(ctx, arg0);
    if let Some(v11) = v10 {
        let v12 = constructor_constant_f32(ctx, v11);
        // Rule at src/isa/aarch64/inst.isle line 3235.
        return v12;
    }
    let v13 = C::u64_low32_bits_unset(ctx, arg0);
    if let Some(v14) = v13 {
        let v17 = constructor_imm(ctx, I64, &ImmExtend::Zero, v14);
        let v18 = constructor_mov_to_fpu(ctx, v17, &ScalarSize::Size64);
        // Rule at src/isa/aarch64/inst.isle line 3237.
        return v18;
    }
    let v19 = C::emit_u64_le_const(ctx, arg0);
    let v20 = AMode::Const { addr: v19 };
    let v21 = C::mem_flags_trusted(ctx);
    let v22 = constructor_fpu_load64(ctx, &v20, v21);
    // Rule at src/isa/aarch64/inst.isle line 3239.
    return v22;
}

// Generated as internal constructor for term constant_f128.
pub fn constructor_constant_f128<C: Context>(ctx: &mut C, arg0: u128) -> Reg {
    if arg0 == 0x0 {
        let v2 = C::asimd_mov_mod_imm_zero(ctx, &ScalarSize::Size8);
        let v5 = constructor_vec_dup_imm(ctx, v2, false, &VectorSize::Size8x16);
        // Rule at src/isa/aarch64/inst.isle line 3248.
        return v5;
    }
    let v6 = C::u128_as_u64(ctx, arg0);
    if let Some(v7) = v6 {
        let v8 = constructor_constant_f64(ctx, v7);
        // Rule at src/isa/aarch64/inst.isle line 3254.
        return v8;
    }
    let v9 = C::u128_replicated_u64(ctx, arg0);
    if let Some(v10) = v9 {
        let v12 = constructor_splat_const(ctx, v10, &VectorSize::Size64x2);
        // Rule at src/isa/aarch64/inst.isle line 3258.
        return v12;
    }
    let v13 = C::emit_u128_le_const(ctx, arg0);
    let v14 = AMode::Const { addr: v13 };
    let v15 = C::mem_flags_trusted(ctx);
    let v16 = constructor_fpu_load128(ctx, &v14, v15);
    // Rule at src/isa/aarch64/inst.isle line 3262.
    return v16;
}

// Generated as internal constructor for term splat_const.
pub fn constructor_splat_const<C: Context>(ctx: &mut C, arg0: u64, arg1: &VectorSize) -> Reg {
    match arg1 {
        &VectorSize::Size16x4 => {
            let v12 = C::u16_replicated_u8(ctx, arg0);
            if let Some(v13) = v12 {
                let v14 = C::u8_as_u64(ctx, v13);
                let v18 = constructor_splat_const(ctx, v14, &VectorSize::Size8x8);
                // Rule at src/isa/aarch64/inst.isle line 3281.
                return v18;
            }
        }
        &VectorSize::Size16x8 => {
            let v12 = C::u16_replicated_u8(ctx, arg0);
            if let Some(v13) = v12 {
                let v14 = C::u8_as_u64(ctx, v13);
                let v16 = constructor_splat_const(ctx, v14, &VectorSize::Size8x16);
                // Rule at src/isa/aarch64/inst.isle line 3279.
                return v16;
            }
        }
        &VectorSize::Size32x2 => {
            let v6 = C::u32_replicated_u16(ctx, arg0);
            if let Some(v7) = v6 {
                let v11 = constructor_splat_const(ctx, v7, &VectorSize::Size16x4);
                // Rule at src/isa/aarch64/inst.isle line 3277.
                return v11;
            }
        }
        &VectorSize::Size32x4 => {
            let v6 = C::u32_replicated_u16(ctx, arg0);
            if let Some(v7) = v6 {
                let v9 = constructor_splat_const(ctx, v7, &VectorSize::Size16x8);
                // Rule at src/isa/aarch64/inst.isle line 3275.
                return v9;
            }
        }
        &VectorSize::Size64x2 => {
            let v1 = C::u64_replicated_u32(ctx, arg0);
            if let Some(v2) = v1 {
                let v5 = constructor_splat_const(ctx, v2, &VectorSize::Size32x4);
                // Rule at src/isa/aarch64/inst.isle line 3273.
                return v5;
            }
        }
        _ => {}
    }
    let v19 = &constructor_vector_lane_size(ctx, arg1);
    let v20 = C::asimd_mov_mod_imm_from_u64(ctx, arg0, v19);
    if let Some(v21) = v20 {
        let v23 = constructor_vec_dup_imm(ctx, v21, false, arg1);
        // Rule at src/isa/aarch64/inst.isle line 3286.
        return v23;
    }
    let v24 = C::u64_not(ctx, arg0);
    let v25 = C::asimd_mov_mod_imm_from_u64(ctx, v24, v19);
    if let Some(v26) = v25 {
        let v28 = constructor_vec_dup_imm(ctx, v26, true, arg1);
        // Rule at src/isa/aarch64/inst.isle line 3289.
        return v28;
    }
    match arg1 {
        &VectorSize::Size32x2 => {
            let v30 = C::u64_shl(ctx, arg0, 0x20);
            let v31 = C::u64_or(ctx, arg0, v30);
            let v33 = C::asimd_mov_mod_imm_from_u64(ctx, v31, &ScalarSize::Size64);
            if let Some(v34) = v33 {
                let v36 = constructor_vec_dup_imm(ctx, v34, false, &VectorSize::Size64x2);
                let v37 = constructor_fpu_extend(ctx, v36, &ScalarSize::Size64);
                // Rule at src/isa/aarch64/inst.isle line 3298.
                return v37;
            }
        }
        &VectorSize::Size32x4 => {
            let v30 = C::u64_shl(ctx, arg0, 0x20);
            let v31 = C::u64_or(ctx, arg0, v30);
            let v33 = C::asimd_mov_mod_imm_from_u64(ctx, v31, &ScalarSize::Size64);
            if let Some(v34) = v33 {
                let v36 = constructor_vec_dup_imm(ctx, v34, false, &VectorSize::Size64x2);
                // Rule at src/isa/aarch64/inst.isle line 3295.
                return v36;
            }
        }
        _ => {}
    }
    let v38 = C::asimd_fp_mod_imm_from_u64(ctx, arg0, v19);
    if let Some(v39) = v38 {
        let v40 = constructor_vec_dup_fp_imm(ctx, v39, arg1);
        // Rule at src/isa/aarch64/inst.isle line 3302.
        return v40;
    }
    let v43 = constructor_imm(ctx, I64, &ImmExtend::Zero, arg0);
    let v44 = constructor_vec_dup(ctx, v43, arg1);
    // Rule at src/isa/aarch64/inst.isle line 3308.
    return v44;
}

// Generated as internal constructor for term float_cmp_zero.
pub fn constructor_float_cmp_zero<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v3 = &C::float_cc_cmp_zero_to_vec_misc_op(ctx, arg0);
    let v4 = constructor_vec_misc(ctx, v3, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3343.
    return v4;
}

// Generated as internal constructor for term float_cmp_zero_swap.
pub fn constructor_float_cmp_zero_swap<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v3 = &C::float_cc_cmp_zero_to_vec_misc_op_swap(ctx, arg0);
    let v4 = constructor_vec_misc(ctx, v3, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3348.
    return v4;
}

// Generated as internal constructor for term fcmeq0.
pub fn constructor_fcmeq0<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Fcmeq0, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 3353.
    return v3;
}

// Generated as internal constructor for term int_cmp_zero.
pub fn constructor_int_cmp_zero<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v3 = &C::int_cc_cmp_zero_to_vec_misc_op(ctx, arg0);
    let v4 = constructor_vec_misc(ctx, v3, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3373.
    return v4;
}

// Generated as internal constructor for term int_cmp_zero_swap.
pub fn constructor_int_cmp_zero_swap<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v3 = &C::int_cc_cmp_zero_to_vec_misc_op_swap(ctx, arg0);
    let v4 = constructor_vec_misc(ctx, v3, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3378.
    return v4;
}

// Generated as internal constructor for term cmeq0.
pub fn constructor_cmeq0<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Cmeq0, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 3383.
    return v3;
}

// Generated as internal constructor for term lse_atomic_rmw.
pub fn constructor_lse_atomic_rmw<C: Context>(
    ctx: &mut C,
    arg0: &AtomicRMWOp,
    arg1: Value,
    arg2: Reg,
    arg3: Type,
    arg4: MemFlags,
) -> Reg {
    let v5 = C::put_in_reg(ctx, arg1);
    let v6 = C::temp_writable_reg(ctx, arg3);
    let v7 = MInst::AtomicRMW {
        op: arg0.clone(),
        rs: arg2,
        rt: v6,
        rn: v5,
        ty: arg3,
        flags: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 3388.
    return v9;
}

// Generated as internal constructor for term lse_atomic_cas.
pub fn constructor_lse_atomic_cas<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
    arg4: MemFlags,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg3);
    let v6 = MInst::AtomicCAS {
        rd: v5,
        rs: arg1,
        rt: arg2,
        rn: arg0,
        ty: arg3,
        flags: arg4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 3398.
    return v8;
}

// Generated as internal constructor for term atomic_rmw_loop.
pub fn constructor_atomic_rmw_loop<C: Context>(
    ctx: &mut C,
    arg0: &AtomicRMWLoopOp,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
    arg4: MemFlags,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = C::temp_writable_reg(ctx, I64);
    let v8 = C::temp_writable_reg(ctx, I64);
    let v9 = MInst::AtomicRMWLoop {
        ty: arg3,
        op: arg0.clone(),
        flags: arg4,
        addr: arg1,
        operand: arg2,
        oldval: v6,
        scratch1: v7,
        scratch2: v8,
    };
    let v10 = C::emit(ctx, &v9);
    let v11 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 3412.
    return v11;
}

// Generated as internal constructor for term atomic_cas_loop.
pub fn constructor_atomic_cas_loop<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
    arg4: MemFlags,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = C::temp_writable_reg(ctx, I64);
    let v8 = MInst::AtomicCASLoop {
        ty: arg3,
        flags: arg4,
        addr: arg0,
        expected: arg1,
        replacement: arg2,
        oldval: v6,
        scratch: v7,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 3426.
    return v10;
}

// Generated as internal constructor for term mov_from_preg.
pub fn constructor_mov_from_preg<C: Context>(ctx: &mut C, arg0: PReg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::MovFromPReg { rd: v2, rm: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/aarch64/inst.isle line 3434.
    return v5;
}

// Generated as internal constructor for term mov_to_preg.
pub fn constructor_mov_to_preg<C: Context>(
    ctx: &mut C,
    arg0: PReg,
    arg1: Reg,
) -> SideEffectNoResult {
    let v2 = MInst::MovToPReg { rd: arg0, rm: arg1 };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/aarch64/inst.isle line 3440.
    return v3;
}

// Generated as internal constructor for term aarch64_sp.
pub fn constructor_aarch64_sp<C: Context>(ctx: &mut C) -> Reg {
    let v0 = C::preg_sp(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    // Rule at src/isa/aarch64/inst.isle line 3456.
    return v1;
}

// Generated as internal constructor for term aarch64_fp.
pub fn constructor_aarch64_fp<C: Context>(ctx: &mut C) -> Reg {
    let v0 = C::preg_fp(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    // Rule at src/isa/aarch64/inst.isle line 3460.
    return v1;
}

// Generated as internal constructor for term aarch64_link.
pub fn constructor_aarch64_link<C: Context>(ctx: &mut C) -> Reg {
    let v0 = C::preserve_frame_pointers(ctx);
    if let Some(v1) = v0 {
        let v2 = C::sign_return_address_disabled(ctx);
        if let Some(v3) = v2 {
            let v5 = C::temp_writable_reg(ctx, I64);
            let v7 = AMode::FPOffset { off: 0x8, ty: I64 };
            let v8 = C::mem_flags_trusted(ctx);
            let v9 = MInst::ULoad64 {
                rd: v5,
                mem: v7,
                flags: v8,
            };
            let v10 = C::emit(ctx, &v9);
            let v11 = C::writable_reg_to_reg(ctx, v5);
            // Rule at src/isa/aarch64/inst.isle line 3464.
            return v11;
        }
        let v12 = C::writable_link_reg(ctx);
        let v7 = AMode::FPOffset { off: 0x8, ty: I64 };
        let v8 = C::mem_flags_trusted(ctx);
        let v13 = MInst::ULoad64 {
            rd: v12,
            mem: v7,
            flags: v8,
        };
        let v14 = C::emit(ctx, &v13);
        let v16 = C::emit(ctx, &MInst::Xpaclri);
        let v17 = C::preg_link(ctx);
        let v18 = constructor_mov_from_preg(ctx, v17);
        // Rule at src/isa/aarch64/inst.isle line 3480.
        return v18;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aarch64_link", "src/isa/aarch64/inst.isle line 3463"
    )
}

// Generated as internal constructor for term max_shift.
pub fn constructor_max_shift<C: Context>(ctx: &mut C, arg0: Type) -> u8 {
    match arg0 {
        F32 => {
            // Rule at src/isa/aarch64/inst.isle line 3496.
            return 0x1F;
        }
        F64 => {
            // Rule at src/isa/aarch64/inst.isle line 3495.
            return 0x3F;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "max_shift", "src/isa/aarch64/inst.isle line 3494"
    )
}

// Generated as internal constructor for term fcopy_sign.
pub fn constructor_fcopy_sign<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: Type) -> Reg {
    let v3 = C::ty_scalar_float(ctx, arg2);
    if let Some(v4) = v3 {
        let v6 = C::temp_writable_reg(ctx, F64);
        let v8 = constructor_max_shift(ctx, v4);
        let v7 = C::ty_bits(ctx, v4);
        let v9 = &C::fpu_op_ri_ushr(ctx, v7, v8);
        let v10 = constructor_fpu_rri(ctx, v9, arg1);
        let v11 = constructor_max_shift(ctx, v4);
        let v12 = &C::fpu_op_ri_sli(ctx, v7, v11);
        let v13 = MInst::FpuRRIMod {
            fpu_op: v12.clone(),
            rd: v6,
            ri: arg0,
            rn: v10,
        };
        let v14 = C::emit(ctx, &v13);
        let v15 = C::writable_reg_to_reg(ctx, v6);
        // Rule at src/isa/aarch64/inst.isle line 3501.
        return v15;
    }
    let v16 = C::multi_lane(ctx, arg2);
    if let Some(v17) = v16 {
        let v21 = C::temp_writable_reg(ctx, I8X16);
        let v22 = C::lane_type(ctx, arg2);
        let v23 = constructor_max_shift(ctx, v22);
        let v24 = &constructor_vector_size(ctx, arg2);
        let v25 = constructor_ushr_vec_imm(ctx, arg1, v23, v24);
        let v27 = &constructor_vector_size(ctx, arg2);
        let v28 = constructor_max_shift(ctx, v22);
        let v29 = MInst::VecShiftImmMod {
            op: VecShiftImmModOp::Sli,
            rd: v21,
            ri: arg0,
            rn: v25,
            size: v27.clone(),
            imm: v28,
        };
        let v30 = C::emit(ctx, &v29);
        let v31 = C::writable_reg_to_reg(ctx, v21);
        // Rule at src/isa/aarch64/inst.isle line 3506.
        return v31;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcopy_sign", "src/isa/aarch64/inst.isle line 3500"
    )
}

// Generated as internal constructor for term fpu_to_int_nan_check.
pub fn constructor_fpu_to_int_nan_check<C: Context>(
    ctx: &mut C,
    arg0: &ScalarSize,
    arg1: Reg,
) -> Reg {
    let v2 = &constructor_fpu_cmp(ctx, arg0, arg1, arg1);
    let v4 = C::cond_br_cond(ctx, &Cond::Vs);
    let v5 = &C::trap_code_bad_conversion_to_integer(ctx);
    let v6 = MInst::TrapIf {
        kind: v4,
        trap_code: v5.clone(),
    };
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v6,
        result: arg1,
    };
    let v8 = constructor_with_flags(ctx, v2, &v7);
    let v10 = C::value_regs_get(ctx, v8, 0x0);
    // Rule at src/isa/aarch64/inst.isle line 3515.
    return v10;
}

// Generated as internal constructor for term fpu_to_int_underflow_check.
pub fn constructor_fpu_to_int_underflow_check<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Type,
    arg2: Type,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    match arg0 {
        true => {
            match arg1 {
                F32 => {
                    let v3 = C::fits_in_16(ctx, arg2);
                    if let Some(v4) = v3 {
                        let v8 = &constructor_fpu_cmp(ctx, &ScalarSize::Size32, arg3, arg4);
                        let v10 = C::cond_br_cond(ctx, &Cond::Le);
                        let v11 = &C::trap_code_integer_overflow(ctx);
                        let v12 = MInst::TrapIf {
                            kind: v10,
                            trap_code: v11.clone(),
                        };
                        let v13 = ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: v12,
                            result: arg3,
                        };
                        let v14 = constructor_with_flags(ctx, v8, &v13);
                        let v16 = C::value_regs_get(ctx, v14, 0x0);
                        // Rule at src/isa/aarch64/inst.isle line 3528.
                        return v16;
                    }
                }
                F64 => {
                    let v17 = C::fits_in_32(ctx, arg2);
                    if let Some(v18) = v17 {
                        let v20 = &constructor_fpu_cmp(ctx, &ScalarSize::Size64, arg3, arg4);
                        let v10 = C::cond_br_cond(ctx, &Cond::Le);
                        let v11 = &C::trap_code_integer_overflow(ctx);
                        let v12 = MInst::TrapIf {
                            kind: v10,
                            trap_code: v11.clone(),
                        };
                        let v13 = ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: v12,
                            result: arg3,
                        };
                        let v21 = constructor_with_flags(ctx, v20, &v13);
                        let v22 = C::value_regs_get(ctx, v21, 0x0);
                        // Rule at src/isa/aarch64/inst.isle line 3536.
                        return v22;
                    }
                }
                _ => {}
            }
            let v23 = &constructor_scalar_size(ctx, arg1);
            let v24 = &constructor_fpu_cmp(ctx, v23, arg3, arg4);
            let v26 = C::cond_br_cond(ctx, &Cond::Lt);
            let v11 = &C::trap_code_integer_overflow(ctx);
            let v27 = MInst::TrapIf {
                kind: v26,
                trap_code: v11.clone(),
            };
            let v28 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v27,
                result: arg3,
            };
            let v29 = constructor_with_flags(ctx, v24, &v28);
            let v30 = C::value_regs_get(ctx, v29, 0x0);
            // Rule at src/isa/aarch64/inst.isle line 3544.
            return v30;
        }
        false => {
            let v23 = &constructor_scalar_size(ctx, arg1);
            let v24 = &constructor_fpu_cmp(ctx, v23, arg3, arg4);
            let v31 = C::cond_br_cond(ctx, &Cond::Le);
            let v11 = &C::trap_code_integer_overflow(ctx);
            let v32 = MInst::TrapIf {
                kind: v31,
                trap_code: v11.clone(),
            };
            let v33 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v32,
                result: arg3,
            };
            let v34 = constructor_with_flags(ctx, v24, &v33);
            let v35 = C::value_regs_get(ctx, v34, 0x0);
            // Rule at src/isa/aarch64/inst.isle line 3552.
            return v35;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpu_to_int_underflow_check", "src/isa/aarch64/inst.isle line 3527"
    )
}

// Generated as internal constructor for term fpu_to_int_overflow_check.
pub fn constructor_fpu_to_int_overflow_check<C: Context>(
    ctx: &mut C,
    arg0: &ScalarSize,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_fpu_cmp(ctx, arg0, arg1, arg2);
    let v5 = C::cond_br_cond(ctx, &Cond::Ge);
    let v6 = &C::trap_code_integer_overflow(ctx);
    let v7 = MInst::TrapIf {
        kind: v5,
        trap_code: v6.clone(),
    };
    let v8 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v7,
        result: arg1,
    };
    let v9 = constructor_with_flags(ctx, v3, &v8);
    let v11 = C::value_regs_get(ctx, v9, 0x0);
    // Rule at src/isa/aarch64/inst.isle line 3562.
    return v11;
}

// Generated as internal constructor for term fpu_to_int_cvt.
pub fn constructor_fpu_to_int_cvt<C: Context>(
    ctx: &mut C,
    arg0: &FpuToIntOp,
    arg1: Reg,
    arg2: bool,
    arg3: Type,
    arg4: Type,
) -> Reg {
    let v5 = &constructor_scalar_size(ctx, arg3);
    let v8 = constructor_fpu_to_int_nan_check(ctx, v5, arg1);
    let v6 = C::ty_bits(ctx, arg3);
    let v7 = C::ty_bits(ctx, arg4);
    let v9 = C::min_fp_value(ctx, arg2, v6, v7);
    let v10 = constructor_fpu_to_int_underflow_check(ctx, arg2, arg3, arg4, v8, v9);
    let v11 = C::max_fp_value(ctx, arg2, v6, v7);
    let v12 = constructor_fpu_to_int_overflow_check(ctx, v5, v10, v11);
    let v13 = constructor_fpu_to_int(ctx, arg0, v12);
    // Rule at src/isa/aarch64/inst.isle line 3578.
    return v13;
}

// Generated as internal constructor for term fpu_to_int_cvt_sat.
pub fn constructor_fpu_to_int_cvt_sat<C: Context>(
    ctx: &mut C,
    arg0: &FpuToIntOp,
    arg1: Reg,
    arg2: bool,
    arg3: Type,
) -> Reg {
    match arg3 {
        I32 => {
            let v4 = constructor_fpu_to_int(ctx, arg0, arg1);
            // Rule at src/isa/aarch64/inst.isle line 3597.
            return v4;
        }
        I64 => {
            let v4 = constructor_fpu_to_int(ctx, arg0, arg1);
            // Rule at src/isa/aarch64/inst.isle line 3595.
            return v4;
        }
        _ => {}
    }
    match arg2 {
        true => {
            let v5 = C::fits_in_16(ctx, arg3);
            if let Some(v6) = v5 {
                let v4 = constructor_fpu_to_int(ctx, arg0, arg1);
                let v15 = constructor_signed_max(ctx, v6);
                let v16 = constructor_signed_min(ctx, v6);
                let v17 = &constructor_operand_size(ctx, v6);
                let v18 = &constructor_cmp(ctx, v17, v4, v15);
                let v20 = &constructor_csel(ctx, &Cond::Gt, v15, v4);
                let v21 = constructor_with_flags_reg(ctx, v18, v20);
                let v22 = &constructor_operand_size(ctx, v6);
                let v23 = &constructor_cmp(ctx, v22, v21, v16);
                let v25 = &constructor_csel(ctx, &Cond::Lt, v16, v21);
                let v26 = constructor_with_flags_reg(ctx, v23, v25);
                // Rule at src/isa/aarch64/inst.isle line 3605.
                return v26;
            }
        }
        false => {
            let v5 = C::fits_in_16(ctx, arg3);
            if let Some(v6) = v5 {
                let v4 = constructor_fpu_to_int(ctx, arg0, arg1);
                let v8 = C::ty_mask(ctx, v6);
                let v9 = constructor_imm(ctx, v6, &ImmExtend::Zero, v8);
                let v11 = &constructor_cmp(ctx, &OperandSize::Size32, v4, v9);
                let v13 = &constructor_csel(ctx, &Cond::Hi, v9, v4);
                let v14 = constructor_with_flags_reg(ctx, v11, v13);
                // Rule at src/isa/aarch64/inst.isle line 3599.
                return v14;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpu_to_int_cvt_sat", "src/isa/aarch64/inst.isle line 3594"
    )
}

// Generated as internal constructor for term signed_min.
pub fn constructor_signed_min<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    match arg0 {
        I8 => {
            let v4 = constructor_imm(ctx, I8, &ImmExtend::Sign, 0x80);
            // Rule at src/isa/aarch64/inst.isle line 3618.
            return v4;
        }
        I16 => {
            let v7 = constructor_imm(ctx, I16, &ImmExtend::Sign, 0x8000);
            // Rule at src/isa/aarch64/inst.isle line 3619.
            return v7;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "signed_min", "src/isa/aarch64/inst.isle line 3617"
    )
}

// Generated as internal constructor for term signed_max.
pub fn constructor_signed_max<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    match arg0 {
        I8 => {
            let v4 = constructor_imm(ctx, I8, &ImmExtend::Sign, 0x7F);
            // Rule at src/isa/aarch64/inst.isle line 3622.
            return v4;
        }
        I16 => {
            let v7 = constructor_imm(ctx, I16, &ImmExtend::Sign, 0x7FFF);
            // Rule at src/isa/aarch64/inst.isle line 3623.
            return v7;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "signed_max", "src/isa/aarch64/inst.isle line 3621"
    )
}

// Generated as internal constructor for term fpu_to_int.
pub fn constructor_fpu_to_int<C: Context>(ctx: &mut C, arg0: &FpuToIntOp, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::FpuToInt {
        op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 3626.
    return v6;
}

// Generated as internal constructor for term int_to_fpu.
pub fn constructor_int_to_fpu<C: Context>(ctx: &mut C, arg0: &IntToFpuOp, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::IntToFpu {
        op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 3634.
    return v6;
}

// Generated as internal constructor for term write_pinned_reg.
pub fn constructor_write_pinned_reg<C: Context>(ctx: &mut C, arg0: Reg) -> SideEffectNoResult {
    let v1 = C::preg_pinned(ctx);
    let v2 = &constructor_mov_to_preg(ctx, v1, arg0);
    // Rule at src/isa/aarch64/inst.isle line 3650.
    return v2.clone();
}

// Generated as internal constructor for term compute_stack_addr.
pub fn constructor_compute_stack_addr<C: Context>(
    ctx: &mut C,
    arg0: StackSlot,
    arg1: Offset32,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = &C::abi_stackslot_addr(ctx, v3, arg0, arg1);
    let v5 = C::emit(ctx, v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 3656.
    return v6;
}

// Generated as internal constructor for term vec_cmp_vc.
pub fn constructor_vec_cmp_vc<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Fcmeq, arg0, arg0, arg2);
    let v5 = constructor_vec_rrr(ctx, &VecALUOp::Fcmeq, arg1, arg1, arg2);
    let v7 = constructor_vec_rrr(ctx, &VecALUOp::And, v4, v5, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3664.
    return v7;
}

// Generated as internal constructor for term vec_cmp.
pub fn constructor_vec_cmp<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Type,
    arg3: &Cond,
) -> Reg {
    match arg3 {
        &Cond::Eq => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v23 = constructor_vec_rrr(ctx, &VecALUOp::Cmeq, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3708.
                return v23;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v12 = constructor_vec_rrr(ctx, &VecALUOp::Fcmeq, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3686.
                return v12;
            }
        }
        &Cond::Ne => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v23 = constructor_vec_rrr(ctx, &VecALUOp::Cmeq, arg0, arg1, v6);
                let v9 = &constructor_vector_size(ctx, arg2);
                let v24 = constructor_vec_misc(ctx, &VecMisc2::Not, v23, v9);
                // Rule at src/isa/aarch64/inst.isle line 3711.
                return v24;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v12 = constructor_vec_rrr(ctx, &VecALUOp::Fcmeq, arg0, arg1, v6);
                let v9 = &constructor_vector_size(ctx, arg2);
                let v13 = constructor_vec_misc(ctx, &VecMisc2::Not, v12, v9);
                // Rule at src/isa/aarch64/inst.isle line 3689.
                return v13;
            }
        }
        &Cond::Hs => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v30 = constructor_vec_rrr(ctx, &VecALUOp::Cmhs, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3721.
                return v30;
            }
        }
        &Cond::Lo => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v36 = constructor_vec_rrr(ctx, &VecALUOp::Cmhi, arg1, arg0, v6);
                // Rule at src/isa/aarch64/inst.isle line 3737.
                return v36;
            }
        }
        &Cond::Mi => {
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v18 = constructor_vec_rrr(ctx, &VecALUOp::Fcmgt, arg1, arg0, v6);
                // Rule at src/isa/aarch64/inst.isle line 3700.
                return v18;
            }
        }
        &Cond::Vs => {
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v7 = constructor_vec_cmp_vc(ctx, arg0, arg1, v6);
                let v9 = &constructor_vector_size(ctx, arg2);
                let v10 = constructor_vec_misc(ctx, &VecMisc2::Not, v7, v9);
                // Rule at src/isa/aarch64/inst.isle line 3676.
                return v10;
            }
        }
        &Cond::Vc => {
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v7 = constructor_vec_cmp_vc(ctx, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3673.
                return v7;
            }
        }
        &Cond::Hi => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v32 = constructor_vec_rrr(ctx, &VecALUOp::Cmhi, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3724.
                return v32;
            }
        }
        &Cond::Ls => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v35 = constructor_vec_rrr(ctx, &VecALUOp::Cmhs, arg1, arg0, v6);
                // Rule at src/isa/aarch64/inst.isle line 3734.
                return v35;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v19 = constructor_vec_rrr(ctx, &VecALUOp::Fcmge, arg1, arg0, v6);
                // Rule at src/isa/aarch64/inst.isle line 3703.
                return v19;
            }
        }
        &Cond::Ge => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v26 = constructor_vec_rrr(ctx, &VecALUOp::Cmge, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3715.
                return v26;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v15 = constructor_vec_rrr(ctx, &VecALUOp::Fcmge, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3693.
                return v15;
            }
        }
        &Cond::Lt => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v34 = constructor_vec_rrr(ctx, &VecALUOp::Cmgt, arg1, arg0, v6);
                // Rule at src/isa/aarch64/inst.isle line 3731.
                return v34;
            }
        }
        &Cond::Gt => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v28 = constructor_vec_rrr(ctx, &VecALUOp::Cmgt, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3718.
                return v28;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v17 = constructor_vec_rrr(ctx, &VecALUOp::Fcmgt, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3696.
                return v17;
            }
        }
        &Cond::Le => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v33 = constructor_vec_rrr(ctx, &VecALUOp::Cmge, arg1, arg0, v6);
                // Rule at src/isa/aarch64/inst.isle line 3728.
                return v33;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmp", "src/isa/aarch64/inst.isle line 3670"
    )
}

// Generated as internal constructor for term vanytrue.
pub fn constructor_vanytrue<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> ProducesFlags {
    let v2 = C::ty_vec128(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = constructor_vec_rrr(ctx, &VecALUOp::Umaxp, arg0, arg0, &VectorSize::Size32x4);
        let v9 = constructor_mov_from_vec(ctx, v6, 0x0, &ScalarSize::Size64);
        let v11 = C::u8_into_imm12(ctx, 0x0);
        let v12 = &constructor_cmp_imm(ctx, &OperandSize::Size64, v9, v11);
        // Rule at src/isa/aarch64/inst.isle line 3749.
        return v12.clone();
    }
    let v13 = C::ty_vec64_ctor(ctx, arg1);
    if let Some(v14) = v13 {
        let v15 = constructor_mov_from_vec(ctx, arg0, 0x0, &ScalarSize::Size64);
        let v16 = C::u8_into_imm12(ctx, 0x0);
        let v17 = &constructor_cmp_imm(ctx, &OperandSize::Size64, v15, v16);
        // Rule at src/isa/aarch64/inst.isle line 3753.
        return v17.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vanytrue", "src/isa/aarch64/inst.isle line 3748"
    )
}

// Generated as internal constructor for term elf_tls_get_addr.
pub fn constructor_elf_tls_get_addr<C: Context>(ctx: &mut C, arg0: ExternalName) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::ElfTlsGetAddr {
        symbol: arg0,
        rd: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/aarch64/inst.isle line 3762.
    return v5;
}

// Generated as internal constructor for term macho_tls_get_addr.
pub fn constructor_macho_tls_get_addr<C: Context>(ctx: &mut C, arg0: ExternalName) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::MachOTlsGetAddr {
        symbol: arg0,
        rd: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/aarch64/inst.isle line 3768.
    return v5;
}

// Generated as internal constructor for term flags_and_cc.
pub fn constructor_flags_and_cc<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &IntCC,
) -> FlagsAndCC {
    let v2 = FlagsAndCC::FlagsAndCC {
        flags: arg0.clone(),
        cc: arg1.clone(),
    };
    // Rule at src/isa/aarch64/inst.isle line 3779.
    return v2;
}

// Generated as internal constructor for term flags_and_cc_to_bool.
pub fn constructor_flags_and_cc_to_bool<C: Context>(ctx: &mut C, arg0: &FlagsAndCC) -> ValueRegs {
    if let &FlagsAndCC::FlagsAndCC {
        flags: ref v1,
        cc: ref v2,
    } = arg0
    {
        let v3 = &C::cond_code(ctx, v2);
        let v4 = &constructor_materialize_bool_result(ctx, v3);
        let v5 = constructor_with_flags(ctx, v1, v4);
        // Rule at src/isa/aarch64/inst.isle line 3783.
        return v5;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "flags_and_cc_to_bool", "src/isa/aarch64/inst.isle line 3782"
    )
}

// Generated as internal constructor for term flags_and_cc_flags.
pub fn constructor_flags_and_cc_flags<C: Context>(ctx: &mut C, arg0: &FlagsAndCC) -> ProducesFlags {
    if let &FlagsAndCC::FlagsAndCC {
        flags: ref v1,
        cc: ref v2,
    } = arg0
    {
        // Rule at src/isa/aarch64/inst.isle line 3788.
        return v1.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "flags_and_cc_flags", "src/isa/aarch64/inst.isle line 3787"
    )
}

// Generated as internal constructor for term flags_and_cc_cc.
pub fn constructor_flags_and_cc_cc<C: Context>(ctx: &mut C, arg0: &FlagsAndCC) -> IntCC {
    if let &FlagsAndCC::FlagsAndCC {
        flags: ref v1,
        cc: ref v2,
    } = arg0
    {
        // Rule at src/isa/aarch64/inst.isle line 3792.
        return v2.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "flags_and_cc_cc", "src/isa/aarch64/inst.isle line 3791"
    )
}

// Generated as internal constructor for term lower_icmp.
pub fn constructor_lower_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
    arg3: Type,
) -> FlagsAndCC {
    let v4 = C::fits_in_16(ctx, arg3);
    if let Some(v5) = v4 {
        let v6 = &C::signed_cond_code(ctx, arg0);
        if let Some(v7) = v6 {
            let v8 = constructor_put_in_reg_sext32(ctx, arg1);
            let v9 = &constructor_operand_size(ctx, v5);
            let v10 = C::put_in_reg(ctx, arg2);
            let v12 = &constructor_lower_extend_op(ctx, v5, &ArgumentExtension::Sext);
            let v13 = &constructor_cmp_extend(ctx, v9, v8, v10, v12);
            let v14 = &constructor_flags_and_cc(ctx, v13, arg0);
            // Rule at src/isa/aarch64/inst.isle line 3826.
            return v14.clone();
        }
    }
    if arg3 == I128 {
        match arg0 {
            &IntCC::Equal => {
                let v37 = &constructor_lower_icmp_i128_eq_ne(ctx, arg1, arg2);
                let v39 = &constructor_flags_and_cc(ctx, v37, &IntCC::Equal);
                // Rule at src/isa/aarch64/inst.isle line 3892.
                return v39.clone();
            }
            &IntCC::NotEqual => {
                let v37 = &constructor_lower_icmp_i128_eq_ne(ctx, arg1, arg2);
                let v41 = &constructor_flags_and_cc(ctx, v37, &IntCC::NotEqual);
                // Rule at src/isa/aarch64/inst.isle line 3894.
                return v41.clone();
            }
            _ => {}
        }
    }
    if let Some(v5) = v4 {
        let v15 = C::def_inst(ctx, arg2);
        if let Some(v16) = v15 {
            let v17 = &C::inst_data(ctx, v16);
            if let &InstructionData::UnaryImm {
                opcode: ref v18,
                imm: v19,
            } = v17
            {
                if let &Opcode::Iconst = v18 {
                    let v20 = C::u64_from_imm64(ctx, v19);
                    let v21 = C::imm12_from_u64(ctx, v20);
                    if let Some(v22) = v21 {
                        let v23 = constructor_put_in_reg_zext32(ctx, arg1);
                        let v9 = &constructor_operand_size(ctx, v5);
                        let v24 = &constructor_cmp_imm(ctx, v9, v23, v22);
                        let v25 = &constructor_flags_and_cc(ctx, v24, arg0);
                        // Rule at src/isa/aarch64/inst.isle line 3830.
                        return v25.clone();
                    }
                }
            }
        }
        let v23 = constructor_put_in_reg_zext32(ctx, arg1);
        let v9 = &constructor_operand_size(ctx, v5);
        let v10 = C::put_in_reg(ctx, arg2);
        let v27 = &constructor_lower_extend_op(ctx, v5, &ArgumentExtension::Uext);
        let v28 = &constructor_cmp_extend(ctx, v9, v23, v10, v27);
        let v29 = &constructor_flags_and_cc(ctx, v28, arg0);
        // Rule at src/isa/aarch64/inst.isle line 3833.
        return v29.clone();
    }
    let v30 = C::ty_int_ref_scalar_64(ctx, arg3);
    if let Some(v31) = v30 {
        let v15 = C::def_inst(ctx, arg2);
        if let Some(v16) = v15 {
            let v17 = &C::inst_data(ctx, v16);
            if let &InstructionData::UnaryImm {
                opcode: ref v18,
                imm: v19,
            } = v17
            {
                if let &Opcode::Iconst = v18 {
                    let v20 = C::u64_from_imm64(ctx, v19);
                    let v32 = &constructor_lower_icmp_const(ctx, arg0, arg1, v20, arg3);
                    // Rule at src/isa/aarch64/inst.isle line 3836.
                    return v32.clone();
                }
            }
        }
        let v33 = &constructor_operand_size(ctx, arg3);
        let v34 = C::put_in_reg(ctx, arg1);
        let v10 = C::put_in_reg(ctx, arg2);
        let v35 = &constructor_cmp(ctx, v33, v34, v10);
        let v36 = &constructor_flags_and_cc(ctx, v35, arg0);
        // Rule at src/isa/aarch64/inst.isle line 3839.
        return v36.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_icmp", "src/isa/aarch64/inst.isle line 3797"
    )
}

// Generated as internal constructor for term lower_icmp_into_reg.
pub fn constructor_lower_icmp_into_reg<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
    arg3: Type,
    arg4: Type,
) -> ValueRegs {
    let v4 = C::multi_lane(ctx, arg3);
    if let Some(v5) = v4 {
        let v9 = &C::cond_code(ctx, arg0);
        let v10 = C::put_in_reg(ctx, arg1);
        let v11 = C::put_in_reg(ctx, arg2);
        let v12 = constructor_vec_cmp(ctx, v10, v11, arg3, v9);
        let v13 = C::value_reg(ctx, v12);
        // Rule at src/isa/aarch64/inst.isle line 3807.
        return v13;
    }
    if arg3 == I128 {
        if arg4 == I8 {
            match arg0 {
                &IntCC::Equal => {
                    let v9 = &C::cond_code(ctx, arg0);
                    let v19 = &constructor_lower_icmp(ctx, arg0, arg1, arg2, I128);
                    let v20 = constructor_flags_and_cc_to_bool(ctx, v19);
                    // Rule at src/isa/aarch64/inst.isle line 3869.
                    return v20;
                }
                &IntCC::NotEqual => {
                    let v9 = &C::cond_code(ctx, arg0);
                    let v19 = &constructor_lower_icmp(ctx, arg0, arg1, arg2, I128);
                    let v20 = constructor_flags_and_cc_to_bool(ctx, v19);
                    // Rule at src/isa/aarch64/inst.isle line 3873.
                    return v20;
                }
                _ => {}
            }
            let v21 = &C::intcc_unsigned(ctx, arg0);
            let v22 = &C::cond_code(ctx, v21);
            let v23 = &C::cond_code(ctx, arg0);
            let v24 = C::put_in_regs(ctx, arg1);
            let v25 = C::put_in_regs(ctx, arg2);
            let v27 = C::value_regs_get(ctx, v24, 0x0);
            let v29 = C::value_regs_get(ctx, v24, 0x1);
            let v30 = C::value_regs_get(ctx, v25, 0x0);
            let v31 = C::value_regs_get(ctx, v25, 0x1);
            let v33 = &constructor_cmp(ctx, &OperandSize::Size64, v27, v30);
            let v34 = &constructor_materialize_bool_result(ctx, v22);
            let v35 = constructor_with_flags_reg(ctx, v33, v34);
            let v36 = &constructor_cmp(ctx, &OperandSize::Size64, v29, v31);
            let v37 = &constructor_lower_icmp_i128_consumer(ctx, v23, v35);
            let v38 = constructor_with_flags(ctx, v36, v37);
            // Rule at src/isa/aarch64/inst.isle line 3902.
            return v38;
        }
    }
    let v14 = C::ty_int_ref_scalar_64(ctx, arg3);
    if let Some(v15) = v14 {
        let v9 = &C::cond_code(ctx, arg0);
        let v16 = &constructor_lower_icmp(ctx, arg0, arg1, arg2, arg3);
        let v17 = constructor_flags_and_cc_to_bool(ctx, v16);
        // Rule at src/isa/aarch64/inst.isle line 3821.
        return v17;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_icmp_into_reg", "src/isa/aarch64/inst.isle line 3798"
    )
}

// Generated as internal constructor for term lower_icmp_into_flags.
pub fn constructor_lower_icmp_into_flags<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
    arg3: Type,
) -> FlagsAndCC {
    match arg0 {
        &IntCC::SignedGreaterThan => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v25 = C::zero_reg(ctx);
                let v26 = &constructor_cmp(ctx, &OperandSize::Size64, v9, v25);
                let v27 = &constructor_flags_and_cc(ctx, v26, arg0);
                // Rule at src/isa/aarch64/inst.isle line 3997.
                return v27.clone();
            }
        }
        &IntCC::SignedGreaterThanOrEqual => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v13 = constructor_imm(ctx, I64, &ImmExtend::Sign, 0x1);
                let v15 = &constructor_cmp(ctx, &OperandSize::Size64, v9, v13);
                let v16 = &constructor_flags_and_cc(ctx, v15, arg0);
                // Rule at src/isa/aarch64/inst.isle line 3976.
                return v16.clone();
            }
        }
        &IntCC::SignedLessThan => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v25 = C::zero_reg(ctx);
                let v28 = &constructor_cmp(ctx, &OperandSize::Size64, v25, v9);
                let v29 = &constructor_flags_and_cc(ctx, v28, arg0);
                // Rule at src/isa/aarch64/inst.isle line 4005.
                return v29.clone();
            }
        }
        &IntCC::SignedLessThanOrEqual => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v13 = constructor_imm(ctx, I64, &ImmExtend::Sign, 0x1);
                let v21 = &constructor_cmp(ctx, &OperandSize::Size64, v13, v9);
                let v22 = &constructor_flags_and_cc(ctx, v21, arg0);
                // Rule at src/isa/aarch64/inst.isle line 3986.
                return v22.clone();
            }
        }
        &IntCC::UnsignedGreaterThan => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v25 = C::zero_reg(ctx);
                let v26 = &constructor_cmp(ctx, &OperandSize::Size64, v9, v25);
                let v27 = &constructor_flags_and_cc(ctx, v26, arg0);
                // Rule at src/isa/aarch64/inst.isle line 4001.
                return v27.clone();
            }
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v18 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x1);
                let v19 = &constructor_cmp(ctx, &OperandSize::Size64, v9, v18);
                let v20 = &constructor_flags_and_cc(ctx, v19, arg0);
                // Rule at src/isa/aarch64/inst.isle line 3981.
                return v20.clone();
            }
        }
        &IntCC::UnsignedLessThan => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v25 = C::zero_reg(ctx);
                let v28 = &constructor_cmp(ctx, &OperandSize::Size64, v25, v9);
                let v29 = &constructor_flags_and_cc(ctx, v28, arg0);
                // Rule at src/isa/aarch64/inst.isle line 4009.
                return v29.clone();
            }
        }
        &IntCC::UnsignedLessThanOrEqual => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v18 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x1);
                let v23 = &constructor_cmp(ctx, &OperandSize::Size64, v18, v9);
                let v24 = &constructor_flags_and_cc(ctx, v23, arg0);
                // Rule at src/isa/aarch64/inst.isle line 3991.
                return v24.clone();
            }
        }
        _ => {}
    }
    let v4 = &constructor_lower_icmp(ctx, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 3803.
    return v4.clone();
}

// Generated as internal constructor for term lower_icmp_const.
pub fn constructor_lower_icmp_const<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: u64,
    arg3: Type,
) -> FlagsAndCC {
    let v4 = C::ty_int_ref_scalar_64(ctx, arg3);
    if let Some(v5) = v4 {
        match arg0 {
            &IntCC::SignedGreaterThanOrEqual => {
                let v6 = C::u64_is_odd(ctx, arg2);
                if v6 == true {
                    let v8 = C::u64_sub(ctx, arg2, 0x1);
                    let v9 = C::imm12_from_u64(ctx, v8);
                    if let Some(v10) = v9 {
                        let v11 = &constructor_operand_size(ctx, arg3);
                        let v12 = C::put_in_reg(ctx, arg1);
                        let v13 = &constructor_cmp_imm(ctx, v11, v12, v10);
                        let v17 = &constructor_flags_and_cc(ctx, v13, &IntCC::SignedGreaterThan);
                        // Rule at src/isa/aarch64/inst.isle line 3854.
                        return v17.clone();
                    }
                }
            }
            &IntCC::UnsignedGreaterThanOrEqual => {
                let v6 = C::u64_is_odd(ctx, arg2);
                if v6 == true {
                    let v8 = C::u64_sub(ctx, arg2, 0x1);
                    let v9 = C::imm12_from_u64(ctx, v8);
                    if let Some(v10) = v9 {
                        let v11 = &constructor_operand_size(ctx, arg3);
                        let v12 = C::put_in_reg(ctx, arg1);
                        let v13 = &constructor_cmp_imm(ctx, v11, v12, v10);
                        let v15 = &constructor_flags_and_cc(ctx, v13, &IntCC::UnsignedGreaterThan);
                        // Rule at src/isa/aarch64/inst.isle line 3849.
                        return v15.clone();
                    }
                }
            }
            _ => {}
        }
        let v18 = C::imm12_from_u64(ctx, arg2);
        if let Some(v19) = v18 {
            let v11 = &constructor_operand_size(ctx, arg3);
            let v12 = C::put_in_reg(ctx, arg1);
            let v20 = &constructor_cmp_imm(ctx, v11, v12, v19);
            let v21 = &constructor_flags_and_cc(ctx, v20, arg0);
            // Rule at src/isa/aarch64/inst.isle line 3860.
            return v21.clone();
        }
        let v11 = &constructor_operand_size(ctx, arg3);
        let v12 = C::put_in_reg(ctx, arg1);
        let v23 = constructor_imm(ctx, arg3, &ImmExtend::Zero, arg2);
        let v24 = &constructor_cmp(ctx, v11, v12, v23);
        let v25 = &constructor_flags_and_cc(ctx, v24, arg0);
        // Rule at src/isa/aarch64/inst.isle line 3863.
        return v25.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_icmp_const", "src/isa/aarch64/inst.isle line 3800"
    )
}

// Generated as internal constructor for term lower_extend_op.
pub fn constructor_lower_extend_op<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ArgumentExtension,
) -> ExtendOp {
    match arg0 {
        I8 => {
            match arg1 {
                &ArgumentExtension::Uext => {
                    // Rule at src/isa/aarch64/inst.isle line 3817.
                    return ExtendOp::UXTB;
                }
                &ArgumentExtension::Sext => {
                    // Rule at src/isa/aarch64/inst.isle line 3815.
                    return ExtendOp::SXTB;
                }
                _ => {}
            }
        }
        I16 => {
            match arg1 {
                &ArgumentExtension::Uext => {
                    // Rule at src/isa/aarch64/inst.isle line 3818.
                    return ExtendOp::UXTH;
                }
                &ArgumentExtension::Sext => {
                    // Rule at src/isa/aarch64/inst.isle line 3816.
                    return ExtendOp::SXTH;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_extend_op", "src/isa/aarch64/inst.isle line 3814"
    )
}

// Generated as internal constructor for term lower_icmp_i128_eq_ne.
pub fn constructor_lower_icmp_i128_eq_ne<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
) -> ProducesFlags {
    let v2 = C::put_in_regs(ctx, arg0);
    let v3 = C::put_in_regs(ctx, arg1);
    let v5 = C::value_regs_get(ctx, v2, 0x0);
    let v7 = C::value_regs_get(ctx, v2, 0x1);
    let v8 = C::value_regs_get(ctx, v3, 0x0);
    let v9 = C::value_regs_get(ctx, v3, 0x1);
    let v11 = &constructor_cmp(ctx, &OperandSize::Size64, v5, v8);
    let v13 = C::nzcv(ctx, false, false, false, false);
    let v15 = &constructor_ccmp(ctx, &OperandSize::Size64, v7, v9, v13, &Cond::Eq, v11);
    // Rule at src/isa/aarch64/inst.isle line 3881.
    return v15.clone();
}

// Generated as internal constructor for term lower_icmp_i128_consumer.
pub fn constructor_lower_icmp_i128_consumer<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: Reg,
) -> ConsumesFlags {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = C::temp_writable_reg(ctx, I64);
    let v9 = C::writable_reg_to_reg(ctx, v4);
    let v10 = C::value_reg(ctx, v9);
    let v5 = MInst::CSet {
        rd: v3,
        cond: arg0.clone(),
    };
    let v7 = C::writable_reg_to_reg(ctx, v3);
    let v8 = MInst::CSel {
        rd: v4,
        cond: Cond::Eq,
        rn: arg1,
        rm: v7,
    };
    let v11 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
        inst1: v5,
        inst2: v8,
        result: v10,
    };
    // Rule at src/isa/aarch64/inst.isle line 3917.
    return v11;
}

// Generated as internal constructor for term lower_bmask.
pub fn constructor_lower_bmask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: ValueRegs,
) -> ValueRegs {
    let v27 = C::fits_in_16(ctx, arg1);
    if let Some(v28) = v27 {
        let v30 = C::ty_mask(ctx, v28);
        let v31 = C::imm_logic_from_u64(ctx, I32, v30);
        if let Some(v32) = v31 {
            let v17 = C::value_regs_get(ctx, arg2, 0x0);
            let v33 = constructor_and_imm(ctx, I32, v17, v32);
            let v34 = C::value_reg(ctx, v33);
            let v35 = constructor_lower_bmask(ctx, arg0, I32, v34);
            // Rule at src/isa/aarch64/inst.isle line 3966.
            return v35;
        }
    }
    if arg0 == I128 {
        let v24 = constructor_lower_bmask(ctx, I64, arg1, arg2);
        let v25 = C::value_regs_get(ctx, v24, 0x0);
        let v26 = C::value_regs(ctx, v25, v25);
        // Rule at src/isa/aarch64/inst.isle line 3954.
        return v26;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        if arg1 == I128 {
            let v17 = C::value_regs_get(ctx, arg2, 0x0);
            let v19 = C::value_regs_get(ctx, arg2, 0x1);
            let v21 = constructor_orr(ctx, I64, v17, v19);
            let v22 = C::value_reg(ctx, v21);
            let v23 = constructor_lower_bmask(ctx, v2, I64, v22);
            // Rule at src/isa/aarch64/inst.isle line 3945.
            return v23;
        }
        let v4 = C::ty_32_or_64(ctx, arg1);
        if let Some(v5) = v4 {
            let v7 = &constructor_operand_size(ctx, v5);
            let v9 = C::value_regs_get(ctx, arg2, 0x0);
            let v11 = C::u8_into_imm12(ctx, 0x0);
            let v12 = &constructor_cmp_imm(ctx, v7, v9, v11);
            let v14 = &constructor_csetm(ctx, &Cond::Ne);
            let v15 = constructor_with_flags_reg(ctx, v12, v14);
            let v16 = C::value_reg(ctx, v15);
            // Rule at src/isa/aarch64/inst.isle line 3932.
            return v16;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bmask", "src/isa/aarch64/inst.isle line 3925"
    )
}

// Generated as internal constructor for term lower_select.
pub fn constructor_lower_select<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &Cond,
    arg2: Type,
    arg3: Value,
    arg4: Value,
) -> ValueRegs {
    if arg2 == I128 {
        let v21 = C::temp_writable_reg(ctx, I64);
        let v22 = C::temp_writable_reg(ctx, I64);
        let v23 = C::put_in_regs(ctx, arg3);
        let v24 = C::put_in_regs(ctx, arg4);
        let v26 = C::value_regs_get(ctx, v23, 0x0);
        let v28 = C::value_regs_get(ctx, v23, 0x1);
        let v29 = C::value_regs_get(ctx, v24, 0x0);
        let v30 = C::value_regs_get(ctx, v24, 0x1);
        let v33 = C::writable_reg_to_reg(ctx, v21);
        let v34 = C::writable_reg_to_reg(ctx, v22);
        let v35 = C::value_regs(ctx, v33, v34);
        let v31 = MInst::CSel {
            rd: v21,
            cond: arg1.clone(),
            rn: v26,
            rm: v29,
        };
        let v32 = MInst::CSel {
            rd: v22,
            cond: arg1.clone(),
            rn: v28,
            rm: v30,
        };
        let v36 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
            inst1: v31,
            inst2: v32,
            result: v35,
        };
        let v37 = constructor_with_flags(ctx, arg0, &v36);
        // Rule at src/isa/aarch64/inst.isle line 4023.
        return v37;
    }
    let v11 = C::ty_vec128(ctx, arg2);
    if let Some(v12) = v11 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v8 = C::put_in_reg(ctx, arg4);
        let v13 = &constructor_vec_csel(ctx, arg1, v7, v8);
        let v14 = constructor_with_flags(ctx, arg0, v13);
        // Rule at src/isa/aarch64/inst.isle line 4018.
        return v14;
    }
    let v3 = C::ty_scalar_float(ctx, arg2);
    if let Some(v4) = v3 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v8 = C::put_in_reg(ctx, arg4);
        let v9 = &constructor_fpu_csel(ctx, v4, arg1, v7, v8);
        let v10 = constructor_with_flags(ctx, arg0, v9);
        // Rule at src/isa/aarch64/inst.isle line 4016.
        return v10;
    }
    let v38 = C::ty_int_ref_scalar_64(ctx, arg2);
    if let Some(v39) = v38 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v8 = C::put_in_reg(ctx, arg4);
        let v40 = &constructor_csel(ctx, arg1, v7, v8);
        let v41 = constructor_with_flags(ctx, arg0, v40);
        // Rule at src/isa/aarch64/inst.isle line 4037.
        return v41;
    }
    let v15 = C::ty_vec64_ctor(ctx, arg2);
    if let Some(v16) = v15 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v8 = C::put_in_reg(ctx, arg4);
        let v18 = &constructor_fpu_csel(ctx, F64, arg1, v7, v8);
        let v19 = constructor_with_flags(ctx, arg0, v18);
        // Rule at src/isa/aarch64/inst.isle line 4020.
        return v19;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_select", "src/isa/aarch64/inst.isle line 4015"
    )
}

// Generated as internal constructor for term aarch64_jump.
pub fn constructor_aarch64_jump<C: Context>(ctx: &mut C, arg0: BranchTarget) -> SideEffectNoResult {
    let v1 = MInst::Jump { dest: arg0 };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/aarch64/inst.isle line 4043.
    return v2;
}

// Generated as internal constructor for term jt_sequence.
pub fn constructor_jt_sequence<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: MachLabel,
    arg2: &BoxVecMachLabel,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = MInst::JTSequence {
        default: arg1,
        targets: arg2.clone(),
        ridx: arg0,
        rtmp1: v4,
        rtmp2: v5,
    };
    let v7 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v6 };
    // Rule at src/isa/aarch64/inst.isle line 4065.
    return v7;
}

// Generated as internal constructor for term cond_br.
pub fn constructor_cond_br<C: Context>(
    ctx: &mut C,
    arg0: BranchTarget,
    arg1: BranchTarget,
    arg2: CondBrKind,
) -> ConsumesFlags {
    let v3 = MInst::CondBr {
        taken: arg0,
        not_taken: arg1,
        kind: arg2,
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 4073.
    return v4;
}

// Generated as internal constructor for term mov_to_nzcv.
pub fn constructor_mov_to_nzcv<C: Context>(ctx: &mut C, arg0: Reg) -> ProducesFlags {
    let v1 = MInst::MovToNZCV { rn: arg0 };
    let v2 = ProducesFlags::ProducesFlagsSideEffect { inst: v1 };
    // Rule at src/isa/aarch64/inst.isle line 4079.
    return v2;
}

// Generated as internal constructor for term emit_island.
pub fn constructor_emit_island<C: Context>(ctx: &mut C, arg0: CodeOffset) -> SideEffectNoResult {
    let v1 = MInst::EmitIsland { needed_space: arg0 };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/aarch64/inst.isle line 4085.
    return v2;
}

// Generated as internal constructor for term br_table_impl.
pub fn constructor_br_table_impl<C: Context>(
    ctx: &mut C,
    arg0: u64,
    arg1: Reg,
    arg2: MachLabel,
    arg3: &BoxVecMachLabel,
) -> Unit {
    let v1 = C::imm12_from_u64(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = &constructor_cmp_imm(ctx, &OperandSize::Size32, arg1, v2);
        let v8 = &constructor_jt_sequence(ctx, arg1, arg2, arg3);
        let v9 = &constructor_with_flags_side_effect(ctx, v7, v8);
        let v10 = constructor_emit_side_effect(ctx, v9);
        // Rule at src/isa/aarch64/inst.isle line 4091.
        return v10;
    }
    let v13 = constructor_imm(ctx, I64, &ImmExtend::Zero, arg0);
    let v14 = &constructor_cmp(ctx, &OperandSize::Size32, arg1, v13);
    let v15 = &constructor_jt_sequence(ctx, arg1, arg2, arg3);
    let v16 = &constructor_with_flags_side_effect(ctx, v14, v15);
    let v17 = constructor_emit_side_effect(ctx, v16);
    // Rule at src/isa/aarch64/inst.isle line 4095.
    return v17;
}

// Generated as internal constructor for term vec_uzp1.
pub fn constructor_vec_uzp1<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Uzp1, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 4103.
    return v4;
}

// Generated as internal constructor for term vec_uzp2.
pub fn constructor_vec_uzp2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Uzp2, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 4107.
    return v4;
}

// Generated as internal constructor for term vec_zip1.
pub fn constructor_vec_zip1<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Zip1, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 4111.
    return v4;
}

// Generated as internal constructor for term vec_zip2.
pub fn constructor_vec_zip2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Zip2, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 4115.
    return v4;
}

// Generated as internal constructor for term vec_trn1.
pub fn constructor_vec_trn1<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Trn1, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 4119.
    return v4;
}

// Generated as internal constructor for term vec_trn2.
pub fn constructor_vec_trn2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Trn2, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 4123.
    return v4;
}

// Generated as internal constructor for term vec_dup_fp_imm.
pub fn constructor_vec_dup_fp_imm<C: Context>(
    ctx: &mut C,
    arg0: ASIMDFPModImm,
    arg1: &VectorSize,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::VecDupFPImm {
        rd: v3,
        imm: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 4139.
    return v6;
}

// Generated as internal constructor for term fpu_load64.
pub fn constructor_fpu_load64<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::FpuLoad64 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 4146.
    return v6;
}

// Generated as internal constructor for term fpu_load128.
pub fn constructor_fpu_load128<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::FpuLoad128 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 4153.
    return v6;
}

// Generated as internal constructor for term fpu_move_128.
pub fn constructor_fpu_move_128<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I8X16);
    let v3 = MInst::FpuMove128 { rd: v2, rn: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/aarch64/inst_neon.isle line 4.
    return v5;
}

// Generated as internal constructor for term lower.
pub fn constructor_lower<C: Context>(ctx: &mut C, arg0: Inst) -> Option<InstOutput> {
    let v4 = &C::inst_data(ctx, arg0);
    match v4 {
        &InstructionData::AtomicCas {
            opcode: ref v1371,
            args: ref v1372,
            flags: v1373,
        } => {
            if let &Opcode::AtomicCas = v1371 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v1277 = C::valid_atomic_transaction(ctx, v3);
                    if let Some(v1278) = v1277 {
                        let v1298 = C::use_lse(ctx, arg0);
                        if let Some(v1299) = v1298 {
                            let v1374 = C::unpack_value_array_3(ctx, v1372);
                            let v1378 = C::put_in_reg(ctx, v1374.0);
                            let v1379 = C::put_in_reg(ctx, v1374.1);
                            let v1380 = C::put_in_reg(ctx, v1374.2);
                            let v1381 =
                                constructor_lse_atomic_cas(ctx, v1378, v1379, v1380, v1278, v1373);
                            let v1382 = constructor_output_reg(ctx, v1381);
                            // Rule at src/isa/aarch64/lower.isle line 2107.
                            return Some(v1382);
                        }
                        let v1374 = C::unpack_value_array_3(ctx, v1372);
                        let v1378 = C::put_in_reg(ctx, v1374.0);
                        let v1379 = C::put_in_reg(ctx, v1374.1);
                        let v1380 = C::put_in_reg(ctx, v1374.2);
                        let v1383 =
                            constructor_atomic_cas_loop(ctx, v1378, v1379, v1380, v1278, v1373);
                        let v1384 = constructor_output_reg(ctx, v1383);
                        // Rule at src/isa/aarch64/lower.isle line 2112.
                        return Some(v1384);
                    }
                }
            }
        }
        &InstructionData::AtomicRmw {
            opcode: ref v1300,
            args: ref v1301,
            flags: v1302,
            op: ref v1303,
        } => {
            if let &Opcode::AtomicRmw = v1300 {
                match v1303 {
                    &AtomicRmwOp::Add => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1277 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1278) = v1277 {
                                let v1298 = C::use_lse(ctx, arg0);
                                if let Some(v1299) = v1298 {
                                    let v1304 = C::unpack_value_array_2(ctx, v1301);
                                    let v1308 = C::put_in_reg(ctx, v1304.1);
                                    let v1309 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Add,
                                        v1304.0,
                                        v1308,
                                        v1278,
                                        v1302,
                                    );
                                    let v1310 = constructor_output_reg(ctx, v1309);
                                    // Rule at src/isa/aarch64/lower.isle line 2034.
                                    return Some(v1310);
                                }
                                let v1304 = C::unpack_value_array_2(ctx, v1301);
                                let v1338 = C::put_in_reg(ctx, v1304.0);
                                let v1329 = C::put_in_reg(ctx, v1304.1);
                                let v1339 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Add,
                                    v1338,
                                    v1329,
                                    v1278,
                                    v1302,
                                );
                                let v1340 = constructor_output_reg(ctx, v1339);
                                // Rule at src/isa/aarch64/lower.isle line 2072.
                                return Some(v1340);
                            }
                        }
                    }
                    &AtomicRmwOp::And => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1277 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1278) = v1277 {
                                let v1298 = C::use_lse(ctx, arg0);
                                if let Some(v1299) = v1298 {
                                    let v1304 = C::unpack_value_array_2(ctx, v1301);
                                    let v1308 = C::put_in_reg(ctx, v1304.1);
                                    let v1203 = C::zero_reg(ctx);
                                    let v1334 = constructor_eon(ctx, v1278, v1308, v1203);
                                    let v1335 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Clr,
                                        v1304.0,
                                        v1334,
                                        v1278,
                                        v1302,
                                    );
                                    let v1336 = constructor_output_reg(ctx, v1335);
                                    // Rule at src/isa/aarch64/lower.isle line 2066.
                                    return Some(v1336);
                                }
                                let v1304 = C::unpack_value_array_2(ctx, v1301);
                                let v1338 = C::put_in_reg(ctx, v1304.0);
                                let v1329 = C::put_in_reg(ctx, v1304.1);
                                let v1345 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::And,
                                    v1338,
                                    v1329,
                                    v1278,
                                    v1302,
                                );
                                let v1346 = constructor_output_reg(ctx, v1345);
                                // Rule at src/isa/aarch64/lower.isle line 2078.
                                return Some(v1346);
                            }
                        }
                    }
                    &AtomicRmwOp::Nand => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1277 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1278) = v1277 {
                                let v1304 = C::unpack_value_array_2(ctx, v1301);
                                let v1338 = C::put_in_reg(ctx, v1304.0);
                                let v1329 = C::put_in_reg(ctx, v1304.1);
                                let v1348 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Nand,
                                    v1338,
                                    v1329,
                                    v1278,
                                    v1302,
                                );
                                let v1349 = constructor_output_reg(ctx, v1348);
                                // Rule at src/isa/aarch64/lower.isle line 2081.
                                return Some(v1349);
                            }
                        }
                    }
                    &AtomicRmwOp::Or => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1277 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1278) = v1277 {
                                let v1298 = C::use_lse(ctx, arg0);
                                if let Some(v1299) = v1298 {
                                    let v1304 = C::unpack_value_array_2(ctx, v1301);
                                    let v1308 = C::put_in_reg(ctx, v1304.1);
                                    let v1315 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Set,
                                        v1304.0,
                                        v1308,
                                        v1278,
                                        v1302,
                                    );
                                    let v1316 = constructor_output_reg(ctx, v1315);
                                    // Rule at src/isa/aarch64/lower.isle line 2042.
                                    return Some(v1316);
                                }
                                let v1304 = C::unpack_value_array_2(ctx, v1301);
                                let v1338 = C::put_in_reg(ctx, v1304.0);
                                let v1329 = C::put_in_reg(ctx, v1304.1);
                                let v1351 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Orr,
                                    v1338,
                                    v1329,
                                    v1278,
                                    v1302,
                                );
                                let v1352 = constructor_output_reg(ctx, v1351);
                                // Rule at src/isa/aarch64/lower.isle line 2084.
                                return Some(v1352);
                            }
                        }
                    }
                    &AtomicRmwOp::Smax => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1277 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1278) = v1277 {
                                let v1298 = C::use_lse(ctx, arg0);
                                if let Some(v1299) = v1298 {
                                    let v1304 = C::unpack_value_array_2(ctx, v1301);
                                    let v1308 = C::put_in_reg(ctx, v1304.1);
                                    let v1318 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Smax,
                                        v1304.0,
                                        v1308,
                                        v1278,
                                        v1302,
                                    );
                                    let v1319 = constructor_output_reg(ctx, v1318);
                                    // Rule at src/isa/aarch64/lower.isle line 2046.
                                    return Some(v1319);
                                }
                                let v1304 = C::unpack_value_array_2(ctx, v1301);
                                let v1338 = C::put_in_reg(ctx, v1304.0);
                                let v1329 = C::put_in_reg(ctx, v1304.1);
                                let v1360 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Smax,
                                    v1338,
                                    v1329,
                                    v1278,
                                    v1302,
                                );
                                let v1361 = constructor_output_reg(ctx, v1360);
                                // Rule at src/isa/aarch64/lower.isle line 2093.
                                return Some(v1361);
                            }
                        }
                    }
                    &AtomicRmwOp::Smin => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1277 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1278) = v1277 {
                                let v1298 = C::use_lse(ctx, arg0);
                                if let Some(v1299) = v1298 {
                                    let v1304 = C::unpack_value_array_2(ctx, v1301);
                                    let v1308 = C::put_in_reg(ctx, v1304.1);
                                    let v1321 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Smin,
                                        v1304.0,
                                        v1308,
                                        v1278,
                                        v1302,
                                    );
                                    let v1322 = constructor_output_reg(ctx, v1321);
                                    // Rule at src/isa/aarch64/lower.isle line 2050.
                                    return Some(v1322);
                                }
                                let v1304 = C::unpack_value_array_2(ctx, v1301);
                                let v1338 = C::put_in_reg(ctx, v1304.0);
                                let v1329 = C::put_in_reg(ctx, v1304.1);
                                let v1357 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Smin,
                                    v1338,
                                    v1329,
                                    v1278,
                                    v1302,
                                );
                                let v1358 = constructor_output_reg(ctx, v1357);
                                // Rule at src/isa/aarch64/lower.isle line 2090.
                                return Some(v1358);
                            }
                        }
                    }
                    &AtomicRmwOp::Sub => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1277 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1278) = v1277 {
                                let v1298 = C::use_lse(ctx, arg0);
                                if let Some(v1299) = v1298 {
                                    let v570 = C::zero_reg(ctx);
                                    let v1304 = C::unpack_value_array_2(ctx, v1301);
                                    let v1329 = C::put_in_reg(ctx, v1304.1);
                                    let v1330 = constructor_sub(ctx, v1278, v570, v1329);
                                    let v1331 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Add,
                                        v1304.0,
                                        v1330,
                                        v1278,
                                        v1302,
                                    );
                                    let v1332 = constructor_output_reg(ctx, v1331);
                                    // Rule at src/isa/aarch64/lower.isle line 2062.
                                    return Some(v1332);
                                }
                                let v1304 = C::unpack_value_array_2(ctx, v1301);
                                let v1338 = C::put_in_reg(ctx, v1304.0);
                                let v1329 = C::put_in_reg(ctx, v1304.1);
                                let v1342 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Sub,
                                    v1338,
                                    v1329,
                                    v1278,
                                    v1302,
                                );
                                let v1343 = constructor_output_reg(ctx, v1342);
                                // Rule at src/isa/aarch64/lower.isle line 2075.
                                return Some(v1343);
                            }
                        }
                    }
                    &AtomicRmwOp::Umax => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1277 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1278) = v1277 {
                                let v1298 = C::use_lse(ctx, arg0);
                                if let Some(v1299) = v1298 {
                                    let v1304 = C::unpack_value_array_2(ctx, v1301);
                                    let v1308 = C::put_in_reg(ctx, v1304.1);
                                    let v1324 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Umax,
                                        v1304.0,
                                        v1308,
                                        v1278,
                                        v1302,
                                    );
                                    let v1325 = constructor_output_reg(ctx, v1324);
                                    // Rule at src/isa/aarch64/lower.isle line 2054.
                                    return Some(v1325);
                                }
                                let v1304 = C::unpack_value_array_2(ctx, v1301);
                                let v1338 = C::put_in_reg(ctx, v1304.0);
                                let v1329 = C::put_in_reg(ctx, v1304.1);
                                let v1366 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Umax,
                                    v1338,
                                    v1329,
                                    v1278,
                                    v1302,
                                );
                                let v1367 = constructor_output_reg(ctx, v1366);
                                // Rule at src/isa/aarch64/lower.isle line 2099.
                                return Some(v1367);
                            }
                        }
                    }
                    &AtomicRmwOp::Umin => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1277 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1278) = v1277 {
                                let v1298 = C::use_lse(ctx, arg0);
                                if let Some(v1299) = v1298 {
                                    let v1304 = C::unpack_value_array_2(ctx, v1301);
                                    let v1308 = C::put_in_reg(ctx, v1304.1);
                                    let v1327 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Umin,
                                        v1304.0,
                                        v1308,
                                        v1278,
                                        v1302,
                                    );
                                    let v1328 = constructor_output_reg(ctx, v1327);
                                    // Rule at src/isa/aarch64/lower.isle line 2058.
                                    return Some(v1328);
                                }
                                let v1304 = C::unpack_value_array_2(ctx, v1301);
                                let v1338 = C::put_in_reg(ctx, v1304.0);
                                let v1329 = C::put_in_reg(ctx, v1304.1);
                                let v1363 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Umin,
                                    v1338,
                                    v1329,
                                    v1278,
                                    v1302,
                                );
                                let v1364 = constructor_output_reg(ctx, v1363);
                                // Rule at src/isa/aarch64/lower.isle line 2096.
                                return Some(v1364);
                            }
                        }
                    }
                    &AtomicRmwOp::Xchg => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1277 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1278) = v1277 {
                                let v1304 = C::unpack_value_array_2(ctx, v1301);
                                let v1338 = C::put_in_reg(ctx, v1304.0);
                                let v1329 = C::put_in_reg(ctx, v1304.1);
                                let v1369 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Xchg,
                                    v1338,
                                    v1329,
                                    v1278,
                                    v1302,
                                );
                                let v1370 = constructor_output_reg(ctx, v1369);
                                // Rule at src/isa/aarch64/lower.isle line 2102.
                                return Some(v1370);
                            }
                        }
                    }
                    &AtomicRmwOp::Xor => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1277 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1278) = v1277 {
                                let v1298 = C::use_lse(ctx, arg0);
                                if let Some(v1299) = v1298 {
                                    let v1304 = C::unpack_value_array_2(ctx, v1301);
                                    let v1308 = C::put_in_reg(ctx, v1304.1);
                                    let v1312 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Eor,
                                        v1304.0,
                                        v1308,
                                        v1278,
                                        v1302,
                                    );
                                    let v1313 = constructor_output_reg(ctx, v1312);
                                    // Rule at src/isa/aarch64/lower.isle line 2038.
                                    return Some(v1313);
                                }
                                let v1304 = C::unpack_value_array_2(ctx, v1301);
                                let v1338 = C::put_in_reg(ctx, v1304.0);
                                let v1329 = C::put_in_reg(ctx, v1304.1);
                                let v1354 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Eor,
                                    v1338,
                                    v1329,
                                    v1278,
                                    v1302,
                                );
                                let v1355 = constructor_output_reg(ctx, v1354);
                                // Rule at src/isa/aarch64/lower.isle line 2087.
                                return Some(v1355);
                            }
                        }
                    }
                    _ => {}
                }
            }
        }
        &InstructionData::Binary {
            opcode: ref v29,
            args: ref v30,
        } => {
            match v29 {
                &Opcode::Swizzle => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v31 = C::unpack_value_array_2(ctx, v30);
                        let v34 = C::put_in_reg(ctx, v31.0);
                        let v35 = C::put_in_reg(ctx, v31.1);
                        let v228 = constructor_vec_tbl(ctx, v34, v35);
                        let v229 = constructor_output_reg(ctx, v228);
                        // Rule at src/isa/aarch64/lower.isle line 241.
                        return Some(v229);
                    }
                }
                &Opcode::Smin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v664 = C::ty_int(ctx, v3);
                            if let Some(v665) = v664 {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v670 = constructor_cmp_and_choose(
                                    ctx,
                                    v28,
                                    &Cond::Lt,
                                    true,
                                    v31.0,
                                    v31.1,
                                );
                                let v671 = C::output(ctx, v670);
                                // Rule at src/isa/aarch64/lower.isle line 1058.
                                return Some(v671);
                            }
                        }
                        if v3 == I64X2 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v56 = C::put_in_reg(ctx, v31.1);
                            let v325 = C::put_in_reg(ctx, v31.0);
                            let v685 = constructor_vec_rrr(
                                ctx,
                                &VecALUOp::Cmgt,
                                v56,
                                v325,
                                &VectorSize::Size64x2,
                            );
                            let v686 = C::put_in_reg(ctx, v31.0);
                            let v687 = C::put_in_reg(ctx, v31.1);
                            let v688 = constructor_bsl(ctx, I64X2, v685, v686, v687);
                            let v689 = constructor_output_reg(ctx, v688);
                            // Rule at src/isa/aarch64/lower.isle line 1070.
                            return Some(v689);
                        }
                        let v678 = C::not_i64x2(ctx, v3);
                        if let Some(v679) = v678 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v681 = constructor_vec_rrr(ctx, &VecALUOp::Smin, v34, v35, v121);
                            let v682 = constructor_output_reg(ctx, v681);
                            // Rule at src/isa/aarch64/lower.isle line 1067.
                            return Some(v682);
                        }
                    }
                }
                &Opcode::Umin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v664 = C::ty_int(ctx, v3);
                            if let Some(v665) = v664 {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v667 = constructor_cmp_and_choose(
                                    ctx,
                                    v28,
                                    &Cond::Lo,
                                    false,
                                    v31.0,
                                    v31.1,
                                );
                                let v668 = C::output(ctx, v667);
                                // Rule at src/isa/aarch64/lower.isle line 1056.
                                return Some(v668);
                            }
                        }
                        if v3 == I64X2 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v56 = C::put_in_reg(ctx, v31.1);
                            let v325 = C::put_in_reg(ctx, v31.0);
                            let v694 = constructor_vec_rrr(
                                ctx,
                                &VecALUOp::Cmhi,
                                v56,
                                v325,
                                &VectorSize::Size64x2,
                            );
                            let v686 = C::put_in_reg(ctx, v31.0);
                            let v687 = C::put_in_reg(ctx, v31.1);
                            let v695 = constructor_bsl(ctx, I64X2, v694, v686, v687);
                            let v696 = constructor_output_reg(ctx, v695);
                            // Rule at src/isa/aarch64/lower.isle line 1076.
                            return Some(v696);
                        }
                        let v678 = C::not_i64x2(ctx, v3);
                        if let Some(v679) = v678 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v691 = constructor_vec_rrr(ctx, &VecALUOp::Umin, v34, v35, v121);
                            let v692 = constructor_output_reg(ctx, v691);
                            // Rule at src/isa/aarch64/lower.isle line 1073.
                            return Some(v692);
                        }
                    }
                }
                &Opcode::Smax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v664 = C::ty_int(ctx, v3);
                            if let Some(v665) = v664 {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v676 = constructor_cmp_and_choose(
                                    ctx,
                                    v28,
                                    &Cond::Gt,
                                    true,
                                    v31.0,
                                    v31.1,
                                );
                                let v677 = C::output(ctx, v676);
                                // Rule at src/isa/aarch64/lower.isle line 1062.
                                return Some(v677);
                            }
                        }
                        if v3 == I64X2 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v700 = constructor_vec_rrr(
                                ctx,
                                &VecALUOp::Cmgt,
                                v34,
                                v35,
                                &VectorSize::Size64x2,
                            );
                            let v686 = C::put_in_reg(ctx, v31.0);
                            let v687 = C::put_in_reg(ctx, v31.1);
                            let v701 = constructor_bsl(ctx, I64X2, v700, v686, v687);
                            let v702 = constructor_output_reg(ctx, v701);
                            // Rule at src/isa/aarch64/lower.isle line 1082.
                            return Some(v702);
                        }
                        let v678 = C::not_i64x2(ctx, v3);
                        if let Some(v679) = v678 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v698 = constructor_vec_rrr(ctx, &VecALUOp::Smax, v34, v35, v121);
                            let v699 = constructor_output_reg(ctx, v698);
                            // Rule at src/isa/aarch64/lower.isle line 1079.
                            return Some(v699);
                        }
                    }
                }
                &Opcode::Umax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v664 = C::ty_int(ctx, v3);
                            if let Some(v665) = v664 {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v673 = constructor_cmp_and_choose(
                                    ctx,
                                    v28,
                                    &Cond::Hi,
                                    false,
                                    v31.0,
                                    v31.1,
                                );
                                let v674 = C::output(ctx, v673);
                                // Rule at src/isa/aarch64/lower.isle line 1060.
                                return Some(v674);
                            }
                        }
                        if v3 == I64X2 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v706 = constructor_vec_rrr(
                                ctx,
                                &VecALUOp::Cmhi,
                                v34,
                                v35,
                                &VectorSize::Size64x2,
                            );
                            let v686 = C::put_in_reg(ctx, v31.0);
                            let v687 = C::put_in_reg(ctx, v31.1);
                            let v707 = constructor_bsl(ctx, I64X2, v706, v686, v687);
                            let v708 = constructor_output_reg(ctx, v707);
                            // Rule at src/isa/aarch64/lower.isle line 1088.
                            return Some(v708);
                        }
                        let v678 = C::not_i64x2(ctx, v3);
                        if let Some(v679) = v678 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v704 = constructor_vec_rrr(ctx, &VecALUOp::Umax, v34, v35, v121);
                            let v705 = constructor_output_reg(ctx, v704);
                            // Rule at src/isa/aarch64/lower.isle line 1085.
                            return Some(v705);
                        }
                    }
                }
                &Opcode::AvgRound => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64X2 {
                            let v324 = constructor_splat_const(ctx, 0x1, &VectorSize::Size64x2);
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v325 = C::put_in_reg(ctx, v31.0);
                            let v112 = C::put_in_reg(ctx, v31.1);
                            let v326 = constructor_orr_vec(ctx, v325, v112, &VectorSize::Size64x2);
                            let v327 = constructor_and_vec(ctx, v326, v324, &VectorSize::Size64x2);
                            let v328 = C::put_in_reg(ctx, v31.0);
                            let v330 =
                                constructor_ushr_vec_imm(ctx, v328, 0x1, &VectorSize::Size64x2);
                            let v331 = C::put_in_reg(ctx, v31.1);
                            let v332 =
                                constructor_ushr_vec_imm(ctx, v331, 0x1, &VectorSize::Size64x2);
                            let v333 = constructor_add_vec(ctx, v330, v332, &VectorSize::Size64x2);
                            let v334 = constructor_add_vec(ctx, v327, v333, &VectorSize::Size64x2);
                            let v335 = constructor_output_reg(ctx, v334);
                            // Rule at src/isa/aarch64/lower.isle line 353.
                            return Some(v335);
                        }
                        let v336 = C::lane_fits_in_32(ctx, v3);
                        if let Some(v337) = v336 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v339 = &constructor_vector_size(ctx, v337);
                            let v340 = constructor_vec_rrr(ctx, &VecALUOp::Urhadd, v34, v35, v339);
                            let v341 = constructor_output_reg(ctx, v340);
                            // Rule at src/isa/aarch64/lower.isle line 362.
                            return Some(v341);
                        }
                    }
                }
                &Opcode::UaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v559 = C::ty_vec128(ctx, v3);
                        if let Some(v560) = v559 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v561 = &constructor_vector_size(ctx, v560);
                            let v562 = constructor_uqadd(ctx, v34, v35, v561);
                            let v563 = constructor_output_reg(ctx, v562);
                            // Rule at src/isa/aarch64/lower.isle line 708.
                            return Some(v563);
                        }
                    }
                }
                &Opcode::SaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v559 = C::ty_vec128(ctx, v3);
                        if let Some(v560) = v559 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v561 = &constructor_vector_size(ctx, v560);
                            let v564 = constructor_sqadd(ctx, v34, v35, v561);
                            let v565 = constructor_output_reg(ctx, v564);
                            // Rule at src/isa/aarch64/lower.isle line 713.
                            return Some(v565);
                        }
                    }
                }
                &Opcode::UsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v559 = C::ty_vec128(ctx, v3);
                        if let Some(v560) = v559 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v561 = &constructor_vector_size(ctx, v560);
                            let v566 = constructor_uqsub(ctx, v34, v35, v561);
                            let v567 = constructor_output_reg(ctx, v566);
                            // Rule at src/isa/aarch64/lower.isle line 718.
                            return Some(v567);
                        }
                    }
                }
                &Opcode::SsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v559 = C::ty_vec128(ctx, v3);
                        if let Some(v560) = v559 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v561 = &constructor_vector_size(ctx, v560);
                            let v568 = constructor_sqsub(ctx, v34, v35, v561);
                            let v569 = constructor_output_reg(ctx, v568);
                            // Rule at src/isa/aarch64/lower.isle line 723.
                            return Some(v569);
                        }
                    }
                }
                &Opcode::Iadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::Binary {
                                    opcode: ref v75,
                                    args: ref v76,
                                } = v40
                                {
                                    match v75 {
                                        &Opcode::Imul => {
                                            let v77 = C::unpack_value_array_2(ctx, v76);
                                            let v105 = C::put_in_reg(ctx, v77.0);
                                            let v106 = C::put_in_reg(ctx, v77.1);
                                            let v107 = C::put_in_reg(ctx, v31.0);
                                            let v108 = constructor_madd(ctx, v28, v105, v106, v107);
                                            let v109 = constructor_output_reg(ctx, v108);
                                            // Rule at src/isa/aarch64/lower.isle line 88.
                                            return Some(v109);
                                        }
                                        &Opcode::Ishl => {
                                            let v77 = C::unpack_value_array_2(ctx, v76);
                                            let v80 = C::def_inst(ctx, v77.1);
                                            if let Some(v81) = v80 {
                                                let v82 = &C::inst_data(ctx, v81);
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v83,
                                                    imm: v84,
                                                } = v82
                                                {
                                                    if let &Opcode::Iconst = v83 {
                                                        let v85 = C::lshl_from_imm64(ctx, v28, v84);
                                                        if let Some(v86) = v85 {
                                                            let v34 = C::put_in_reg(ctx, v31.0);
                                                            let v87 = C::put_in_reg(ctx, v77.0);
                                                            let v88 = constructor_add_shift(
                                                                ctx, v28, v34, v87, v86,
                                                            );
                                                            let v89 =
                                                                constructor_output_reg(ctx, v88);
                                                            // Rule at src/isa/aarch64/lower.isle line 77.
                                                            return Some(v89);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v48 = C::def_inst(ctx, v31.0);
                            if let Some(v49) = v48 {
                                let v50 = &C::inst_data(ctx, v49);
                                match v50 {
                                    &InstructionData::Binary {
                                        opcode: ref v90,
                                        args: ref v91,
                                    } => {
                                        match v90 {
                                            &Opcode::Imul => {
                                                let v92 = C::unpack_value_array_2(ctx, v91);
                                                let v110 = C::put_in_reg(ctx, v92.0);
                                                let v111 = C::put_in_reg(ctx, v92.1);
                                                let v112 = C::put_in_reg(ctx, v31.1);
                                                let v113 =
                                                    constructor_madd(ctx, v28, v110, v111, v112);
                                                let v114 = constructor_output_reg(ctx, v113);
                                                // Rule at src/isa/aarch64/lower.isle line 91.
                                                return Some(v114);
                                            }
                                            &Opcode::Ishl => {
                                                let v92 = C::unpack_value_array_2(ctx, v91);
                                                let v95 = C::def_inst(ctx, v92.1);
                                                if let Some(v96) = v95 {
                                                    let v97 = &C::inst_data(ctx, v96);
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v98,
                                                        imm: v99,
                                                    } = v97
                                                    {
                                                        if let &Opcode::Iconst = v98 {
                                                            let v100 =
                                                                C::lshl_from_imm64(ctx, v28, v99);
                                                            if let Some(v101) = v100 {
                                                                let v56 = C::put_in_reg(ctx, v31.1);
                                                                let v102 =
                                                                    C::put_in_reg(ctx, v92.0);
                                                                let v103 = constructor_add_shift(
                                                                    ctx, v28, v56, v102, v101,
                                                                );
                                                                let v104 = constructor_output_reg(
                                                                    ctx, v103,
                                                                );
                                                                // Rule at src/isa/aarch64/lower.isle line 82.
                                                                return Some(v104);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                    &InstructionData::UnaryImm {
                                        opcode: ref v51,
                                        imm: v52,
                                    } => {
                                        if let &Opcode::Iconst = v51 {
                                            let v53 = C::u64_from_imm64(ctx, v52);
                                            let v54 = C::imm12_from_u64(ctx, v53);
                                            if let Some(v55) = v54 {
                                                let v56 = C::put_in_reg(ctx, v31.1);
                                                let v57 = constructor_add_imm(ctx, v28, v56, v55);
                                                let v58 = constructor_output_reg(ctx, v57);
                                                // Rule at src/isa/aarch64/lower.isle line 54.
                                                return Some(v58);
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v41,
                                    imm: v42,
                                } = v40
                                {
                                    if let &Opcode::Iconst = v41 {
                                        let v43 = C::u64_from_imm64(ctx, v42);
                                        let v44 = C::imm12_from_u64(ctx, v43);
                                        if let Some(v45) = v44 {
                                            let v34 = C::put_in_reg(ctx, v31.0);
                                            let v46 = constructor_add_imm(ctx, v28, v34, v45);
                                            let v47 = constructor_output_reg(ctx, v46);
                                            // Rule at src/isa/aarch64/lower.isle line 51.
                                            return Some(v47);
                                        }
                                    }
                                }
                            }
                            let v63 = constructor_imm12_from_negated_value(ctx, v31.0);
                            if let Some(v64) = v63 {
                                let v56 = C::put_in_reg(ctx, v31.1);
                                let v65 = constructor_sub_imm(ctx, v28, v56, v64);
                                let v66 = constructor_output_reg(ctx, v65);
                                // Rule at src/isa/aarch64/lower.isle line 63.
                                return Some(v66);
                            }
                            let v59 = constructor_imm12_from_negated_value(ctx, v31.1);
                            if let Some(v60) = v59 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v61 = constructor_sub_imm(ctx, v28, v34, v60);
                                let v62 = constructor_output_reg(ctx, v61);
                                // Rule at src/isa/aarch64/lower.isle line 59.
                                return Some(v62);
                            }
                            let v71 = &C::extended_value_from_value(ctx, v31.0);
                            if let Some(v72) = v71 {
                                let v56 = C::put_in_reg(ctx, v31.1);
                                let v73 = constructor_add_extend(ctx, v28, v56, v72);
                                let v74 = constructor_output_reg(ctx, v73);
                                // Rule at src/isa/aarch64/lower.isle line 72.
                                return Some(v74);
                            }
                            let v67 = &C::extended_value_from_value(ctx, v31.1);
                            if let Some(v68) = v67 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v69 = constructor_add_extend(ctx, v28, v34, v68);
                                let v70 = constructor_output_reg(ctx, v69);
                                // Rule at src/isa/aarch64/lower.isle line 69.
                                return Some(v70);
                            }
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v36 = constructor_add(ctx, v28, v34, v35);
                            let v37 = constructor_output_reg(ctx, v36);
                            // Rule at src/isa/aarch64/lower.isle line 47.
                            return Some(v37);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v122 = constructor_add_vec(ctx, v34, v35, v121);
                            let v123 = constructor_output_reg(ctx, v122);
                            // Rule at src/isa/aarch64/lower.isle line 100.
                            return Some(v123);
                        }
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v124 = C::put_in_regs(ctx, v31.0);
                            let v126 = C::value_regs_get(ctx, v124, 0x0);
                            let v128 = C::value_regs_get(ctx, v124, 0x1);
                            let v129 = C::put_in_regs(ctx, v31.1);
                            let v130 = C::value_regs_get(ctx, v129, 0x0);
                            let v131 = C::value_regs_get(ctx, v129, 0x1);
                            let v133 = &constructor_add_with_flags_paired(ctx, I64, v126, v130);
                            let v134 = &constructor_adc_paired(ctx, I64, v128, v131);
                            let v135 = constructor_with_flags(ctx, v133, v134);
                            let v136 = C::output(ctx, v135);
                            // Rule at src/isa/aarch64/lower.isle line 104.
                            return Some(v136);
                        }
                        let v1791 = C::dynamic_lane(ctx, v3);
                        if let Some(v1792) = v1791 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v122 = constructor_add_vec(ctx, v34, v35, v121);
                            let v1795 = C::value_reg(ctx, v122);
                            let v1796 = C::output(ctx, v1795);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 3.
                            return Some(v1796);
                        }
                    }
                }
                &Opcode::Isub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v59 = constructor_imm12_from_negated_value(ctx, v31.1);
                            if let Some(v60) = v59 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v548 = constructor_add_imm(ctx, v28, v34, v60);
                                let v549 = constructor_output_reg(ctx, v548);
                                // Rule at src/isa/aarch64/lower.isle line 682.
                                return Some(v549);
                            }
                            let v67 = &C::extended_value_from_value(ctx, v31.1);
                            if let Some(v68) = v67 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v550 = constructor_sub_extend(ctx, v28, v34, v68);
                                let v551 = constructor_output_reg(ctx, v550);
                                // Rule at src/isa/aarch64/lower.isle line 688.
                                return Some(v551);
                            }
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                match v40 {
                                    &InstructionData::Binary {
                                        opcode: ref v75,
                                        args: ref v76,
                                    } => {
                                        if let &Opcode::Imul = v75 {
                                            let v77 = C::unpack_value_array_2(ctx, v76);
                                            let v105 = C::put_in_reg(ctx, v77.0);
                                            let v106 = C::put_in_reg(ctx, v77.1);
                                            let v107 = C::put_in_reg(ctx, v31.0);
                                            let v115 = constructor_msub(ctx, v28, v105, v106, v107);
                                            let v116 = constructor_output_reg(ctx, v115);
                                            // Rule at src/isa/aarch64/lower.isle line 95.
                                            return Some(v116);
                                        }
                                    }
                                    &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } => {
                                        if let &Opcode::Iconst = v41 {
                                            let v43 = C::u64_from_imm64(ctx, v42);
                                            let v44 = C::imm12_from_u64(ctx, v43);
                                            if let Some(v45) = v44 {
                                                let v34 = C::put_in_reg(ctx, v31.0);
                                                let v546 = constructor_sub_imm(ctx, v28, v34, v45);
                                                let v547 = constructor_output_reg(ctx, v546);
                                                // Rule at src/isa/aarch64/lower.isle line 677.
                                                return Some(v547);
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v124 = C::put_in_regs(ctx, v31.0);
                            let v556 = C::put_in_regs(ctx, v31.1);
                            let v557 = constructor_sub_i128(ctx, v124, v556);
                            let v558 = C::output(ctx, v557);
                            // Rule at src/isa/aarch64/lower.isle line 703.
                            return Some(v558);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v554 = constructor_sub_vec(ctx, v34, v35, v121);
                            let v555 = constructor_output_reg(ctx, v554);
                            // Rule at src/isa/aarch64/lower.isle line 699.
                            return Some(v555);
                        }
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::Binary {
                                    opcode: ref v75,
                                    args: ref v76,
                                } = v40
                                {
                                    if let &Opcode::Ishl = v75 {
                                        let v77 = C::unpack_value_array_2(ctx, v76);
                                        let v80 = C::def_inst(ctx, v77.1);
                                        if let Some(v81) = v80 {
                                            let v82 = &C::inst_data(ctx, v81);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v83,
                                                imm: v84,
                                            } = v82
                                            {
                                                if let &Opcode::Iconst = v83 {
                                                    let v85 = C::lshl_from_imm64(ctx, v28, v84);
                                                    if let Some(v86) = v85 {
                                                        let v34 = C::put_in_reg(ctx, v31.0);
                                                        let v87 = C::put_in_reg(ctx, v77.0);
                                                        let v552 = constructor_sub_shift(
                                                            ctx, v28, v34, v87, v86,
                                                        );
                                                        let v553 =
                                                            constructor_output_reg(ctx, v552);
                                                        // Rule at src/isa/aarch64/lower.isle line 693.
                                                        return Some(v553);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v544 = constructor_sub(ctx, v28, v34, v35);
                            let v545 = constructor_output_reg(ctx, v544);
                            // Rule at src/isa/aarch64/lower.isle line 673.
                            return Some(v545);
                        }
                        let v1791 = C::dynamic_lane(ctx, v3);
                        if let Some(v1792) = v1791 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v554 = constructor_sub_vec(ctx, v34, v35, v121);
                            let v1797 = C::value_reg(ctx, v554);
                            let v1798 = C::output(ctx, v1797);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 7.
                            return Some(v1798);
                        }
                    }
                }
                &Opcode::Imul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v124 = C::put_in_regs(ctx, v31.0);
                                let v126 = C::value_regs_get(ctx, v124, 0x0);
                                let v128 = C::value_regs_get(ctx, v124, 0x1);
                                let v129 = C::put_in_regs(ctx, v31.1);
                                let v130 = C::value_regs_get(ctx, v129, 0x0);
                                let v131 = C::value_regs_get(ctx, v129, 0x1);
                                let v583 = constructor_umulh(ctx, I64, v126, v130);
                                let v584 = constructor_madd(ctx, I64, v126, v131, v583);
                                let v585 = constructor_madd(ctx, I64, v128, v130, v584);
                                let v586 = C::zero_reg(ctx);
                                let v587 = constructor_madd(ctx, I64, v126, v130, v586);
                                let v588 = C::value_regs(ctx, v587, v585);
                                let v589 = C::output(ctx, v588);
                                // Rule at src/isa/aarch64/lower.isle line 747.
                                return Some(v589);
                            }
                            I16X8 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::Unary {
                                        opcode: ref v300,
                                        arg: v301,
                                    } = v40
                                    {
                                        match v300 {
                                            &Opcode::SwidenLow => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::SwidenLow = v298 {
                                                            let v602 = C::value_type(ctx, v299);
                                                            if v602 == I8X16 {
                                                                let v603 = C::value_type(ctx, v301);
                                                                if v603 == I8X16 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v604 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v605 = constructor_smull8(
                                                                        ctx, v302, v604, false,
                                                                    );
                                                                    let v606 =
                                                                        constructor_output_reg(
                                                                            ctx, v605,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 846.
                                                                    return Some(v606);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::SwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::SwidenHigh = v298 {
                                                            let v602 = C::value_type(ctx, v299);
                                                            if v602 == I8X16 {
                                                                let v603 = C::value_type(ctx, v301);
                                                                if v603 == I8X16 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v604 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v607 = constructor_smull8(
                                                                        ctx, v302, v604, true,
                                                                    );
                                                                    let v608 =
                                                                        constructor_output_reg(
                                                                            ctx, v607,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 852.
                                                                    return Some(v608);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenLow => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::UwidenLow = v298 {
                                                            let v602 = C::value_type(ctx, v299);
                                                            if v602 == I8X16 {
                                                                let v603 = C::value_type(ctx, v301);
                                                                if v603 == I8X16 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v604 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v609 = constructor_umull8(
                                                                        ctx, v302, v604, false,
                                                                    );
                                                                    let v610 =
                                                                        constructor_output_reg(
                                                                            ctx, v609,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 858.
                                                                    return Some(v610);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::UwidenHigh = v298 {
                                                            let v602 = C::value_type(ctx, v299);
                                                            if v602 == I8X16 {
                                                                let v603 = C::value_type(ctx, v301);
                                                                if v603 == I8X16 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v604 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v611 = constructor_umull8(
                                                                        ctx, v302, v604, true,
                                                                    );
                                                                    let v612 =
                                                                        constructor_output_reg(
                                                                            ctx, v611,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 864.
                                                                    return Some(v612);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            I32X4 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::Unary {
                                        opcode: ref v300,
                                        arg: v301,
                                    } = v40
                                    {
                                        match v300 {
                                            &Opcode::SwidenLow => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::SwidenLow = v298 {
                                                            let v602 = C::value_type(ctx, v299);
                                                            if v602 == I16X8 {
                                                                let v603 = C::value_type(ctx, v301);
                                                                if v603 == I16X8 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v604 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v613 = constructor_smull16(
                                                                        ctx, v302, v604, false,
                                                                    );
                                                                    let v614 =
                                                                        constructor_output_reg(
                                                                            ctx, v613,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 870.
                                                                    return Some(v614);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::SwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::SwidenHigh = v298 {
                                                            let v602 = C::value_type(ctx, v299);
                                                            if v602 == I16X8 {
                                                                let v603 = C::value_type(ctx, v301);
                                                                if v603 == I16X8 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v604 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v615 = constructor_smull16(
                                                                        ctx, v302, v604, true,
                                                                    );
                                                                    let v616 =
                                                                        constructor_output_reg(
                                                                            ctx, v615,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 876.
                                                                    return Some(v616);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenLow => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::UwidenLow = v298 {
                                                            let v602 = C::value_type(ctx, v299);
                                                            if v602 == I16X8 {
                                                                let v603 = C::value_type(ctx, v301);
                                                                if v603 == I16X8 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v604 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v617 = constructor_umull16(
                                                                        ctx, v302, v604, false,
                                                                    );
                                                                    let v618 =
                                                                        constructor_output_reg(
                                                                            ctx, v617,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 882.
                                                                    return Some(v618);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::UwidenHigh = v298 {
                                                            let v602 = C::value_type(ctx, v299);
                                                            if v602 == I16X8 {
                                                                let v603 = C::value_type(ctx, v301);
                                                                if v603 == I16X8 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v604 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v619 = constructor_umull16(
                                                                        ctx, v302, v604, true,
                                                                    );
                                                                    let v620 =
                                                                        constructor_output_reg(
                                                                            ctx, v619,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 888.
                                                                    return Some(v620);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            I64X2 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::Unary {
                                        opcode: ref v300,
                                        arg: v301,
                                    } = v40
                                    {
                                        match v300 {
                                            &Opcode::SwidenLow => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::SwidenLow = v298 {
                                                            let v602 = C::value_type(ctx, v299);
                                                            if v602 == I32X4 {
                                                                let v603 = C::value_type(ctx, v301);
                                                                if v603 == I32X4 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v604 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v621 = constructor_smull32(
                                                                        ctx, v302, v604, false,
                                                                    );
                                                                    let v622 =
                                                                        constructor_output_reg(
                                                                            ctx, v621,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 894.
                                                                    return Some(v622);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::SwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::SwidenHigh = v298 {
                                                            let v602 = C::value_type(ctx, v299);
                                                            if v602 == I32X4 {
                                                                let v603 = C::value_type(ctx, v301);
                                                                if v603 == I32X4 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v604 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v623 = constructor_smull32(
                                                                        ctx, v302, v604, true,
                                                                    );
                                                                    let v624 =
                                                                        constructor_output_reg(
                                                                            ctx, v623,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 900.
                                                                    return Some(v624);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenLow => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::UwidenLow = v298 {
                                                            let v602 = C::value_type(ctx, v299);
                                                            if v602 == I32X4 {
                                                                let v603 = C::value_type(ctx, v301);
                                                                if v603 == I32X4 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v604 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v625 = constructor_umull32(
                                                                        ctx, v302, v604, false,
                                                                    );
                                                                    let v626 =
                                                                        constructor_output_reg(
                                                                            ctx, v625,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 906.
                                                                    return Some(v626);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::UwidenHigh = v298 {
                                                            let v602 = C::value_type(ctx, v299);
                                                            if v602 == I32X4 {
                                                                let v603 = C::value_type(ctx, v301);
                                                                if v603 == I32X4 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v604 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v627 = constructor_umull32(
                                                                        ctx, v302, v604, true,
                                                                    );
                                                                    let v628 =
                                                                        constructor_output_reg(
                                                                            ctx, v627,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 912.
                                                                    return Some(v628);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v35 = C::put_in_reg(ctx, v31.1);
                                let v594 = constructor_rev64(ctx, v35, &VectorSize::Size32x4);
                                let v595 = constructor_mul(ctx, v594, v34, &VectorSize::Size32x4);
                                let v596 = constructor_xtn(ctx, v34, &ScalarSize::Size32);
                                let v597 = constructor_addp(ctx, v595, v595, &VectorSize::Size32x4);
                                let v598 = constructor_xtn(ctx, v35, &ScalarSize::Size32);
                                let v599 = constructor_shll32(ctx, v597, false);
                                let v600 = constructor_umlal32(ctx, v599, v598, v596, false);
                                let v601 = constructor_output_reg(ctx, v600);
                                // Rule at src/isa/aarch64/lower.isle line 807.
                                return Some(v601);
                            }
                            _ => {}
                        }
                        let v559 = C::ty_vec128(ctx, v3);
                        if let Some(v560) = v559 {
                            let v590 = C::not_i64x2(ctx, v560);
                            if let Some(v591) = v590 {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v35 = C::put_in_reg(ctx, v31.1);
                                let v561 = &constructor_vector_size(ctx, v560);
                                let v592 = constructor_mul(ctx, v34, v35, v561);
                                let v593 = constructor_output_reg(ctx, v592);
                                // Rule at src/isa/aarch64/lower.isle line 775.
                                return Some(v593);
                            }
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v269 = C::zero_reg(ctx);
                            let v581 = constructor_madd(ctx, v28, v34, v35, v269);
                            let v582 = constructor_output_reg(ctx, v581);
                            // Rule at src/isa/aarch64/lower.isle line 743.
                            return Some(v582);
                        }
                        let v336 = C::lane_fits_in_32(ctx, v3);
                        if let Some(v337) = v336 {
                            let v1799 = C::dynamic_lane(ctx, v337);
                            if let Some(v1800) = v1799 {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v35 = C::put_in_reg(ctx, v31.1);
                                let v339 = &constructor_vector_size(ctx, v337);
                                let v1804 =
                                    constructor_vec_rrr(ctx, &VecALUOp::Mul, v34, v35, v339);
                                let v1805 = C::value_reg(ctx, v1804);
                                let v1806 = C::output(ctx, v1805);
                                // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 11.
                                return Some(v1806);
                            }
                        }
                    }
                }
                &Opcode::Umulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v638 = constructor_umulh(ctx, I64, v34, v35);
                            let v639 = constructor_output_reg(ctx, v638);
                            // Rule at src/isa/aarch64/lower.isle line 931.
                            return Some(v639);
                        }
                        let v318 = C::fits_in_32(ctx, v3);
                        if let Some(v319) = v318 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v640 = constructor_put_in_reg_zext64(ctx, v31.0);
                            let v641 = constructor_put_in_reg_zext64(ctx, v31.1);
                            let v269 = C::zero_reg(ctx);
                            let v642 = constructor_madd(ctx, I64, v640, v641, v269);
                            let v634 = C::ty_bits(ctx, v319);
                            let v635 = C::imm_shift_from_u8(ctx, v634);
                            let v643 = constructor_lsr_imm(ctx, I64, v642, v635);
                            let v644 = C::value_reg(ctx, v643);
                            let v645 = C::output(ctx, v644);
                            // Rule at src/isa/aarch64/lower.isle line 934.
                            return Some(v645);
                        }
                    }
                }
                &Opcode::Smulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v629 = constructor_smulh(ctx, I64, v34, v35);
                            let v630 = constructor_output_reg(ctx, v629);
                            // Rule at src/isa/aarch64/lower.isle line 919.
                            return Some(v630);
                        }
                        let v318 = C::fits_in_32(ctx, v3);
                        if let Some(v319) = v318 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v631 = constructor_put_in_reg_sext64(ctx, v31.0);
                            let v632 = constructor_put_in_reg_sext64(ctx, v31.1);
                            let v269 = C::zero_reg(ctx);
                            let v633 = constructor_madd(ctx, I64, v631, v632, v269);
                            let v634 = C::ty_bits(ctx, v319);
                            let v635 = C::imm_shift_from_u8(ctx, v634);
                            let v636 = constructor_asr_imm(ctx, I64, v633, v635);
                            let v637 = constructor_output_reg(ctx, v636);
                            // Rule at src/isa/aarch64/lower.isle line 922.
                            return Some(v637);
                        }
                    }
                }
                &Opcode::SqmulRoundSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v343 =
                                constructor_vec_rrr(ctx, &VecALUOp::Sqrdmulh, v34, v35, v121);
                            let v344 = constructor_output_reg(ctx, v343);
                            // Rule at src/isa/aarch64/lower.isle line 367.
                            return Some(v344);
                        }
                    }
                }
                &Opcode::Udiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v640 = constructor_put_in_reg_zext64(ctx, v31.0);
                            let v646 = constructor_put_nonzero_in_reg_zext64(ctx, v31.1);
                            let v647 = constructor_a64_udiv(ctx, I64, v640, v646);
                            let v648 = constructor_output_reg(ctx, v647);
                            // Rule at src/isa/aarch64/lower.isle line 950.
                            return Some(v648);
                        }
                    }
                }
                &Opcode::Sdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v41,
                                    imm: v42,
                                } = v40
                                {
                                    if let &Opcode::Iconst = v41 {
                                        let v653 = C::safe_divisor_from_imm64(ctx, v28, v42);
                                        if let Some(v654) = v653 {
                                            let v631 = constructor_put_in_reg_sext64(ctx, v31.0);
                                            let v656 =
                                                constructor_imm(ctx, v28, &ImmExtend::Sign, v654);
                                            let v657 = constructor_a64_sdiv(ctx, I64, v631, v656);
                                            let v658 = constructor_output_reg(ctx, v657);
                                            // Rule at src/isa/aarch64/lower.isle line 992.
                                            return Some(v658);
                                        }
                                    }
                                }
                            }
                            let v631 = constructor_put_in_reg_sext64(ctx, v31.0);
                            let v649 = constructor_put_nonzero_in_reg_sext64(ctx, v31.1);
                            let v650 = constructor_trap_if_div_overflow(ctx, v28, v631, v649);
                            let v651 = constructor_a64_sdiv(ctx, I64, v650, v649);
                            let v652 = constructor_output_reg(ctx, v651);
                            // Rule at src/isa/aarch64/lower.isle line 983.
                            return Some(v652);
                        }
                    }
                }
                &Opcode::Urem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v640 = constructor_put_in_reg_zext64(ctx, v31.0);
                            let v646 = constructor_put_nonzero_in_reg_zext64(ctx, v31.1);
                            let v647 = constructor_a64_udiv(ctx, I64, v640, v646);
                            let v659 = constructor_msub(ctx, I64, v647, v646, v640);
                            let v660 = constructor_output_reg(ctx, v659);
                            // Rule at src/isa/aarch64/lower.isle line 1021.
                            return Some(v660);
                        }
                    }
                }
                &Opcode::Srem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v631 = constructor_put_in_reg_sext64(ctx, v31.0);
                            let v649 = constructor_put_nonzero_in_reg_sext64(ctx, v31.1);
                            let v661 = constructor_a64_sdiv(ctx, I64, v631, v649);
                            let v662 = constructor_msub(ctx, I64, v661, v649, v631);
                            let v663 = constructor_output_reg(ctx, v662);
                            // Rule at src/isa/aarch64/lower.isle line 1028.
                            return Some(v663);
                        }
                    }
                }
                &Opcode::UaddOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1710 = C::ty_32_or_64(ctx, v3);
                        if let Some(v1711) = v1710 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1714 = constructor_overflow_op_normal(
                                ctx,
                                v1711,
                                v31.0,
                                v31.1,
                                &ALUOp::AddS,
                                &Cond::Hs,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2653.
                            return Some(v1714);
                        }
                        let v895 = C::fits_in_16(ctx, v3);
                        if let Some(v896) = v895 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1709 = constructor_overflow_op_small(
                                ctx,
                                v896,
                                v31.0,
                                v31.1,
                                &ArgumentExtension::Uext,
                                &ALUOp::Add,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2649.
                            return Some(v1709);
                        }
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1716 = constructor_overflow_op_128(
                                ctx,
                                v31.0,
                                v31.1,
                                &ALUOp::AddS,
                                &ALUOp::AdcS,
                                &Cond::Hs,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2657.
                            return Some(v1716);
                        }
                    }
                }
                &Opcode::SaddOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1710 = C::ty_32_or_64(ctx, v3);
                        if let Some(v1711) = v1710 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1720 = constructor_overflow_op_normal(
                                ctx,
                                v1711,
                                v31.0,
                                v31.1,
                                &ALUOp::AddS,
                                &Cond::Vs,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2671.
                            return Some(v1720);
                        }
                        let v895 = C::fits_in_16(ctx, v3);
                        if let Some(v896) = v895 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1718 = constructor_overflow_op_small(
                                ctx,
                                v896,
                                v31.0,
                                v31.1,
                                &ArgumentExtension::Sext,
                                &ALUOp::Add,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2666.
                            return Some(v1718);
                        }
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1721 = constructor_overflow_op_128(
                                ctx,
                                v31.0,
                                v31.1,
                                &ALUOp::AddS,
                                &ALUOp::AdcS,
                                &Cond::Vs,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2677.
                            return Some(v1721);
                        }
                    }
                }
                &Opcode::UsubOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1710 = C::ty_32_or_64(ctx, v3);
                        if let Some(v1711) = v1710 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1725 = constructor_overflow_op_normal(
                                ctx,
                                v1711,
                                v31.0,
                                v31.1,
                                &ALUOp::SubS,
                                &Cond::Lo,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2691.
                            return Some(v1725);
                        }
                        let v895 = C::fits_in_16(ctx, v3);
                        if let Some(v896) = v895 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1723 = constructor_overflow_op_small(
                                ctx,
                                v896,
                                v31.0,
                                v31.1,
                                &ArgumentExtension::Uext,
                                &ALUOp::Sub,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2686.
                            return Some(v1723);
                        }
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1727 = constructor_overflow_op_128(
                                ctx,
                                v31.0,
                                v31.1,
                                &ALUOp::SubS,
                                &ALUOp::SbcS,
                                &Cond::Lo,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2697.
                            return Some(v1727);
                        }
                    }
                }
                &Opcode::SsubOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1710 = C::ty_32_or_64(ctx, v3);
                        if let Some(v1711) = v1710 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1729 = constructor_overflow_op_normal(
                                ctx,
                                v1711,
                                v31.0,
                                v31.1,
                                &ALUOp::SubS,
                                &Cond::Vs,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2711.
                            return Some(v1729);
                        }
                        let v895 = C::fits_in_16(ctx, v3);
                        if let Some(v896) = v895 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1728 = constructor_overflow_op_small(
                                ctx,
                                v896,
                                v31.0,
                                v31.1,
                                &ArgumentExtension::Sext,
                                &ALUOp::Sub,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2706.
                            return Some(v1728);
                        }
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1730 = constructor_overflow_op_128(
                                ctx,
                                v31.0,
                                v31.1,
                                &ALUOp::SubS,
                                &ALUOp::SbcS,
                                &Cond::Vs,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2717.
                            return Some(v1730);
                        }
                    }
                }
                &Opcode::UmulOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v35 = C::put_in_reg(ctx, v31.1);
                                let v269 = C::zero_reg(ctx);
                                let v1741 = constructor_umaddl(ctx, v34, v35, v269);
                                let v1743 = &constructor_cmp_extend(
                                    ctx,
                                    &OperandSize::Size64,
                                    v1741,
                                    v1741,
                                    &ExtendOp::UXTW,
                                );
                                let v1744 = &constructor_cset(ctx, &Cond::Ne);
                                let v1745 = constructor_with_flags_reg(ctx, v1743, v1744);
                                let v1746 = C::value_reg(ctx, v1741);
                                let v1747 = C::value_reg(ctx, v1745);
                                let v1748 = C::output_pair(ctx, v1746, v1747);
                                // Rule at src/isa/aarch64/lower.isle line 2743.
                                return Some(v1748);
                            }
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v35 = C::put_in_reg(ctx, v31.1);
                                let v269 = C::zero_reg(ctx);
                                let v1749 = constructor_madd(ctx, I64, v34, v35, v269);
                                let v908 = C::put_in_reg(ctx, v31.0);
                                let v1750 = C::put_in_reg(ctx, v31.1);
                                let v1751 = constructor_umulh(ctx, I64, v908, v1750);
                                let v1752 = C::u8_into_imm12(ctx, 0x0);
                                let v1753 = &constructor_cmp64_imm(ctx, v1751, v1752);
                                let v1754 = &constructor_cset(ctx, &Cond::Ne);
                                let v1755 = constructor_with_flags_reg(ctx, v1753, v1754);
                                let v1756 = C::value_reg(ctx, v1749);
                                let v1757 = C::value_reg(ctx, v1755);
                                let v1758 = C::output_pair(ctx, v1756, v1757);
                                // Rule at src/isa/aarch64/lower.isle line 2757.
                                return Some(v1758);
                            }
                            _ => {}
                        }
                        let v895 = C::fits_in_16(ctx, v3);
                        if let Some(v896) = v895 {
                            let v1731 =
                                &constructor_lower_extend_op(ctx, v896, &ArgumentExtension::Uext);
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1732 = constructor_put_in_reg_zext32(ctx, v31.0);
                            let v1733 = constructor_put_in_reg_zext32(ctx, v31.1);
                            let v783 = C::zero_reg(ctx);
                            let v1734 = constructor_madd(ctx, v896, v1732, v1733, v783);
                            let v1735 = &constructor_cmp_extend(
                                ctx,
                                &OperandSize::Size32,
                                v1734,
                                v1734,
                                v1731,
                            );
                            let v1736 = &constructor_cset(ctx, &Cond::Ne);
                            let v1737 = constructor_with_flags_reg(ctx, v1735, v1736);
                            let v1738 = C::value_reg(ctx, v1734);
                            let v1739 = C::value_reg(ctx, v1737);
                            let v1740 = C::output_pair(ctx, v1738, v1739);
                            // Rule at src/isa/aarch64/lower.isle line 2727.
                            return Some(v1740);
                        }
                    }
                }
                &Opcode::SmulOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v35 = C::put_in_reg(ctx, v31.1);
                                let v269 = C::zero_reg(ctx);
                                let v1768 = constructor_smaddl(ctx, v34, v35, v269);
                                let v1770 = &constructor_cmp_extend(
                                    ctx,
                                    &OperandSize::Size64,
                                    v1768,
                                    v1768,
                                    &ExtendOp::SXTW,
                                );
                                let v1744 = &constructor_cset(ctx, &Cond::Ne);
                                let v1771 = constructor_with_flags_reg(ctx, v1770, v1744);
                                let v1772 = C::value_reg(ctx, v1768);
                                let v1773 = C::value_reg(ctx, v1771);
                                let v1774 = C::output_pair(ctx, v1772, v1773);
                                // Rule at src/isa/aarch64/lower.isle line 2791.
                                return Some(v1774);
                            }
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v35 = C::put_in_reg(ctx, v31.1);
                                let v269 = C::zero_reg(ctx);
                                let v1749 = constructor_madd(ctx, I64, v34, v35, v269);
                                let v908 = C::put_in_reg(ctx, v31.0);
                                let v1750 = C::put_in_reg(ctx, v31.1);
                                let v1775 = constructor_smulh(ctx, I64, v908, v1750);
                                let v1777 = &constructor_cmp_rr_shift_asr(
                                    ctx,
                                    &OperandSize::Size64,
                                    v1775,
                                    v1749,
                                    0x3F,
                                );
                                let v1778 = &constructor_cset(ctx, &Cond::Ne);
                                let v1779 = constructor_with_flags_reg(ctx, v1777, v1778);
                                let v1780 = C::value_reg(ctx, v1749);
                                let v1781 = C::value_reg(ctx, v1779);
                                let v1782 = C::output_pair(ctx, v1780, v1781);
                                // Rule at src/isa/aarch64/lower.isle line 2805.
                                return Some(v1782);
                            }
                            _ => {}
                        }
                        let v895 = C::fits_in_16(ctx, v3);
                        if let Some(v896) = v895 {
                            let v1759 =
                                &constructor_lower_extend_op(ctx, v896, &ArgumentExtension::Sext);
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1760 = constructor_put_in_reg_sext32(ctx, v31.0);
                            let v1761 = constructor_put_in_reg_sext32(ctx, v31.1);
                            let v783 = C::zero_reg(ctx);
                            let v1762 = constructor_madd(ctx, v896, v1760, v1761, v783);
                            let v1763 = &constructor_cmp_extend(
                                ctx,
                                &OperandSize::Size32,
                                v1762,
                                v1762,
                                v1759,
                            );
                            let v1736 = &constructor_cset(ctx, &Cond::Ne);
                            let v1764 = constructor_with_flags_reg(ctx, v1763, v1736);
                            let v1765 = C::value_reg(ctx, v1762);
                            let v1766 = C::value_reg(ctx, v1764);
                            let v1767 = C::output_pair(ctx, v1765, v1766);
                            // Rule at src/isa/aarch64/lower.isle line 2775.
                            return Some(v1767);
                        }
                    }
                }
                &Opcode::Band => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v559 = C::ty_vec128(ctx, v3);
                        if let Some(v560) = v559 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v48 = C::def_inst(ctx, v31.0);
                            if let Some(v49) = v48 {
                                let v50 = &C::inst_data(ctx, v49);
                                if let &InstructionData::Unary {
                                    opcode: ref v298,
                                    arg: v299,
                                } = v50
                                {
                                    if let &Opcode::Bnot = v298 {
                                        let v56 = C::put_in_reg(ctx, v31.1);
                                        let v814 = C::put_in_reg(ctx, v299);
                                        let v561 = &constructor_vector_size(ctx, v560);
                                        let v815 = constructor_bic_vec(ctx, v56, v814, v561);
                                        let v816 = constructor_output_reg(ctx, v815);
                                        // Rule at src/isa/aarch64/lower.isle line 1231.
                                        return Some(v816);
                                    }
                                }
                            }
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::Unary {
                                    opcode: ref v300,
                                    arg: v301,
                                } = v40
                                {
                                    if let &Opcode::Bnot = v300 {
                                        let v34 = C::put_in_reg(ctx, v31.0);
                                        let v604 = C::put_in_reg(ctx, v301);
                                        let v561 = &constructor_vector_size(ctx, v560);
                                        let v812 = constructor_bic_vec(ctx, v34, v604, v561);
                                        let v813 = constructor_output_reg(ctx, v812);
                                        // Rule at src/isa/aarch64/lower.isle line 1229.
                                        return Some(v813);
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v48 = C::def_inst(ctx, v31.0);
                            if let Some(v49) = v48 {
                                let v50 = &C::inst_data(ctx, v49);
                                if let &InstructionData::Unary {
                                    opcode: ref v298,
                                    arg: v299,
                                } = v50
                                {
                                    if let &Opcode::Bnot = v298 {
                                        let v810 = constructor_i128_alu_bitop(
                                            ctx,
                                            &ALUOp::AndNot,
                                            I64,
                                            v31.1,
                                            v299,
                                        );
                                        let v811 = C::output(ctx, v810);
                                        // Rule at src/isa/aarch64/lower.isle line 1227.
                                        return Some(v811);
                                    }
                                }
                            }
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::Unary {
                                    opcode: ref v300,
                                    arg: v301,
                                } = v40
                                {
                                    if let &Opcode::Bnot = v300 {
                                        let v808 = constructor_i128_alu_bitop(
                                            ctx,
                                            &ALUOp::AndNot,
                                            I64,
                                            v31.0,
                                            v301,
                                        );
                                        let v809 = C::output(ctx, v808);
                                        // Rule at src/isa/aarch64/lower.isle line 1226.
                                        return Some(v809);
                                    }
                                }
                            }
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v48 = C::def_inst(ctx, v31.0);
                            if let Some(v49) = v48 {
                                let v50 = &C::inst_data(ctx, v49);
                                if let &InstructionData::Unary {
                                    opcode: ref v298,
                                    arg: v299,
                                } = v50
                                {
                                    if let &Opcode::Bnot = v298 {
                                        let v806 = constructor_alu_rs_imm_logic(
                                            ctx,
                                            &ALUOp::AndNot,
                                            v28,
                                            v31.1,
                                            v299,
                                        );
                                        let v807 = constructor_output_reg(ctx, v806);
                                        // Rule at src/isa/aarch64/lower.isle line 1223.
                                        return Some(v807);
                                    }
                                }
                            }
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::Unary {
                                    opcode: ref v300,
                                    arg: v301,
                                } = v40
                                {
                                    if let &Opcode::Bnot = v300 {
                                        let v804 = constructor_alu_rs_imm_logic(
                                            ctx,
                                            &ALUOp::AndNot,
                                            v28,
                                            v31.0,
                                            v301,
                                        );
                                        let v805 = constructor_output_reg(ctx, v804);
                                        // Rule at src/isa/aarch64/lower.isle line 1221.
                                        return Some(v805);
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v799 =
                                constructor_i128_alu_bitop(ctx, &ALUOp::And, I64, v31.0, v31.1);
                            let v800 = C::output(ctx, v799);
                            // Rule at src/isa/aarch64/lower.isle line 1212.
                            return Some(v800);
                        }
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v797 = constructor_alu_rs_imm_logic_commutative(
                                ctx,
                                &ALUOp::And,
                                v28,
                                v31.0,
                                v31.1,
                            );
                            let v798 = constructor_output_reg(ctx, v797);
                            // Rule at src/isa/aarch64/lower.isle line 1209.
                            return Some(v798);
                        }
                        if let Some(v560) = v559 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v561 = &constructor_vector_size(ctx, v560);
                            let v801 = constructor_and_vec(ctx, v34, v35, v561);
                            let v802 = constructor_output_reg(ctx, v801);
                            // Rule at src/isa/aarch64/lower.isle line 1214.
                            return Some(v802);
                        }
                    }
                }
                &Opcode::Bor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v48 = C::def_inst(ctx, v31.0);
                            if let Some(v49) = v48 {
                                let v50 = &C::inst_data(ctx, v49);
                                if let &InstructionData::Unary {
                                    opcode: ref v298,
                                    arg: v299,
                                } = v50
                                {
                                    if let &Opcode::Bnot = v298 {
                                        let v831 = constructor_i128_alu_bitop(
                                            ctx,
                                            &ALUOp::OrrNot,
                                            I64,
                                            v31.1,
                                            v299,
                                        );
                                        let v832 = C::output(ctx, v831);
                                        // Rule at src/isa/aarch64/lower.isle line 1254.
                                        return Some(v832);
                                    }
                                }
                            }
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::Unary {
                                    opcode: ref v300,
                                    arg: v301,
                                } = v40
                                {
                                    if let &Opcode::Bnot = v300 {
                                        let v829 = constructor_i128_alu_bitop(
                                            ctx,
                                            &ALUOp::OrrNot,
                                            I64,
                                            v31.0,
                                            v301,
                                        );
                                        let v830 = C::output(ctx, v829);
                                        // Rule at src/isa/aarch64/lower.isle line 1253.
                                        return Some(v830);
                                    }
                                }
                            }
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v48 = C::def_inst(ctx, v31.0);
                            if let Some(v49) = v48 {
                                let v50 = &C::inst_data(ctx, v49);
                                if let &InstructionData::Unary {
                                    opcode: ref v298,
                                    arg: v299,
                                } = v50
                                {
                                    if let &Opcode::Bnot = v298 {
                                        let v827 = constructor_alu_rs_imm_logic(
                                            ctx,
                                            &ALUOp::OrrNot,
                                            v28,
                                            v31.1,
                                            v299,
                                        );
                                        let v828 = constructor_output_reg(ctx, v827);
                                        // Rule at src/isa/aarch64/lower.isle line 1250.
                                        return Some(v828);
                                    }
                                }
                            }
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::Unary {
                                    opcode: ref v300,
                                    arg: v301,
                                } = v40
                                {
                                    if let &Opcode::Bnot = v300 {
                                        let v825 = constructor_alu_rs_imm_logic(
                                            ctx,
                                            &ALUOp::OrrNot,
                                            v28,
                                            v31.0,
                                            v301,
                                        );
                                        let v826 = constructor_output_reg(ctx, v825);
                                        // Rule at src/isa/aarch64/lower.isle line 1248.
                                        return Some(v826);
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v820 =
                                constructor_i128_alu_bitop(ctx, &ALUOp::Orr, I64, v31.0, v31.1);
                            let v821 = C::output(ctx, v820);
                            // Rule at src/isa/aarch64/lower.isle line 1239.
                            return Some(v821);
                        }
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v818 = constructor_alu_rs_imm_logic_commutative(
                                ctx,
                                &ALUOp::Orr,
                                v28,
                                v31.0,
                                v31.1,
                            );
                            let v819 = constructor_output_reg(ctx, v818);
                            // Rule at src/isa/aarch64/lower.isle line 1236.
                            return Some(v819);
                        }
                        let v559 = C::ty_vec128(ctx, v3);
                        if let Some(v560) = v559 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v561 = &constructor_vector_size(ctx, v560);
                            let v822 = constructor_orr_vec(ctx, v34, v35, v561);
                            let v823 = constructor_output_reg(ctx, v822);
                            // Rule at src/isa/aarch64/lower.isle line 1241.
                            return Some(v823);
                        }
                    }
                }
                &Opcode::Bxor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v48 = C::def_inst(ctx, v31.0);
                            if let Some(v49) = v48 {
                                let v50 = &C::inst_data(ctx, v49);
                                if let &InstructionData::Unary {
                                    opcode: ref v298,
                                    arg: v299,
                                } = v50
                                {
                                    if let &Opcode::Bnot = v298 {
                                        let v846 = constructor_i128_alu_bitop(
                                            ctx,
                                            &ALUOp::EorNot,
                                            I64,
                                            v31.1,
                                            v299,
                                        );
                                        let v847 = C::output(ctx, v846);
                                        // Rule at src/isa/aarch64/lower.isle line 1276.
                                        return Some(v847);
                                    }
                                }
                            }
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::Unary {
                                    opcode: ref v300,
                                    arg: v301,
                                } = v40
                                {
                                    if let &Opcode::Bnot = v300 {
                                        let v844 = constructor_i128_alu_bitop(
                                            ctx,
                                            &ALUOp::EorNot,
                                            I64,
                                            v31.0,
                                            v301,
                                        );
                                        let v845 = C::output(ctx, v844);
                                        // Rule at src/isa/aarch64/lower.isle line 1275.
                                        return Some(v845);
                                    }
                                }
                            }
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v48 = C::def_inst(ctx, v31.0);
                            if let Some(v49) = v48 {
                                let v50 = &C::inst_data(ctx, v49);
                                if let &InstructionData::Unary {
                                    opcode: ref v298,
                                    arg: v299,
                                } = v50
                                {
                                    if let &Opcode::Bnot = v298 {
                                        let v842 = constructor_alu_rs_imm_logic(
                                            ctx,
                                            &ALUOp::EorNot,
                                            v28,
                                            v31.1,
                                            v299,
                                        );
                                        let v843 = constructor_output_reg(ctx, v842);
                                        // Rule at src/isa/aarch64/lower.isle line 1272.
                                        return Some(v843);
                                    }
                                }
                            }
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::Unary {
                                    opcode: ref v300,
                                    arg: v301,
                                } = v40
                                {
                                    if let &Opcode::Bnot = v300 {
                                        let v840 = constructor_alu_rs_imm_logic(
                                            ctx,
                                            &ALUOp::EorNot,
                                            v28,
                                            v31.0,
                                            v301,
                                        );
                                        let v841 = constructor_output_reg(ctx, v840);
                                        // Rule at src/isa/aarch64/lower.isle line 1270.
                                        return Some(v841);
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v836 =
                                constructor_i128_alu_bitop(ctx, &ALUOp::Eor, I64, v31.0, v31.1);
                            let v837 = C::output(ctx, v836);
                            // Rule at src/isa/aarch64/lower.isle line 1261.
                            return Some(v837);
                        }
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v834 = constructor_alu_rs_imm_logic_commutative(
                                ctx,
                                &ALUOp::Eor,
                                v28,
                                v31.0,
                                v31.1,
                            );
                            let v835 = constructor_output_reg(ctx, v834);
                            // Rule at src/isa/aarch64/lower.isle line 1258.
                            return Some(v835);
                        }
                        let v559 = C::ty_vec128(ctx, v3);
                        if let Some(v560) = v559 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v561 = &constructor_vector_size(ctx, v560);
                            let v838 = constructor_eor_vec(ctx, v34, v35, v561);
                            let v839 = constructor_output_reg(ctx, v838);
                            // Rule at src/isa/aarch64/lower.isle line 1263.
                            return Some(v839);
                        }
                    }
                }
                &Opcode::Rotl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } = v40
                                    {
                                        if let &Opcode::Iconst = v41 {
                                            let v914 = C::imm_shift_from_imm64(ctx, I32, v42);
                                            if let Some(v915) = v914 {
                                                let v34 = C::put_in_reg(ctx, v31.0);
                                                let v916 = C::negate_imm_shift(ctx, I32, v915);
                                                let v917 =
                                                    constructor_a64_rotr_imm(ctx, I32, v34, v916);
                                                let v918 = constructor_output_reg(ctx, v917);
                                                // Rule at src/isa/aarch64/lower.isle line 1520.
                                                return Some(v918);
                                            }
                                        }
                                    }
                                }
                                let v897 = C::put_in_regs(ctx, v31.1);
                                let v898 = C::value_regs_get(ctx, v897, 0x0);
                                let v269 = C::zero_reg(ctx);
                                let v899 = constructor_sub(ctx, I32, v269, v898);
                                let v908 = C::put_in_reg(ctx, v31.0);
                                let v909 = constructor_a64_rotr(ctx, I32, v908, v899);
                                let v910 = constructor_output_reg(ctx, v909);
                                // Rule at src/isa/aarch64/lower.isle line 1508.
                                return Some(v910);
                            }
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } = v40
                                    {
                                        if let &Opcode::Iconst = v41 {
                                            let v919 = C::imm_shift_from_imm64(ctx, I64, v42);
                                            if let Some(v920) = v919 {
                                                let v34 = C::put_in_reg(ctx, v31.0);
                                                let v921 = C::negate_imm_shift(ctx, I64, v920);
                                                let v922 =
                                                    constructor_a64_rotr_imm(ctx, I64, v34, v921);
                                                let v923 = constructor_output_reg(ctx, v922);
                                                // Rule at src/isa/aarch64/lower.isle line 1525.
                                                return Some(v923);
                                            }
                                        }
                                    }
                                }
                                let v897 = C::put_in_regs(ctx, v31.1);
                                let v898 = C::value_regs_get(ctx, v897, 0x0);
                                let v269 = C::zero_reg(ctx);
                                let v911 = constructor_sub(ctx, I64, v269, v898);
                                let v908 = C::put_in_reg(ctx, v31.0);
                                let v912 = constructor_a64_rotr(ctx, I64, v908, v911);
                                let v913 = constructor_output_reg(ctx, v912);
                                // Rule at src/isa/aarch64/lower.isle line 1514.
                                return Some(v913);
                            }
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v124 = C::put_in_regs(ctx, v31.0);
                                let v556 = C::put_in_regs(ctx, v31.1);
                                let v853 = C::value_regs_get(ctx, v556, 0x0);
                                let v925 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x80);
                                let v926 = constructor_sub(ctx, I64, v925, v853);
                                let v927 = constructor_lower_shl128(ctx, v124, v853);
                                let v928 = constructor_lower_ushr128(ctx, v124, v926);
                                let v929 = C::value_regs_get(ctx, v927, 0x0);
                                let v930 = C::value_regs_get(ctx, v928, 0x0);
                                let v931 = constructor_orr(ctx, I64, v929, v930);
                                let v932 = C::value_regs_get(ctx, v927, 0x1);
                                let v933 = C::value_regs_get(ctx, v928, 0x1);
                                let v934 = constructor_orr(ctx, I64, v932, v933);
                                let v935 = C::value_regs(ctx, v931, v934);
                                let v936 = C::output(ctx, v935);
                                // Rule at src/isa/aarch64/lower.isle line 1535.
                                return Some(v936);
                            }
                            _ => {}
                        }
                        let v895 = C::fits_in_16(ctx, v3);
                        if let Some(v896) = v895 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v41,
                                    imm: v42,
                                } = v40
                                {
                                    if let &Opcode::Iconst = v41 {
                                        let v903 = C::imm_shift_from_imm64(ctx, v896, v42);
                                        if let Some(v904) = v903 {
                                            let v867 = constructor_put_in_reg_zext32(ctx, v31.0);
                                            let v905 = C::negate_imm_shift(ctx, v896, v904);
                                            let v906 =
                                                constructor_small_rotr_imm(ctx, v896, v867, v905);
                                            let v907 = constructor_output_reg(ctx, v906);
                                            // Rule at src/isa/aarch64/lower.isle line 1495.
                                            return Some(v907);
                                        }
                                    }
                                }
                            }
                            let v897 = C::put_in_regs(ctx, v31.1);
                            let v898 = C::value_regs_get(ctx, v897, 0x0);
                            let v269 = C::zero_reg(ctx);
                            let v899 = constructor_sub(ctx, I32, v269, v898);
                            let v900 = constructor_put_in_reg_zext32(ctx, v31.0);
                            let v901 = constructor_small_rotr(ctx, v896, v900, v899);
                            let v902 = constructor_output_reg(ctx, v901);
                            // Rule at src/isa/aarch64/lower.isle line 1489.
                            return Some(v902);
                        }
                    }
                }
                &Opcode::Rotr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } = v40
                                    {
                                        if let &Opcode::Iconst = v41 {
                                            let v914 = C::imm_shift_from_imm64(ctx, I32, v42);
                                            if let Some(v915) = v914 {
                                                let v34 = C::put_in_reg(ctx, v31.0);
                                                let v945 =
                                                    constructor_a64_rotr_imm(ctx, I32, v34, v915);
                                                let v946 = constructor_output_reg(ctx, v945);
                                                // Rule at src/isa/aarch64/lower.isle line 1565.
                                                return Some(v946);
                                            }
                                        }
                                    }
                                }
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v556 = C::put_in_regs(ctx, v31.1);
                                let v853 = C::value_regs_get(ctx, v556, 0x0);
                                let v939 = constructor_a64_rotr(ctx, I32, v34, v853);
                                let v940 = constructor_output_reg(ctx, v939);
                                // Rule at src/isa/aarch64/lower.isle line 1552.
                                return Some(v940);
                            }
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } = v40
                                    {
                                        if let &Opcode::Iconst = v41 {
                                            let v919 = C::imm_shift_from_imm64(ctx, I64, v42);
                                            if let Some(v920) = v919 {
                                                let v34 = C::put_in_reg(ctx, v31.0);
                                                let v947 =
                                                    constructor_a64_rotr_imm(ctx, I64, v34, v920);
                                                let v948 = constructor_output_reg(ctx, v947);
                                                // Rule at src/isa/aarch64/lower.isle line 1570.
                                                return Some(v948);
                                            }
                                        }
                                    }
                                }
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v556 = C::put_in_regs(ctx, v31.1);
                                let v853 = C::value_regs_get(ctx, v556, 0x0);
                                let v941 = constructor_a64_rotr(ctx, I64, v34, v853);
                                let v942 = constructor_output_reg(ctx, v941);
                                // Rule at src/isa/aarch64/lower.isle line 1556.
                                return Some(v942);
                            }
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v124 = C::put_in_regs(ctx, v31.0);
                                let v556 = C::put_in_regs(ctx, v31.1);
                                let v853 = C::value_regs_get(ctx, v556, 0x0);
                                let v925 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x80);
                                let v926 = constructor_sub(ctx, I64, v925, v853);
                                let v949 = constructor_lower_ushr128(ctx, v124, v853);
                                let v950 = constructor_lower_shl128(ctx, v124, v926);
                                let v951 = C::value_regs_get(ctx, v949, 0x1);
                                let v952 = C::value_regs_get(ctx, v950, 0x1);
                                let v953 = constructor_orr(ctx, I64, v951, v952);
                                let v954 = C::value_regs_get(ctx, v949, 0x0);
                                let v955 = C::value_regs_get(ctx, v950, 0x0);
                                let v956 = constructor_orr(ctx, I64, v954, v955);
                                let v957 = C::value_regs(ctx, v956, v953);
                                let v958 = C::output(ctx, v957);
                                // Rule at src/isa/aarch64/lower.isle line 1619.
                                return Some(v958);
                            }
                            _ => {}
                        }
                        let v895 = C::fits_in_16(ctx, v3);
                        if let Some(v896) = v895 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v41,
                                    imm: v42,
                                } = v40
                                {
                                    if let &Opcode::Iconst = v41 {
                                        let v903 = C::imm_shift_from_imm64(ctx, v896, v42);
                                        if let Some(v904) = v903 {
                                            let v867 = constructor_put_in_reg_zext32(ctx, v31.0);
                                            let v943 =
                                                constructor_small_rotr_imm(ctx, v896, v867, v904);
                                            let v944 = constructor_output_reg(ctx, v943);
                                            // Rule at src/isa/aarch64/lower.isle line 1560.
                                            return Some(v944);
                                        }
                                    }
                                }
                            }
                            let v867 = constructor_put_in_reg_zext32(ctx, v31.0);
                            let v556 = C::put_in_regs(ctx, v31.1);
                            let v853 = C::value_regs_get(ctx, v556, 0x0);
                            let v937 = constructor_small_rotr(ctx, v896, v867, v853);
                            let v938 = constructor_output_reg(ctx, v937);
                            // Rule at src/isa/aarch64/lower.isle line 1548.
                            return Some(v938);
                        }
                    }
                }
                &Opcode::Ishl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v851 = constructor_do_shift(ctx, &ALUOp::Lsl, I64, v34, v31.1);
                                let v852 = constructor_output_reg(ctx, v851);
                                // Rule at src/isa/aarch64/lower.isle line 1285.
                                return Some(v852);
                            }
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v124 = C::put_in_regs(ctx, v31.0);
                                let v556 = C::put_in_regs(ctx, v31.1);
                                let v853 = C::value_regs_get(ctx, v556, 0x0);
                                let v854 = constructor_lower_shl128(ctx, v124, v853);
                                let v855 = C::output(ctx, v854);
                                // Rule at src/isa/aarch64/lower.isle line 1289.
                                return Some(v855);
                            }
                            _ => {}
                        }
                        let v318 = C::fits_in_32(ctx, v3);
                        if let Some(v319) = v318 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v849 = constructor_do_shift(ctx, &ALUOp::Lsl, v319, v34, v31.1);
                            let v850 = constructor_output_reg(ctx, v849);
                            // Rule at src/isa/aarch64/lower.isle line 1281.
                            return Some(v850);
                        }
                        let v559 = C::ty_vec128(ctx, v3);
                        if let Some(v560) = v559 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v41,
                                    imm: v42,
                                } = v40
                                {
                                    if let &Opcode::Iconst = v41 {
                                        let v34 = C::put_in_reg(ctx, v31.0);
                                        let v578 = &constructor_vector_size(ctx, v560);
                                        let v43 = C::u64_from_imm64(ctx, v42);
                                        let v863 = C::shift_masked_imm(ctx, v560, v43);
                                        let v864 = constructor_ushl_vec_imm(ctx, v34, v863, v578);
                                        let v865 = constructor_output_reg(ctx, v864);
                                        // Rule at src/isa/aarch64/lower.isle line 1324.
                                        return Some(v865);
                                    }
                                }
                            }
                            let v856 = &constructor_vector_size(ctx, v560);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v858 = C::shift_mask(ctx, v560);
                            let v859 = constructor_and_imm(ctx, I32, v35, v858);
                            let v860 = constructor_vec_dup(ctx, v859, v856);
                            let v328 = C::put_in_reg(ctx, v31.0);
                            let v861 = constructor_sshl(ctx, v328, v860, v856);
                            let v862 = constructor_output_reg(ctx, v861);
                            // Rule at src/isa/aarch64/lower.isle line 1319.
                            return Some(v862);
                        }
                    }
                }
                &Opcode::Ushr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v640 = constructor_put_in_reg_zext64(ctx, v31.0);
                                let v870 = constructor_do_shift(ctx, &ALUOp::Lsr, I64, v640, v31.1);
                                let v871 = constructor_output_reg(ctx, v870);
                                // Rule at src/isa/aarch64/lower.isle line 1376.
                                return Some(v871);
                            }
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v124 = C::put_in_regs(ctx, v31.0);
                                let v556 = C::put_in_regs(ctx, v31.1);
                                let v853 = C::value_regs_get(ctx, v556, 0x0);
                                let v872 = constructor_lower_ushr128(ctx, v124, v853);
                                let v873 = C::output(ctx, v872);
                                // Rule at src/isa/aarch64/lower.isle line 1380.
                                return Some(v873);
                            }
                            _ => {}
                        }
                        let v318 = C::fits_in_32(ctx, v3);
                        if let Some(v319) = v318 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v867 = constructor_put_in_reg_zext32(ctx, v31.0);
                            let v868 = constructor_do_shift(ctx, &ALUOp::Lsr, v319, v867, v31.1);
                            let v869 = constructor_output_reg(ctx, v868);
                            // Rule at src/isa/aarch64/lower.isle line 1372.
                            return Some(v869);
                        }
                        let v559 = C::ty_vec128(ctx, v3);
                        if let Some(v560) = v559 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v41,
                                    imm: v42,
                                } = v40
                                {
                                    if let &Opcode::Iconst = v41 {
                                        let v43 = C::u64_from_imm64(ctx, v42);
                                        let v863 = C::shift_masked_imm(ctx, v560, v43);
                                        if v863 == 0x0 {
                                            let v882 = constructor_output_value(ctx, v31.0);
                                            // Rule at src/isa/aarch64/lower.isle line 1395.
                                            return Some(v882);
                                        }
                                        let v34 = C::put_in_reg(ctx, v31.0);
                                        let v578 = &constructor_vector_size(ctx, v560);
                                        let v880 = constructor_ushr_vec_imm(ctx, v34, v863, v578);
                                        let v881 = constructor_output_reg(ctx, v880);
                                        // Rule at src/isa/aarch64/lower.isle line 1393.
                                        return Some(v881);
                                    }
                                }
                            }
                            let v856 = &constructor_vector_size(ctx, v560);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v858 = C::shift_mask(ctx, v560);
                            let v859 = constructor_and_imm(ctx, I32, v35, v858);
                            let v874 = C::zero_reg(ctx);
                            let v875 = constructor_sub(ctx, I64, v874, v859);
                            let v876 = constructor_vec_dup(ctx, v875, v856);
                            let v877 = C::put_in_reg(ctx, v31.0);
                            let v878 = constructor_ushl(ctx, v877, v876, v856);
                            let v879 = constructor_output_reg(ctx, v878);
                            // Rule at src/isa/aarch64/lower.isle line 1388.
                            return Some(v879);
                        }
                    }
                }
                &Opcode::Sshr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v631 = constructor_put_in_reg_sext64(ctx, v31.0);
                                let v887 = constructor_do_shift(ctx, &ALUOp::Asr, I64, v631, v31.1);
                                let v888 = constructor_output_reg(ctx, v887);
                                // Rule at src/isa/aarch64/lower.isle line 1433.
                                return Some(v888);
                            }
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v124 = C::put_in_regs(ctx, v31.0);
                                let v556 = C::put_in_regs(ctx, v31.1);
                                let v853 = C::value_regs_get(ctx, v556, 0x0);
                                let v889 = constructor_lower_sshr128(ctx, v124, v853);
                                let v890 = C::output(ctx, v889);
                                // Rule at src/isa/aarch64/lower.isle line 1437.
                                return Some(v890);
                            }
                            _ => {}
                        }
                        let v559 = C::ty_vec128(ctx, v3);
                        if let Some(v560) = v559 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v41,
                                    imm: v42,
                                } = v40
                                {
                                    if let &Opcode::Iconst = v41 {
                                        let v43 = C::u64_from_imm64(ctx, v42);
                                        let v863 = C::shift_masked_imm(ctx, v560, v43);
                                        if v863 == 0x0 {
                                            let v882 = constructor_output_value(ctx, v31.0);
                                            // Rule at src/isa/aarch64/lower.isle line 1453.
                                            return Some(v882);
                                        }
                                        let v34 = C::put_in_reg(ctx, v31.0);
                                        let v578 = &constructor_vector_size(ctx, v560);
                                        let v893 = constructor_sshr_vec_imm(ctx, v34, v863, v578);
                                        let v894 = constructor_output_reg(ctx, v893);
                                        // Rule at src/isa/aarch64/lower.isle line 1451.
                                        return Some(v894);
                                    }
                                }
                            }
                            let v856 = &constructor_vector_size(ctx, v560);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v858 = C::shift_mask(ctx, v560);
                            let v859 = constructor_and_imm(ctx, I32, v35, v858);
                            let v874 = C::zero_reg(ctx);
                            let v875 = constructor_sub(ctx, I64, v874, v859);
                            let v876 = constructor_vec_dup(ctx, v875, v856);
                            let v877 = C::put_in_reg(ctx, v31.0);
                            let v891 = constructor_sshl(ctx, v877, v876, v856);
                            let v892 = constructor_output_reg(ctx, v891);
                            // Rule at src/isa/aarch64/lower.isle line 1446.
                            return Some(v892);
                        }
                        let v318 = C::fits_in_32(ctx, v3);
                        if let Some(v319) = v318 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v884 = constructor_put_in_reg_sext32(ctx, v31.0);
                            let v885 = constructor_do_shift(ctx, &ALUOp::Asr, v319, v884, v31.1);
                            let v886 = constructor_output_reg(ctx, v885);
                            // Rule at src/isa/aarch64/lower.isle line 1429.
                            return Some(v886);
                        }
                    }
                }
                &Opcode::Fadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v348 = C::ty_scalar_float(ctx, v3);
                        if let Some(v349) = v348 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v351 = &constructor_scalar_size(ctx, v349);
                            let v352 = constructor_fpu_rrr(ctx, &FPUOp2::Add, v34, v35, v351);
                            let v353 = constructor_output_reg(ctx, v352);
                            // Rule at src/isa/aarch64/lower.isle line 375.
                            return Some(v353);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v346 = constructor_vec_rrr(ctx, &VecALUOp::Fadd, v34, v35, v121);
                            let v347 = constructor_output_reg(ctx, v346);
                            // Rule at src/isa/aarch64/lower.isle line 372.
                            return Some(v347);
                        }
                        let v1791 = C::dynamic_lane(ctx, v3);
                        if let Some(v1792) = v1791 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v346 = constructor_vec_rrr(ctx, &VecALUOp::Fadd, v34, v35, v121);
                            let v1807 = C::value_reg(ctx, v346);
                            let v1808 = C::output(ctx, v1807);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 15.
                            return Some(v1808);
                        }
                    }
                }
                &Opcode::Fsub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v348 = C::ty_scalar_float(ctx, v3);
                        if let Some(v349) = v348 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v351 = &constructor_scalar_size(ctx, v349);
                            let v358 = constructor_fpu_rrr(ctx, &FPUOp2::Sub, v34, v35, v351);
                            let v359 = constructor_output_reg(ctx, v358);
                            // Rule at src/isa/aarch64/lower.isle line 383.
                            return Some(v359);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v355 = constructor_vec_rrr(ctx, &VecALUOp::Fsub, v34, v35, v121);
                            let v356 = constructor_output_reg(ctx, v355);
                            // Rule at src/isa/aarch64/lower.isle line 380.
                            return Some(v356);
                        }
                        let v1791 = C::dynamic_lane(ctx, v3);
                        if let Some(v1792) = v1791 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v355 = constructor_vec_rrr(ctx, &VecALUOp::Fsub, v34, v35, v121);
                            let v1809 = C::value_reg(ctx, v355);
                            let v1810 = C::output(ctx, v1809);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 19.
                            return Some(v1810);
                        }
                    }
                }
                &Opcode::Fmul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v348 = C::ty_scalar_float(ctx, v3);
                        if let Some(v349) = v348 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v351 = &constructor_scalar_size(ctx, v349);
                            let v364 = constructor_fpu_rrr(ctx, &FPUOp2::Mul, v34, v35, v351);
                            let v365 = constructor_output_reg(ctx, v364);
                            // Rule at src/isa/aarch64/lower.isle line 391.
                            return Some(v365);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v361 = constructor_vec_rrr(ctx, &VecALUOp::Fmul, v34, v35, v121);
                            let v362 = constructor_output_reg(ctx, v361);
                            // Rule at src/isa/aarch64/lower.isle line 388.
                            return Some(v362);
                        }
                        let v1791 = C::dynamic_lane(ctx, v3);
                        if let Some(v1792) = v1791 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v361 = constructor_vec_rrr(ctx, &VecALUOp::Fmul, v34, v35, v121);
                            let v1811 = C::value_reg(ctx, v361);
                            let v1812 = C::output(ctx, v1811);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 23.
                            return Some(v1812);
                        }
                    }
                }
                &Opcode::Fdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v348 = C::ty_scalar_float(ctx, v3);
                        if let Some(v349) = v348 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v351 = &constructor_scalar_size(ctx, v349);
                            let v370 = constructor_fpu_rrr(ctx, &FPUOp2::Div, v34, v35, v351);
                            let v371 = constructor_output_reg(ctx, v370);
                            // Rule at src/isa/aarch64/lower.isle line 399.
                            return Some(v371);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v367 = constructor_vec_rrr(ctx, &VecALUOp::Fdiv, v34, v35, v121);
                            let v368 = constructor_output_reg(ctx, v367);
                            // Rule at src/isa/aarch64/lower.isle line 396.
                            return Some(v368);
                        }
                        let v1791 = C::dynamic_lane(ctx, v3);
                        if let Some(v1792) = v1791 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v367 = constructor_vec_rrr(ctx, &VecALUOp::Fdiv, v34, v35, v121);
                            let v1813 = C::value_reg(ctx, v367);
                            let v1814 = C::output(ctx, v1813);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 27.
                            return Some(v1814);
                        }
                    }
                }
                &Opcode::Fcopysign => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v31 = C::unpack_value_array_2(ctx, v30);
                        let v34 = C::put_in_reg(ctx, v31.0);
                        let v35 = C::put_in_reg(ctx, v31.1);
                        let v3 = C::value_type(ctx, v2);
                        let v462 = constructor_fcopy_sign(ctx, v34, v35, v3);
                        let v463 = constructor_output_reg(ctx, v462);
                        // Rule at src/isa/aarch64/lower.isle line 557.
                        return Some(v463);
                    }
                }
                &Opcode::Fmin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v348 = C::ty_scalar_float(ctx, v3);
                        if let Some(v349) = v348 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v351 = &constructor_scalar_size(ctx, v349);
                            let v376 = constructor_fpu_rrr(ctx, &FPUOp2::Min, v34, v35, v351);
                            let v377 = constructor_output_reg(ctx, v376);
                            // Rule at src/isa/aarch64/lower.isle line 407.
                            return Some(v377);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v373 = constructor_vec_rrr(ctx, &VecALUOp::Fmin, v34, v35, v121);
                            let v374 = constructor_output_reg(ctx, v373);
                            // Rule at src/isa/aarch64/lower.isle line 404.
                            return Some(v374);
                        }
                        let v1791 = C::dynamic_lane(ctx, v3);
                        if let Some(v1792) = v1791 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v373 = constructor_vec_rrr(ctx, &VecALUOp::Fmin, v34, v35, v121);
                            let v1815 = C::value_reg(ctx, v373);
                            let v1816 = C::output(ctx, v1815);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 31.
                            return Some(v1816);
                        }
                    }
                }
                &Opcode::Fmax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v348 = C::ty_scalar_float(ctx, v3);
                        if let Some(v349) = v348 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v351 = &constructor_scalar_size(ctx, v349);
                            let v382 = constructor_fpu_rrr(ctx, &FPUOp2::Max, v34, v35, v351);
                            let v383 = constructor_output_reg(ctx, v382);
                            // Rule at src/isa/aarch64/lower.isle line 415.
                            return Some(v383);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v379 = constructor_vec_rrr(ctx, &VecALUOp::Fmax, v34, v35, v121);
                            let v380 = constructor_output_reg(ctx, v379);
                            // Rule at src/isa/aarch64/lower.isle line 412.
                            return Some(v380);
                        }
                        let v1791 = C::dynamic_lane(ctx, v3);
                        if let Some(v1792) = v1791 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v379 = constructor_vec_rrr(ctx, &VecALUOp::Fmax, v34, v35, v121);
                            let v1817 = C::value_reg(ctx, v379);
                            let v1818 = C::output(ctx, v1817);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 35.
                            return Some(v1818);
                        }
                    }
                }
                &Opcode::Snarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1394 = C::ty_vec64_int(ctx, v3);
                        if let Some(v1395) = v1394 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v1396 = constructor_mov_vec_elem(
                                ctx,
                                v34,
                                v35,
                                0x1,
                                0x0,
                                &VectorSize::Size64x2,
                            );
                            let v1397 = &constructor_lane_size(ctx, v1395);
                            let v1398 = constructor_sqxtn(ctx, v1396, v1397);
                            let v1399 = constructor_output_reg(ctx, v1398);
                            // Rule at src/isa/aarch64/lower.isle line 2126.
                            return Some(v1399);
                        }
                        let v1387 = C::ty_vec128_int(ctx, v3);
                        if let Some(v1388) = v1387 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1389 = C::zero_value(ctx, v31.1);
                            if let Some(v1390) = v1389 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v1391 = &constructor_lane_size(ctx, v1388);
                                let v1392 = constructor_sqxtn(ctx, v34, v1391);
                                let v1393 = constructor_output_reg(ctx, v1392);
                                // Rule at src/isa/aarch64/lower.isle line 2122.
                                return Some(v1393);
                            }
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v1391 = &constructor_lane_size(ctx, v1388);
                            let v1392 = constructor_sqxtn(ctx, v34, v1391);
                            let v1400 = C::put_in_reg(ctx, v31.1);
                            let v1401 = &constructor_lane_size(ctx, v1388);
                            let v1402 = constructor_sqxtn2(ctx, v1392, v1400, v1401);
                            let v1403 = constructor_output_reg(ctx, v1402);
                            // Rule at src/isa/aarch64/lower.isle line 2130.
                            return Some(v1403);
                        }
                        let v1824 = C::ty_dyn64_int(ctx, v3);
                        if let Some(v1825) = v1824 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v1396 = constructor_mov_vec_elem(
                                ctx,
                                v34,
                                v35,
                                0x1,
                                0x0,
                                &VectorSize::Size64x2,
                            );
                            let v1826 = &constructor_lane_size(ctx, v1825);
                            let v1827 = constructor_sqxtn(ctx, v1396, v1826);
                            let v1828 = constructor_output_reg(ctx, v1827);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 43.
                            return Some(v1828);
                        }
                        let v1819 = C::ty_dyn128_int(ctx, v3);
                        if let Some(v1820) = v1819 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1389 = C::zero_value(ctx, v31.1);
                            if let Some(v1390) = v1389 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v1821 = &constructor_lane_size(ctx, v1820);
                                let v1822 = constructor_sqxtn(ctx, v34, v1821);
                                let v1823 = constructor_output_reg(ctx, v1822);
                                // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 39.
                                return Some(v1823);
                            }
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v1821 = &constructor_lane_size(ctx, v1820);
                            let v1822 = constructor_sqxtn(ctx, v34, v1821);
                            let v1400 = C::put_in_reg(ctx, v31.1);
                            let v1829 = &constructor_lane_size(ctx, v1820);
                            let v1830 = constructor_sqxtn2(ctx, v1822, v1400, v1829);
                            let v1831 = constructor_output_reg(ctx, v1830);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 47.
                            return Some(v1831);
                        }
                    }
                }
                &Opcode::Unarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1394 = C::ty_vec64_int(ctx, v3);
                        if let Some(v1395) = v1394 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v1396 = constructor_mov_vec_elem(
                                ctx,
                                v34,
                                v35,
                                0x1,
                                0x0,
                                &VectorSize::Size64x2,
                            );
                            let v1397 = &constructor_lane_size(ctx, v1395);
                            let v1406 = constructor_sqxtun(ctx, v1396, v1397);
                            let v1407 = constructor_output_reg(ctx, v1406);
                            // Rule at src/isa/aarch64/lower.isle line 2141.
                            return Some(v1407);
                        }
                        let v1387 = C::ty_vec128_int(ctx, v3);
                        if let Some(v1388) = v1387 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1389 = C::zero_value(ctx, v31.1);
                            if let Some(v1390) = v1389 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v1391 = &constructor_lane_size(ctx, v1388);
                                let v1404 = constructor_sqxtun(ctx, v34, v1391);
                                let v1405 = constructor_output_reg(ctx, v1404);
                                // Rule at src/isa/aarch64/lower.isle line 2137.
                                return Some(v1405);
                            }
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v1391 = &constructor_lane_size(ctx, v1388);
                            let v1404 = constructor_sqxtun(ctx, v34, v1391);
                            let v1400 = C::put_in_reg(ctx, v31.1);
                            let v1401 = &constructor_lane_size(ctx, v1388);
                            let v1408 = constructor_sqxtun2(ctx, v1404, v1400, v1401);
                            let v1409 = constructor_output_reg(ctx, v1408);
                            // Rule at src/isa/aarch64/lower.isle line 2145.
                            return Some(v1409);
                        }
                        let v1824 = C::ty_dyn64_int(ctx, v3);
                        if let Some(v1825) = v1824 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v1396 = constructor_mov_vec_elem(
                                ctx,
                                v34,
                                v35,
                                0x1,
                                0x0,
                                &VectorSize::Size64x2,
                            );
                            let v1826 = &constructor_lane_size(ctx, v1825);
                            let v1834 = constructor_sqxtun(ctx, v1396, v1826);
                            let v1835 = constructor_output_reg(ctx, v1834);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 57.
                            return Some(v1835);
                        }
                        let v1819 = C::ty_dyn128_int(ctx, v3);
                        if let Some(v1820) = v1819 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1389 = C::zero_value(ctx, v31.1);
                            if let Some(v1390) = v1389 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v1821 = &constructor_lane_size(ctx, v1820);
                                let v1832 = constructor_sqxtun(ctx, v34, v1821);
                                let v1833 = constructor_output_reg(ctx, v1832);
                                // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 53.
                                return Some(v1833);
                            }
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v1821 = &constructor_lane_size(ctx, v1820);
                            let v1832 = constructor_sqxtun(ctx, v34, v1821);
                            let v1400 = C::put_in_reg(ctx, v31.1);
                            let v1829 = &constructor_lane_size(ctx, v1820);
                            let v1836 = constructor_sqxtun2(ctx, v1832, v1400, v1829);
                            let v1837 = constructor_output_reg(ctx, v1836);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 61.
                            return Some(v1837);
                        }
                    }
                }
                &Opcode::Uunarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1394 = C::ty_vec64_int(ctx, v3);
                        if let Some(v1395) = v1394 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v1396 = constructor_mov_vec_elem(
                                ctx,
                                v34,
                                v35,
                                0x1,
                                0x0,
                                &VectorSize::Size64x2,
                            );
                            let v1397 = &constructor_lane_size(ctx, v1395);
                            let v1412 = constructor_uqxtn(ctx, v1396, v1397);
                            let v1413 = constructor_output_reg(ctx, v1412);
                            // Rule at src/isa/aarch64/lower.isle line 2157.
                            return Some(v1413);
                        }
                        let v1387 = C::ty_vec128_int(ctx, v3);
                        if let Some(v1388) = v1387 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1389 = C::zero_value(ctx, v31.1);
                            if let Some(v1390) = v1389 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v1391 = &constructor_lane_size(ctx, v1388);
                                let v1410 = constructor_uqxtn(ctx, v34, v1391);
                                let v1411 = constructor_output_reg(ctx, v1410);
                                // Rule at src/isa/aarch64/lower.isle line 2153.
                                return Some(v1411);
                            }
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v1391 = &constructor_lane_size(ctx, v1388);
                            let v1410 = constructor_uqxtn(ctx, v34, v1391);
                            let v1400 = C::put_in_reg(ctx, v31.1);
                            let v1401 = &constructor_lane_size(ctx, v1388);
                            let v1414 = constructor_uqxtn2(ctx, v1410, v1400, v1401);
                            let v1415 = constructor_output_reg(ctx, v1414);
                            // Rule at src/isa/aarch64/lower.isle line 2161.
                            return Some(v1415);
                        }
                        let v1824 = C::ty_dyn64_int(ctx, v3);
                        if let Some(v1825) = v1824 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v1396 = constructor_mov_vec_elem(
                                ctx,
                                v34,
                                v35,
                                0x1,
                                0x0,
                                &VectorSize::Size64x2,
                            );
                            let v1826 = &constructor_lane_size(ctx, v1825);
                            let v1840 = constructor_uqxtn(ctx, v1396, v1826);
                            let v1841 = constructor_output_reg(ctx, v1840);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 71.
                            return Some(v1841);
                        }
                        let v1819 = C::ty_dyn128_int(ctx, v3);
                        if let Some(v1820) = v1819 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1389 = C::zero_value(ctx, v31.1);
                            if let Some(v1390) = v1389 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v1821 = &constructor_lane_size(ctx, v1820);
                                let v1838 = constructor_uqxtn(ctx, v34, v1821);
                                let v1839 = constructor_output_reg(ctx, v1838);
                                // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 67.
                                return Some(v1839);
                            }
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v1821 = &constructor_lane_size(ctx, v1820);
                            let v1838 = constructor_uqxtn(ctx, v34, v1821);
                            let v1400 = C::put_in_reg(ctx, v31.1);
                            let v1829 = &constructor_lane_size(ctx, v1820);
                            let v1842 = constructor_uqxtn2(ctx, v1838, v1400, v1829);
                            let v1843 = constructor_output_reg(ctx, v1842);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 75.
                            return Some(v1843);
                        }
                    }
                }
                &Opcode::IaddPairwise => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::Unary {
                                        opcode: ref v300,
                                        arg: v301,
                                    } = v40
                                    {
                                        match v300 {
                                            &Opcode::SwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::SwidenLow = v298 {
                                                            if v299 == v301 {
                                                                let v302 = C::put_in_reg(ctx, v299);
                                                                let v303 =
                                                                    constructor_saddlp8(ctx, v302);
                                                                let v304 = constructor_output_reg(
                                                                    ctx, v303,
                                                                );
                                                                // Rule at src/isa/aarch64/lower.isle line 322.
                                                                return Some(v304);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::UwidenLow = v298 {
                                                            if v299 == v301 {
                                                                let v302 = C::put_in_reg(ctx, v299);
                                                                let v307 =
                                                                    constructor_uaddlp8(ctx, v302);
                                                                let v308 = constructor_output_reg(
                                                                    ctx, v307,
                                                                );
                                                                // Rule at src/isa/aarch64/lower.isle line 330.
                                                                return Some(v308);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            I32X4 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::Unary {
                                        opcode: ref v300,
                                        arg: v301,
                                    } = v40
                                    {
                                        match v300 {
                                            &Opcode::SwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::SwidenLow = v298 {
                                                            if v299 == v301 {
                                                                let v302 = C::put_in_reg(ctx, v299);
                                                                let v305 =
                                                                    constructor_saddlp16(ctx, v302);
                                                                let v306 = constructor_output_reg(
                                                                    ctx, v305,
                                                                );
                                                                // Rule at src/isa/aarch64/lower.isle line 326.
                                                                return Some(v306);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::UwidenLow = v298 {
                                                            if v299 == v301 {
                                                                let v302 = C::put_in_reg(ctx, v299);
                                                                let v309 =
                                                                    constructor_uaddlp16(ctx, v302);
                                                                let v310 = constructor_output_reg(
                                                                    ctx, v309,
                                                                );
                                                                // Rule at src/isa/aarch64/lower.isle line 334.
                                                                return Some(v310);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                        let v31 = C::unpack_value_array_2(ctx, v30);
                        let v34 = C::put_in_reg(ctx, v31.0);
                        let v35 = C::put_in_reg(ctx, v31.1);
                        let v121 = &constructor_vector_size(ctx, v3);
                        let v311 = constructor_addp(ctx, v34, v35, v121);
                        let v312 = constructor_output_reg(ctx, v311);
                        // Rule at src/isa/aarch64/lower.isle line 337.
                        return Some(v312);
                    }
                }
                &Opcode::Iconcat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v239 = C::value_regs(ctx, v34, v35);
                            let v240 = C::output(ctx, v239);
                            // Rule at src/isa/aarch64/lower.isle line 255.
                            return Some(v240);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::BinaryImm8 {
            opcode: ref v1622,
            arg: v1623,
            imm: v1624,
        } => {
            match v1622 {
                &Opcode::Extractlane => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v348 = C::ty_scalar_float(ctx, v3);
                        if let Some(v349) = v348 {
                            let v1625 = C::u8_from_uimm8(ctx, v1624);
                            if v1625 == 0x0 {
                                let v1626 = constructor_output_value(ctx, v1623);
                                // Rule at src/isa/aarch64/lower.isle line 2464.
                                return Some(v1626);
                            }
                            let v1627 = C::put_in_reg(ctx, v1623);
                            let v1631 = C::value_type(ctx, v1623);
                            let v1632 = &constructor_vector_size(ctx, v1631);
                            let v1633 = constructor_fpu_move_from_vec(ctx, v1627, v1625, v1632);
                            let v1634 = constructor_output_reg(ctx, v1633);
                            // Rule at src/isa/aarch64/lower.isle line 2472.
                            return Some(v1634);
                        }
                        let v664 = C::ty_int(ctx, v3);
                        if let Some(v665) = v664 {
                            let v1627 = C::put_in_reg(ctx, v1623);
                            let v1628 = &constructor_scalar_size(ctx, v665);
                            let v1625 = C::u8_from_uimm8(ctx, v1624);
                            let v1629 = constructor_mov_from_vec(ctx, v1627, v1625, v1628);
                            let v1630 = constructor_output_reg(ctx, v1629);
                            // Rule at src/isa/aarch64/lower.isle line 2467.
                            return Some(v1630);
                        }
                    }
                }
                &Opcode::ExtractVector => {
                    if v1624 == 0x0 {
                        let v1627 = C::put_in_reg(ctx, v1623);
                        let v1852 = C::value_reg(ctx, v1627);
                        let v1853 = C::output(ctx, v1852);
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 87.
                        return Some(v1853);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::Call {
            opcode: ref v1474,
            args: v1475,
            func_ref: v1476,
        } => {
            match v1474 {
                &Opcode::Call => {
                    let v1478 = C::func_ref_data(ctx, v1476);
                    let v1477 = C::value_list_slice(ctx, v1475);
                    let v1482 = C::gen_call(ctx, v1478.0, v1478.1, v1478.2, v1477);
                    // Rule at src/isa/aarch64/lower.isle line 2241.
                    return Some(v1482);
                }
                &Opcode::ReturnCall => {
                    let v1478 = C::func_ref_data(ctx, v1476);
                    let v1477 = C::value_list_slice(ctx, v1475);
                    let v1496 = C::gen_return_call(ctx, v1478.0, v1478.1, v1478.2, v1477);
                    // Rule at src/isa/aarch64/lower.isle line 2255.
                    return Some(v1496);
                }
                _ => {}
            }
        }
        &InstructionData::CallIndirect {
            opcode: ref v1483,
            args: v1484,
            sig_ref: v1485,
        } => {
            match v1483 {
                &Opcode::CallIndirect => {
                    let v1486 = C::value_list_slice(ctx, v1484);
                    let v1487 = C::value_slice_unwrap(ctx, v1486);
                    if let Some(v1488) = v1487 {
                        let v1491 = C::gen_call_indirect(ctx, v1485, v1488.0, v1488.1);
                        // Rule at src/isa/aarch64/lower.isle line 2244.
                        return Some(v1491);
                    }
                }
                &Opcode::ReturnCallIndirect => {
                    let v1486 = C::value_list_slice(ctx, v1484);
                    let v1487 = C::value_slice_unwrap(ctx, v1486);
                    if let Some(v1488) = v1487 {
                        let v1497 = C::gen_return_call_indirect(ctx, v1485, v1488.0, v1488.1);
                        // Rule at src/isa/aarch64/lower.isle line 2258.
                        return Some(v1497);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::DynamicStackLoad {
            opcode: ref v1844,
            dynamic_stack_slot: v1845,
        } => {
            if let &Opcode::DynamicStackAddr = v1844 {
                let v1846 = C::temp_writable_reg(ctx, I64);
                let v1847 = &C::abi_dynamic_stackslot_addr(ctx, v1846, v1845);
                let v1848 = C::emit(ctx, v1847);
                let v1849 = C::writable_reg_to_reg(ctx, v1846);
                let v1850 = C::value_reg(ctx, v1849);
                let v1851 = C::output(ctx, v1850);
                // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 81.
                return Some(v1851);
            }
        }
        &InstructionData::FloatCompare {
            opcode: ref v1077,
            args: ref v1078,
            cond: ref v1079,
        } => {
            if let &Opcode::Fcmp = v1077 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v117 = C::multi_lane(ctx, v3);
                    if let Some(v118) = v117 {
                        let v1080 = C::unpack_value_array_2(ctx, v1078);
                        let v1085 = C::zero_value(ctx, v1080.1);
                        if let Some(v1086) = v1085 {
                            let v1083 = &C::fcmp_zero_cond_not_eq(ctx, v1079);
                            if let Some(v1084) = v1083 {
                                let v1087 = C::put_in_reg(ctx, v1080.0);
                                let v313 = &constructor_vector_size(ctx, v3);
                                let v1088 = constructor_fcmeq0(ctx, v1087, v313);
                                let v1089 = constructor_not(ctx, v1088, v313);
                                let v1090 = C::value_reg(ctx, v1089);
                                let v1091 = C::output(ctx, v1090);
                                // Rule at src/isa/aarch64/lower.isle line 1832.
                                return Some(v1091);
                            }
                            let v1092 = &C::fcmp_zero_cond(ctx, v1079);
                            if let Some(v1093) = v1092 {
                                let v1087 = C::put_in_reg(ctx, v1080.0);
                                let v313 = &constructor_vector_size(ctx, v3);
                                let v1094 = constructor_float_cmp_zero(ctx, v1093, v1087, v313);
                                let v1095 = C::value_reg(ctx, v1094);
                                let v1096 = C::output(ctx, v1095);
                                // Rule at src/isa/aarch64/lower.isle line 1838.
                                return Some(v1096);
                            }
                        }
                        let v1097 = C::zero_value(ctx, v1080.0);
                        if let Some(v1098) = v1097 {
                            let v1083 = &C::fcmp_zero_cond_not_eq(ctx, v1079);
                            if let Some(v1084) = v1083 {
                                let v1099 = C::put_in_reg(ctx, v1080.1);
                                let v313 = &constructor_vector_size(ctx, v3);
                                let v1100 = constructor_fcmeq0(ctx, v1099, v313);
                                let v1101 = constructor_not(ctx, v1100, v313);
                                let v1102 = C::value_reg(ctx, v1101);
                                let v1103 = C::output(ctx, v1102);
                                // Rule at src/isa/aarch64/lower.isle line 1844.
                                return Some(v1103);
                            }
                            let v1092 = &C::fcmp_zero_cond(ctx, v1079);
                            if let Some(v1093) = v1092 {
                                let v1099 = C::put_in_reg(ctx, v1080.1);
                                let v313 = &constructor_vector_size(ctx, v3);
                                let v1104 =
                                    constructor_float_cmp_zero_swap(ctx, v1093, v1099, v313);
                                let v1105 = C::value_reg(ctx, v1104);
                                let v1106 = C::output(ctx, v1105);
                                // Rule at src/isa/aarch64/lower.isle line 1850.
                                return Some(v1106);
                            }
                        }
                    }
                    let v1080 = C::unpack_value_array_2(ctx, v1078);
                    let v1107 = C::value_type(ctx, v1080.0);
                    let v1108 = C::ty_scalar_float(ctx, v1107);
                    if let Some(v1109) = v1108 {
                        let v1110 = &constructor_scalar_size(ctx, v1109);
                        let v1111 = C::put_in_reg(ctx, v1080.0);
                        let v1112 = C::put_in_reg(ctx, v1080.1);
                        let v1113 = &constructor_fpu_cmp(ctx, v1110, v1111, v1112);
                        let v1114 = &C::fp_cond_code(ctx, v1079);
                        let v1115 = &constructor_materialize_bool_result(ctx, v1114);
                        let v1116 = constructor_with_flags(ctx, v1113, v1115);
                        let v1117 = C::output(ctx, v1116);
                        // Rule at src/isa/aarch64/lower.isle line 1856.
                        return Some(v1117);
                    }
                    let v1118 = C::ty_vector_float(ctx, v1107);
                    if let Some(v1119) = v1118 {
                        let v1087 = C::put_in_reg(ctx, v1080.0);
                        let v1120 = C::put_in_reg(ctx, v1080.1);
                        let v1121 = &C::fp_cond_code(ctx, v1079);
                        let v1122 = constructor_vec_cmp(ctx, v1087, v1120, v1107, v1121);
                        let v1123 = constructor_output_reg(ctx, v1122);
                        // Rule at src/isa/aarch64/lower.isle line 1861.
                        return Some(v1123);
                    }
                }
            }
        }
        &InstructionData::FuncAddr {
            opcode: ref v1448,
            func_ref: v1449,
        } => {
            if let &Opcode::FuncAddr = v1448 {
                let v1450 = C::func_ref_data(ctx, v1449);
                let v1454 = C::box_external_name(ctx, v1450.1);
                let v1456 = constructor_load_ext_name(ctx, v1454, 0x0);
                let v1457 = constructor_output_reg(ctx, v1456);
                // Rule at src/isa/aarch64/lower.isle line 2220.
                return Some(v1457);
            }
        }
        &InstructionData::IntAddTrap {
            opcode: ref v1696,
            args: ref v1697,
            code: ref v1698,
        } => {
            if let &Opcode::UaddOverflowTrap = v1696 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v27 = C::fits_in_64(ctx, v3);
                    if let Some(v28) = v27 {
                        let v1699 = C::unpack_value_array_2(ctx, v1697);
                        let v1702 = C::put_in_reg(ctx, v1699.0);
                        let v1703 = C::put_in_reg(ctx, v1699.1);
                        let v1704 = &constructor_add_with_flags_paired(ctx, v28, v1702, v1703);
                        let v1705 = constructor_trap_if_overflow(ctx, v1704, v1698);
                        let v1706 = constructor_output_reg(ctx, v1705);
                        // Rule at src/isa/aarch64/lower.isle line 2569.
                        return Some(v1706);
                    }
                }
            }
        }
        &InstructionData::IntCompare {
            opcode: ref v1124,
            args: ref v1125,
            cond: ref v1126,
        } => {
            if let &Opcode::Icmp = v1124 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v117 = C::multi_lane(ctx, v3);
                    if let Some(v118) = v117 {
                        let v1127 = C::unpack_value_array_2(ctx, v1125);
                        let v1132 = C::zero_value(ctx, v1127.1);
                        if let Some(v1133) = v1132 {
                            let v1130 = &C::icmp_zero_cond_not_eq(ctx, v1126);
                            if let Some(v1131) = v1130 {
                                let v1134 = C::put_in_reg(ctx, v1127.0);
                                let v313 = &constructor_vector_size(ctx, v3);
                                let v1135 = constructor_cmeq0(ctx, v1134, v313);
                                let v1136 = constructor_not(ctx, v1135, v313);
                                let v1137 = C::value_reg(ctx, v1136);
                                let v1138 = C::output(ctx, v1137);
                                // Rule at src/isa/aarch64/lower.isle line 1867.
                                return Some(v1138);
                            }
                            let v1139 = &C::icmp_zero_cond(ctx, v1126);
                            if let Some(v1140) = v1139 {
                                let v1134 = C::put_in_reg(ctx, v1127.0);
                                let v313 = &constructor_vector_size(ctx, v3);
                                let v1141 = constructor_int_cmp_zero(ctx, v1140, v1134, v313);
                                let v1142 = C::value_reg(ctx, v1141);
                                let v1143 = C::output(ctx, v1142);
                                // Rule at src/isa/aarch64/lower.isle line 1873.
                                return Some(v1143);
                            }
                        }
                        let v1144 = C::zero_value(ctx, v1127.0);
                        if let Some(v1145) = v1144 {
                            let v1130 = &C::icmp_zero_cond_not_eq(ctx, v1126);
                            if let Some(v1131) = v1130 {
                                let v1146 = C::put_in_reg(ctx, v1127.1);
                                let v313 = &constructor_vector_size(ctx, v3);
                                let v1147 = constructor_cmeq0(ctx, v1146, v313);
                                let v1148 = constructor_not(ctx, v1147, v313);
                                let v1149 = C::value_reg(ctx, v1148);
                                let v1150 = C::output(ctx, v1149);
                                // Rule at src/isa/aarch64/lower.isle line 1879.
                                return Some(v1150);
                            }
                            let v1139 = &C::icmp_zero_cond(ctx, v1126);
                            if let Some(v1140) = v1139 {
                                let v1146 = C::put_in_reg(ctx, v1127.1);
                                let v313 = &constructor_vector_size(ctx, v3);
                                let v1151 = constructor_int_cmp_zero_swap(ctx, v1140, v1146, v313);
                                let v1152 = C::value_reg(ctx, v1151);
                                let v1153 = C::output(ctx, v1152);
                                // Rule at src/isa/aarch64/lower.isle line 1885.
                                return Some(v1153);
                            }
                        }
                    }
                }
                let v1127 = C::unpack_value_array_2(ctx, v1125);
                let v1154 = C::value_type(ctx, v1127.0);
                let v1156 =
                    constructor_lower_icmp_into_reg(ctx, v1126, v1127.0, v1127.1, v1154, I8);
                let v1157 = C::output(ctx, v1156);
                // Rule at src/isa/aarch64/lower.isle line 1891.
                return Some(v1157);
            }
        }
        &InstructionData::Load {
            opcode: ref v1498,
            arg: v1499,
            flags: v1500,
            offset: v1501,
        } => {
            match v1498 {
                &Opcode::Load => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v1502 = C::offset32_to_i32(ctx, v1501);
                                let v1503 = &constructor_amode(ctx, I8, v1499, v1502);
                                let v1504 = constructor_aarch64_uload8(ctx, v1503, v1500);
                                let v1505 = constructor_output_reg(ctx, v1504);
                                // Rule at src/isa/aarch64/lower.isle line 2263.
                                return Some(v1505);
                            }
                            I16 => {
                                let v1502 = C::offset32_to_i32(ctx, v1501);
                                let v1506 = &constructor_amode(ctx, I16, v1499, v1502);
                                let v1507 = constructor_aarch64_uload16(ctx, v1506, v1500);
                                let v1508 = constructor_output_reg(ctx, v1507);
                                // Rule at src/isa/aarch64/lower.isle line 2266.
                                return Some(v1508);
                            }
                            I32 => {
                                let v1502 = C::offset32_to_i32(ctx, v1501);
                                let v1509 = &constructor_amode(ctx, I32, v1499, v1502);
                                let v1510 = constructor_aarch64_uload32(ctx, v1509, v1500);
                                let v1511 = constructor_output_reg(ctx, v1510);
                                // Rule at src/isa/aarch64/lower.isle line 2269.
                                return Some(v1511);
                            }
                            I64 => {
                                let v1502 = C::offset32_to_i32(ctx, v1501);
                                let v1512 = &constructor_amode(ctx, I64, v1499, v1502);
                                let v1513 = constructor_aarch64_uload64(ctx, v1512, v1500);
                                let v1514 = constructor_output_reg(ctx, v1513);
                                // Rule at src/isa/aarch64/lower.isle line 2272.
                                return Some(v1514);
                            }
                            I128 => {
                                let v1502 = C::offset32_to_i32(ctx, v1501);
                                let v1521 = &constructor_pair_amode(ctx, v1499, v1502);
                                let v1522 = constructor_aarch64_loadp64(ctx, v1521, v1500);
                                let v1523 = C::output(ctx, v1522);
                                // Rule at src/isa/aarch64/lower.isle line 2284.
                                return Some(v1523);
                            }
                            R64 => {
                                let v1502 = C::offset32_to_i32(ctx, v1501);
                                let v1512 = &constructor_amode(ctx, I64, v1499, v1502);
                                let v1513 = constructor_aarch64_uload64(ctx, v1512, v1500);
                                let v1514 = constructor_output_reg(ctx, v1513);
                                // Rule at src/isa/aarch64/lower.isle line 2275.
                                return Some(v1514);
                            }
                            F32 => {
                                let v1502 = C::offset32_to_i32(ctx, v1501);
                                let v1515 = &constructor_amode(ctx, F32, v1499, v1502);
                                let v1516 = constructor_aarch64_fpuload32(ctx, v1515, v1500);
                                let v1517 = constructor_output_reg(ctx, v1516);
                                // Rule at src/isa/aarch64/lower.isle line 2278.
                                return Some(v1517);
                            }
                            F64 => {
                                let v1502 = C::offset32_to_i32(ctx, v1501);
                                let v1518 = &constructor_amode(ctx, F64, v1499, v1502);
                                let v1519 = constructor_aarch64_fpuload64(ctx, v1518, v1500);
                                let v1520 = constructor_output_reg(ctx, v1519);
                                // Rule at src/isa/aarch64/lower.isle line 2281.
                                return Some(v1520);
                            }
                            _ => {}
                        }
                        let v1524 = C::ty_vec64(ctx, v3);
                        if let Some(v1525) = v1524 {
                            let v1502 = C::offset32_to_i32(ctx, v1501);
                            let v1518 = &constructor_amode(ctx, F64, v1499, v1502);
                            let v1519 = constructor_aarch64_fpuload64(ctx, v1518, v1500);
                            let v1520 = constructor_output_reg(ctx, v1519);
                            // Rule at src/isa/aarch64/lower.isle line 2287.
                            return Some(v1520);
                        }
                        let v1530 = C::ty_dyn_vec64(ctx, v3);
                        if let Some(v1531) = v1530 {
                            let v1502 = C::offset32_to_i32(ctx, v1501);
                            let v1518 = &constructor_amode(ctx, F64, v1499, v1502);
                            let v1519 = constructor_aarch64_fpuload64(ctx, v1518, v1500);
                            let v1520 = constructor_output_reg(ctx, v1519);
                            // Rule at src/isa/aarch64/lower.isle line 2295.
                            return Some(v1520);
                        }
                        let v559 = C::ty_vec128(ctx, v3);
                        if let Some(v560) = v559 {
                            let v1502 = C::offset32_to_i32(ctx, v1501);
                            let v1527 = &constructor_amode(ctx, I8X16, v1499, v1502);
                            let v1528 = constructor_aarch64_fpuload128(ctx, v1527, v1500);
                            let v1529 = constructor_output_reg(ctx, v1528);
                            // Rule at src/isa/aarch64/lower.isle line 2291.
                            return Some(v1529);
                        }
                        let v1532 = C::ty_dyn_vec128(ctx, v3);
                        if let Some(v1533) = v1532 {
                            let v1502 = C::offset32_to_i32(ctx, v1501);
                            let v1527 = &constructor_amode(ctx, I8X16, v1499, v1502);
                            let v1528 = constructor_aarch64_fpuload128(ctx, v1527, v1500);
                            let v1529 = constructor_output_reg(ctx, v1528);
                            // Rule at src/isa/aarch64/lower.isle line 2299.
                            return Some(v1529);
                        }
                    }
                }
                &Opcode::Uload8 => {
                    let v1502 = C::offset32_to_i32(ctx, v1501);
                    let v1503 = &constructor_amode(ctx, I8, v1499, v1502);
                    let v1504 = constructor_aarch64_uload8(ctx, v1503, v1500);
                    let v1505 = constructor_output_reg(ctx, v1504);
                    // Rule at src/isa/aarch64/lower.isle line 2304.
                    return Some(v1505);
                }
                &Opcode::Sload8 => {
                    let v1502 = C::offset32_to_i32(ctx, v1501);
                    let v1503 = &constructor_amode(ctx, I8, v1499, v1502);
                    let v1534 = constructor_aarch64_sload8(ctx, v1503, v1500);
                    let v1535 = constructor_output_reg(ctx, v1534);
                    // Rule at src/isa/aarch64/lower.isle line 2307.
                    return Some(v1535);
                }
                &Opcode::Uload16 => {
                    let v1502 = C::offset32_to_i32(ctx, v1501);
                    let v1506 = &constructor_amode(ctx, I16, v1499, v1502);
                    let v1507 = constructor_aarch64_uload16(ctx, v1506, v1500);
                    let v1508 = constructor_output_reg(ctx, v1507);
                    // Rule at src/isa/aarch64/lower.isle line 2310.
                    return Some(v1508);
                }
                &Opcode::Sload16 => {
                    let v1502 = C::offset32_to_i32(ctx, v1501);
                    let v1506 = &constructor_amode(ctx, I16, v1499, v1502);
                    let v1536 = constructor_aarch64_sload16(ctx, v1506, v1500);
                    let v1537 = constructor_output_reg(ctx, v1536);
                    // Rule at src/isa/aarch64/lower.isle line 2313.
                    return Some(v1537);
                }
                &Opcode::Uload32 => {
                    let v1502 = C::offset32_to_i32(ctx, v1501);
                    let v1509 = &constructor_amode(ctx, I32, v1499, v1502);
                    let v1510 = constructor_aarch64_uload32(ctx, v1509, v1500);
                    let v1511 = constructor_output_reg(ctx, v1510);
                    // Rule at src/isa/aarch64/lower.isle line 2316.
                    return Some(v1511);
                }
                &Opcode::Sload32 => {
                    let v1502 = C::offset32_to_i32(ctx, v1501);
                    let v1509 = &constructor_amode(ctx, I32, v1499, v1502);
                    let v1538 = constructor_aarch64_sload32(ctx, v1509, v1500);
                    let v1539 = constructor_output_reg(ctx, v1538);
                    // Rule at src/isa/aarch64/lower.isle line 2319.
                    return Some(v1539);
                }
                &Opcode::Uload8x8 => {
                    let v1502 = C::offset32_to_i32(ctx, v1501);
                    let v1518 = &constructor_amode(ctx, F64, v1499, v1502);
                    let v1519 = constructor_aarch64_fpuload64(ctx, v1518, v1500);
                    let v1543 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Uxtl,
                        v1519,
                        false,
                        &ScalarSize::Size16,
                    );
                    let v1544 = constructor_output_reg(ctx, v1543);
                    // Rule at src/isa/aarch64/lower.isle line 2329.
                    return Some(v1544);
                }
                &Opcode::Sload8x8 => {
                    let v1502 = C::offset32_to_i32(ctx, v1501);
                    let v1518 = &constructor_amode(ctx, F64, v1499, v1502);
                    let v1519 = constructor_aarch64_fpuload64(ctx, v1518, v1500);
                    let v1541 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Sxtl,
                        v1519,
                        false,
                        &ScalarSize::Size16,
                    );
                    let v1542 = constructor_output_reg(ctx, v1541);
                    // Rule at src/isa/aarch64/lower.isle line 2323.
                    return Some(v1542);
                }
                &Opcode::Uload16x4 => {
                    let v1502 = C::offset32_to_i32(ctx, v1501);
                    let v1518 = &constructor_amode(ctx, F64, v1499, v1502);
                    let v1519 = constructor_aarch64_fpuload64(ctx, v1518, v1500);
                    let v1547 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Uxtl,
                        v1519,
                        false,
                        &ScalarSize::Size32,
                    );
                    let v1548 = constructor_output_reg(ctx, v1547);
                    // Rule at src/isa/aarch64/lower.isle line 2341.
                    return Some(v1548);
                }
                &Opcode::Sload16x4 => {
                    let v1502 = C::offset32_to_i32(ctx, v1501);
                    let v1518 = &constructor_amode(ctx, F64, v1499, v1502);
                    let v1519 = constructor_aarch64_fpuload64(ctx, v1518, v1500);
                    let v1545 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Sxtl,
                        v1519,
                        false,
                        &ScalarSize::Size32,
                    );
                    let v1546 = constructor_output_reg(ctx, v1545);
                    // Rule at src/isa/aarch64/lower.isle line 2335.
                    return Some(v1546);
                }
                &Opcode::Uload32x2 => {
                    let v1502 = C::offset32_to_i32(ctx, v1501);
                    let v1518 = &constructor_amode(ctx, F64, v1499, v1502);
                    let v1519 = constructor_aarch64_fpuload64(ctx, v1518, v1500);
                    let v1551 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Uxtl,
                        v1519,
                        false,
                        &ScalarSize::Size64,
                    );
                    let v1552 = constructor_output_reg(ctx, v1551);
                    // Rule at src/isa/aarch64/lower.isle line 2353.
                    return Some(v1552);
                }
                &Opcode::Sload32x2 => {
                    let v1502 = C::offset32_to_i32(ctx, v1501);
                    let v1518 = &constructor_amode(ctx, F64, v1499, v1502);
                    let v1519 = constructor_aarch64_fpuload64(ctx, v1518, v1500);
                    let v1549 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Sxtl,
                        v1519,
                        false,
                        &ScalarSize::Size64,
                    );
                    let v1550 = constructor_output_reg(ctx, v1549);
                    // Rule at src/isa/aarch64/lower.isle line 2347.
                    return Some(v1550);
                }
                _ => {}
            }
        }
        &InstructionData::LoadNoOffset {
            opcode: ref v1279,
            arg: v1280,
            flags: v1281,
        } => {
            match v1279 {
                &Opcode::Bitcast => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1604 = C::ty_float_or_vec(ctx, v3);
                        if let Some(v1605) = v1604 {
                            let v1606 = C::value_type(ctx, v1280);
                            let v1607 = C::ty_float_or_vec(ctx, v1606);
                            if let Some(v1608) = v1607 {
                                let v1609 = constructor_output_value(ctx, v1280);
                                // Rule at src/isa/aarch64/lower.isle line 2440.
                                return Some(v1609);
                            }
                            let v1610 = C::ty_int_ref_scalar_64(ctx, v1606);
                            if let Some(v1611) = v1610 {
                                let v1282 = C::put_in_reg(ctx, v1280);
                                let v1612 = &constructor_scalar_size(ctx, v1606);
                                let v1613 = constructor_mov_to_fpu(ctx, v1282, v1612);
                                let v1614 = constructor_output_reg(ctx, v1613);
                                // Rule at src/isa/aarch64/lower.isle line 2444.
                                return Some(v1614);
                            }
                        }
                        let v1063 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v1064) = v1063 {
                            let v1606 = C::value_type(ctx, v1280);
                            let v1615 = C::fits_in_64(ctx, v1606);
                            if let Some(v1616) = v1615 {
                                let v1617 = C::ty_float_or_vec(ctx, v1616);
                                if let Some(v1618) = v1617 {
                                    let v1282 = C::put_in_reg(ctx, v1280);
                                    let v1619 = &constructor_scalar_size(ctx, v3);
                                    let v1620 = constructor_mov_from_vec(ctx, v1282, 0x0, v1619);
                                    let v1621 = constructor_output_reg(ctx, v1620);
                                    // Rule at src/isa/aarch64/lower.isle line 2449.
                                    return Some(v1621);
                                }
                            }
                            let v1610 = C::ty_int_ref_scalar_64(ctx, v1606);
                            if let Some(v1611) = v1610 {
                                let v1609 = constructor_output_value(ctx, v1280);
                                // Rule at src/isa/aarch64/lower.isle line 2454.
                                return Some(v1609);
                            }
                        }
                        if v3 == I128 {
                            let v1606 = C::value_type(ctx, v1280);
                            if v1606 == I128 {
                                let v1609 = constructor_output_value(ctx, v1280);
                                // Rule at src/isa/aarch64/lower.isle line 2458.
                                return Some(v1609);
                            }
                        }
                    }
                }
                &Opcode::AtomicLoad => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1277 = C::valid_atomic_transaction(ctx, v3);
                        if let Some(v1278) = v1277 {
                            let v1282 = C::put_in_reg(ctx, v1280);
                            let v1283 = constructor_load_acquire(ctx, v1278, v1281, v1282);
                            let v1284 = constructor_output_reg(ctx, v1283);
                            // Rule at src/isa/aarch64/lower.isle line 2022.
                            return Some(v1284);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::MultiAry {
            opcode: ref v1492,
            args: v1493,
        } => {
            if let &Opcode::Return = v1492 {
                let v1494 = C::value_list_slice(ctx, v1493);
                let v1495 = constructor_lower_return(ctx, v1494);
                // Rule at src/isa/aarch64/lower.isle line 2250.
                return Some(v1495);
            }
        }
        &InstructionData::NullAry { opcode: ref v11 } => {
            match v11 {
                &Opcode::Debugtrap => {
                    let v1446 = &constructor_brk(ctx);
                    let v1447 = constructor_side_effect(ctx, v1446);
                    // Rule at src/isa/aarch64/lower.isle line 2215.
                    return Some(v1447);
                }
                &Opcode::GetPinnedReg => {
                    let v1599 = C::preg_pinned(ctx);
                    let v1600 = constructor_mov_from_preg(ctx, v1599);
                    let v1601 = constructor_output_reg(ctx, v1600);
                    // Rule at src/isa/aarch64/lower.isle line 2431.
                    return Some(v1601);
                }
                &Opcode::GetFramePointer => {
                    let v1468 = constructor_aarch64_fp(ctx);
                    let v1469 = constructor_output_reg(ctx, v1468);
                    // Rule at src/isa/aarch64/lower.isle line 2230.
                    return Some(v1469);
                }
                &Opcode::GetStackPointer => {
                    let v1470 = constructor_aarch64_sp(ctx);
                    let v1471 = constructor_output_reg(ctx, v1470);
                    // Rule at src/isa/aarch64/lower.isle line 2233.
                    return Some(v1471);
                }
                &Opcode::GetReturnAddress => {
                    let v1472 = constructor_aarch64_link(ctx);
                    let v1473 = constructor_output_reg(ctx, v1472);
                    // Rule at src/isa/aarch64/lower.isle line 2236.
                    return Some(v1473);
                }
                &Opcode::Null => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v13 = constructor_imm(ctx, v3, &ImmExtend::Zero, 0x0);
                        let v14 = constructor_output_reg(ctx, v13);
                        // Rule at src/isa/aarch64/lower.isle line 24.
                        return Some(v14);
                    }
                }
                &Opcode::Nop => {
                    let v25 = C::invalid_reg(ctx);
                    let v26 = constructor_output_reg(ctx, v25);
                    // Rule at src/isa/aarch64/lower.isle line 39.
                    return Some(v26);
                }
                &Opcode::Fence => {
                    let v1435 = &constructor_aarch64_fence(ctx);
                    let v1436 = constructor_side_effect(ctx, v1435);
                    // Rule at src/isa/aarch64/lower.isle line 2198.
                    return Some(v1436);
                }
                _ => {}
            }
        }
        &InstructionData::Shuffle {
            opcode: ref v137,
            args: ref v138,
            imm: v139,
        } => {
            if let &Opcode::Shuffle = v137 {
                let v143 = C::shuffle_dup8_from_imm(ctx, v139);
                if let Some(v144) = v143 {
                    let v140 = C::unpack_value_array_2(ctx, v138);
                    let v145 = C::put_in_reg(ctx, v140.0);
                    let v147 = constructor_vec_dup_from_fpu(ctx, v145, &VectorSize::Size8x16, v144);
                    let v148 = constructor_output_reg(ctx, v147);
                    // Rule at src/isa/aarch64/lower.isle line 127.
                    return Some(v148);
                }
                let v149 = C::shuffle_dup16_from_imm(ctx, v139);
                if let Some(v150) = v149 {
                    let v140 = C::unpack_value_array_2(ctx, v138);
                    let v145 = C::put_in_reg(ctx, v140.0);
                    let v152 = constructor_vec_dup_from_fpu(ctx, v145, &VectorSize::Size16x8, v150);
                    let v153 = constructor_output_reg(ctx, v152);
                    // Rule at src/isa/aarch64/lower.isle line 129.
                    return Some(v153);
                }
                let v154 = C::shuffle_dup32_from_imm(ctx, v139);
                if let Some(v155) = v154 {
                    let v140 = C::unpack_value_array_2(ctx, v138);
                    let v145 = C::put_in_reg(ctx, v140.0);
                    let v157 = constructor_vec_dup_from_fpu(ctx, v145, &VectorSize::Size32x4, v155);
                    let v158 = constructor_output_reg(ctx, v157);
                    // Rule at src/isa/aarch64/lower.isle line 131.
                    return Some(v158);
                }
                let v159 = C::shuffle_dup64_from_imm(ctx, v139);
                if let Some(v160) = v159 {
                    let v140 = C::unpack_value_array_2(ctx, v138);
                    let v145 = C::put_in_reg(ctx, v140.0);
                    let v162 = constructor_vec_dup_from_fpu(ctx, v145, &VectorSize::Size64x2, v160);
                    let v163 = constructor_output_reg(ctx, v162);
                    // Rule at src/isa/aarch64/lower.isle line 133.
                    return Some(v163);
                }
                let v164 = C::vec_extract_imm4_from_immediate(ctx, v139);
                if let Some(v165) = v164 {
                    let v140 = C::unpack_value_array_2(ctx, v138);
                    let v145 = C::put_in_reg(ctx, v140.0);
                    let v166 = C::put_in_reg(ctx, v140.1);
                    let v167 = constructor_vec_extract(ctx, v145, v166, v165);
                    let v168 = constructor_output_reg(ctx, v167);
                    // Rule at src/isa/aarch64/lower.isle line 152.
                    return Some(v168);
                }
                let v169 = C::u128_from_immediate(ctx, v139);
                if let Some(v170) = v169 {
                    match v170 {
                        0x8090A0B0C0D0E0F0001020304050607 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v217 = constructor_rev64(ctx, v145, &VectorSize::Size8x16);
                            let v218 = constructor_output_reg(ctx, v217);
                            // Rule at src/isa/aarch64/lower.isle line 228.
                            return Some(v218);
                        }
                        0x9080B0A0D0C0F0E0100030205040706 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v219 = constructor_rev64(ctx, v145, &VectorSize::Size16x8);
                            let v220 = constructor_output_reg(ctx, v219);
                            // Rule at src/isa/aarch64/lower.isle line 230.
                            return Some(v220);
                        }
                        0xB0A09080F0E0D0C0302010007060504 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v221 = constructor_rev64(ctx, v145, &VectorSize::Size32x4);
                            let v222 = constructor_output_reg(ctx, v221);
                            // Rule at src/isa/aarch64/lower.isle line 232.
                            return Some(v222);
                        }
                        0xC0D0E0F08090A0B0405060700010203 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v213 = constructor_rev32(ctx, v145, &VectorSize::Size8x16);
                            let v214 = constructor_output_reg(ctx, v213);
                            // Rule at src/isa/aarch64/lower.isle line 224.
                            return Some(v214);
                        }
                        0xD0C0F0E09080B0A0504070601000302 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v215 = constructor_rev32(ctx, v145, &VectorSize::Size16x8);
                            let v216 = constructor_output_reg(ctx, v215);
                            // Rule at src/isa/aarch64/lower.isle line 226.
                            return Some(v216);
                        }
                        0xE0F0C0D0A0B08090607040502030001 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v211 = constructor_rev16(ctx, v145, &VectorSize::Size8x16);
                            let v212 = constructor_output_reg(ctx, v211);
                            // Rule at src/isa/aarch64/lower.isle line 222.
                            return Some(v212);
                        }
                        0x17071606150514041303120211011000 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v187 = constructor_vec_zip1(ctx, v145, v166, &VectorSize::Size8x16);
                            let v188 = constructor_output_reg(ctx, v187);
                            // Rule at src/isa/aarch64/lower.isle line 184.
                            return Some(v188);
                        }
                        0x17160706151405041312030211100100 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v191 = constructor_vec_zip1(ctx, v145, v166, &VectorSize::Size16x8);
                            let v192 = constructor_output_reg(ctx, v191);
                            // Rule at src/isa/aarch64/lower.isle line 188.
                            return Some(v192);
                        }
                        0x17161514070605041312111003020100 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v195 = constructor_vec_zip1(ctx, v145, v166, &VectorSize::Size32x4);
                            let v196 = constructor_output_reg(ctx, v195);
                            // Rule at src/isa/aarch64/lower.isle line 192.
                            return Some(v196);
                        }
                        0x17161514131211100706050403020100 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v183 = constructor_vec_uzp1(ctx, v145, v166, &VectorSize::Size64x2);
                            let v184 = constructor_output_reg(ctx, v183);
                            // Rule at src/isa/aarch64/lower.isle line 177.
                            return Some(v184);
                        }
                        0x1B1A19180B0A09081312111003020100 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v207 = constructor_vec_trn1(ctx, v145, v166, &VectorSize::Size32x4);
                            let v208 = constructor_output_reg(ctx, v207);
                            // Rule at src/isa/aarch64/lower.isle line 210.
                            return Some(v208);
                        }
                        0x1B1A1918131211100B0A090803020100 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v179 = constructor_vec_uzp1(ctx, v145, v166, &VectorSize::Size32x4);
                            let v180 = constructor_output_reg(ctx, v179);
                            // Rule at src/isa/aarch64/lower.isle line 173.
                            return Some(v180);
                        }
                        0x1D1C0D0C191809081514050411100100 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v203 = constructor_vec_trn1(ctx, v145, v166, &VectorSize::Size16x8);
                            let v204 = constructor_output_reg(ctx, v203);
                            // Rule at src/isa/aarch64/lower.isle line 206.
                            return Some(v204);
                        }
                        0x1D1C1918151411100D0C090805040100 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v175 = constructor_vec_uzp1(ctx, v145, v166, &VectorSize::Size16x8);
                            let v176 = constructor_output_reg(ctx, v175);
                            // Rule at src/isa/aarch64/lower.isle line 169.
                            return Some(v176);
                        }
                        0x1E0E1C0C1A0A18081606140412021000 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v199 = constructor_vec_trn1(ctx, v145, v166, &VectorSize::Size8x16);
                            let v200 = constructor_output_reg(ctx, v199);
                            // Rule at src/isa/aarch64/lower.isle line 202.
                            return Some(v200);
                        }
                        0x1E1C1A18161412100E0C0A0806040200 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v171 = constructor_vec_uzp1(ctx, v145, v166, &VectorSize::Size8x16);
                            let v172 = constructor_output_reg(ctx, v171);
                            // Rule at src/isa/aarch64/lower.isle line 165.
                            return Some(v172);
                        }
                        0x1F0F1D0D1B0B19091707150513031101 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v201 = constructor_vec_trn2(ctx, v145, v166, &VectorSize::Size8x16);
                            let v202 = constructor_output_reg(ctx, v201);
                            // Rule at src/isa/aarch64/lower.isle line 204.
                            return Some(v202);
                        }
                        0x1F0F1E0E1D0D1C0C1B0B1A0A19091808 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v189 = constructor_vec_zip2(ctx, v145, v166, &VectorSize::Size8x16);
                            let v190 = constructor_output_reg(ctx, v189);
                            // Rule at src/isa/aarch64/lower.isle line 186.
                            return Some(v190);
                        }
                        0x1F1D1B19171513110F0D0B0907050301 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v173 = constructor_vec_uzp2(ctx, v145, v166, &VectorSize::Size8x16);
                            let v174 = constructor_output_reg(ctx, v173);
                            // Rule at src/isa/aarch64/lower.isle line 167.
                            return Some(v174);
                        }
                        0x1F1E0F0E1B1A0B0A1716070613120302 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v205 = constructor_vec_trn2(ctx, v145, v166, &VectorSize::Size16x8);
                            let v206 = constructor_output_reg(ctx, v205);
                            // Rule at src/isa/aarch64/lower.isle line 208.
                            return Some(v206);
                        }
                        0x1F1E0F0E1D1C0D0C1B1A0B0A19180908 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v193 = constructor_vec_zip2(ctx, v145, v166, &VectorSize::Size16x8);
                            let v194 = constructor_output_reg(ctx, v193);
                            // Rule at src/isa/aarch64/lower.isle line 190.
                            return Some(v194);
                        }
                        0x1F1E1B1A171613120F0E0B0A07060302 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v177 = constructor_vec_uzp2(ctx, v145, v166, &VectorSize::Size16x8);
                            let v178 = constructor_output_reg(ctx, v177);
                            // Rule at src/isa/aarch64/lower.isle line 171.
                            return Some(v178);
                        }
                        0x1F1E1D1C0F0E0D0C1716151407060504 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v209 = constructor_vec_trn2(ctx, v145, v166, &VectorSize::Size32x4);
                            let v210 = constructor_output_reg(ctx, v209);
                            // Rule at src/isa/aarch64/lower.isle line 212.
                            return Some(v210);
                        }
                        0x1F1E1D1C0F0E0D0C1B1A19180B0A0908 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v197 = constructor_vec_zip2(ctx, v145, v166, &VectorSize::Size32x4);
                            let v198 = constructor_output_reg(ctx, v197);
                            // Rule at src/isa/aarch64/lower.isle line 194.
                            return Some(v198);
                        }
                        0x1F1E1D1C171615140F0E0D0C07060504 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v181 = constructor_vec_uzp2(ctx, v145, v166, &VectorSize::Size32x4);
                            let v182 = constructor_output_reg(ctx, v181);
                            // Rule at src/isa/aarch64/lower.isle line 175.
                            return Some(v182);
                        }
                        0x1F1E1D1C1B1A19180F0E0D0C0B0A0908 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v185 = constructor_vec_uzp2(ctx, v145, v166, &VectorSize::Size64x2);
                            let v186 = constructor_output_reg(ctx, v185);
                            // Rule at src/isa/aarch64/lower.isle line 179.
                            return Some(v186);
                        }
                        _ => {}
                    }
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v223 = constructor_constant_f128(ctx, v170);
                        let v140 = C::unpack_value_array_2(ctx, v138);
                        let v224 = C::put_in_reg(ctx, v140.0);
                        let v225 = C::put_in_reg(ctx, v140.1);
                        let v3 = C::value_type(ctx, v2);
                        let v226 = constructor_vec_tbl2(ctx, v224, v225, v223, v3);
                        let v227 = constructor_output_reg(ctx, v226);
                        // Rule at src/isa/aarch64/lower.isle line 235.
                        return Some(v227);
                    }
                }
            }
        }
        &InstructionData::StackLoad {
            opcode: ref v1655,
            stack_slot: v1656,
            offset: v1657,
        } => {
            if let &Opcode::StackAddr = v1655 {
                let v1658 = constructor_compute_stack_addr(ctx, v1656, v1657);
                let v1659 = constructor_output_reg(ctx, v1658);
                // Rule at src/isa/aarch64/lower.isle line 2491.
                return Some(v1659);
            }
        }
        &InstructionData::Store {
            opcode: ref v1553,
            args: ref v1554,
            flags: v1555,
            offset: v1556,
        } => {
            match v1553 {
                &Opcode::Store => {
                    let v1557 = C::unpack_value_array_2(ctx, v1554);
                    let v1560 = C::value_type(ctx, v1557.0);
                    match v1560 {
                        I8 => {
                            let v1561 = C::offset32_to_i32(ctx, v1556);
                            let v1562 = &constructor_amode(ctx, I8, v1557.1, v1561);
                            let v1563 = C::put_in_reg(ctx, v1557.0);
                            let v1564 = &constructor_aarch64_store8(ctx, v1562, v1555, v1563);
                            let v1565 = constructor_side_effect(ctx, v1564);
                            // Rule at src/isa/aarch64/lower.isle line 2362.
                            return Some(v1565);
                        }
                        I16 => {
                            let v1561 = C::offset32_to_i32(ctx, v1556);
                            let v1566 = &constructor_amode(ctx, I16, v1557.1, v1561);
                            let v1563 = C::put_in_reg(ctx, v1557.0);
                            let v1567 = &constructor_aarch64_store16(ctx, v1566, v1555, v1563);
                            let v1568 = constructor_side_effect(ctx, v1567);
                            // Rule at src/isa/aarch64/lower.isle line 2366.
                            return Some(v1568);
                        }
                        I32 => {
                            let v1561 = C::offset32_to_i32(ctx, v1556);
                            let v1569 = &constructor_amode(ctx, I32, v1557.1, v1561);
                            let v1563 = C::put_in_reg(ctx, v1557.0);
                            let v1570 = &constructor_aarch64_store32(ctx, v1569, v1555, v1563);
                            let v1571 = constructor_side_effect(ctx, v1570);
                            // Rule at src/isa/aarch64/lower.isle line 2370.
                            return Some(v1571);
                        }
                        I64 => {
                            let v1561 = C::offset32_to_i32(ctx, v1556);
                            let v1572 = &constructor_amode(ctx, I64, v1557.1, v1561);
                            let v1563 = C::put_in_reg(ctx, v1557.0);
                            let v1573 = &constructor_aarch64_store64(ctx, v1572, v1555, v1563);
                            let v1574 = constructor_side_effect(ctx, v1573);
                            // Rule at src/isa/aarch64/lower.isle line 2374.
                            return Some(v1574);
                        }
                        I128 => {
                            let v1561 = C::offset32_to_i32(ctx, v1556);
                            let v1581 = &constructor_pair_amode(ctx, v1557.1, v1561);
                            let v1582 = C::put_in_regs(ctx, v1557.0);
                            let v1583 = C::value_regs_get(ctx, v1582, 0x0);
                            let v1584 = C::put_in_regs(ctx, v1557.0);
                            let v1585 = C::value_regs_get(ctx, v1584, 0x1);
                            let v1586 =
                                &constructor_aarch64_storep64(ctx, v1581, v1555, v1583, v1585);
                            let v1587 = constructor_side_effect(ctx, v1586);
                            // Rule at src/isa/aarch64/lower.isle line 2405.
                            return Some(v1587);
                        }
                        R64 => {
                            let v1561 = C::offset32_to_i32(ctx, v1556);
                            let v1572 = &constructor_amode(ctx, I64, v1557.1, v1561);
                            let v1563 = C::put_in_reg(ctx, v1557.0);
                            let v1573 = &constructor_aarch64_store64(ctx, v1572, v1555, v1563);
                            let v1574 = constructor_side_effect(ctx, v1573);
                            // Rule at src/isa/aarch64/lower.isle line 2378.
                            return Some(v1574);
                        }
                        F32 => {
                            let v1561 = C::offset32_to_i32(ctx, v1556);
                            let v1575 = &constructor_amode(ctx, F32, v1557.1, v1561);
                            let v1563 = C::put_in_reg(ctx, v1557.0);
                            let v1576 = &constructor_aarch64_fpustore32(ctx, v1575, v1555, v1563);
                            let v1577 = constructor_side_effect(ctx, v1576);
                            // Rule at src/isa/aarch64/lower.isle line 2396.
                            return Some(v1577);
                        }
                        F64 => {
                            let v1561 = C::offset32_to_i32(ctx, v1556);
                            let v1578 = &constructor_amode(ctx, F64, v1557.1, v1561);
                            let v1563 = C::put_in_reg(ctx, v1557.0);
                            let v1579 = &constructor_aarch64_fpustore64(ctx, v1578, v1555, v1563);
                            let v1580 = constructor_side_effect(ctx, v1579);
                            // Rule at src/isa/aarch64/lower.isle line 2400.
                            return Some(v1580);
                        }
                        _ => {}
                    }
                    let v1588 = C::ty_vec64(ctx, v1560);
                    if let Some(v1589) = v1588 {
                        let v1561 = C::offset32_to_i32(ctx, v1556);
                        let v1578 = &constructor_amode(ctx, F64, v1557.1, v1561);
                        let v1563 = C::put_in_reg(ctx, v1557.0);
                        let v1579 = &constructor_aarch64_fpustore64(ctx, v1578, v1555, v1563);
                        let v1580 = constructor_side_effect(ctx, v1579);
                        // Rule at src/isa/aarch64/lower.isle line 2412.
                        return Some(v1580);
                    }
                    let v1595 = C::ty_dyn_vec64(ctx, v1560);
                    if let Some(v1596) = v1595 {
                        let v1561 = C::offset32_to_i32(ctx, v1556);
                        let v1578 = &constructor_amode(ctx, F64, v1557.1, v1561);
                        let v1563 = C::put_in_reg(ctx, v1557.0);
                        let v1579 = &constructor_aarch64_fpustore64(ctx, v1578, v1555, v1563);
                        let v1580 = constructor_side_effect(ctx, v1579);
                        // Rule at src/isa/aarch64/lower.isle line 2420.
                        return Some(v1580);
                    }
                    let v1590 = C::ty_vec128(ctx, v1560);
                    if let Some(v1591) = v1590 {
                        let v1561 = C::offset32_to_i32(ctx, v1556);
                        let v1592 = &constructor_amode(ctx, I8X16, v1557.1, v1561);
                        let v1563 = C::put_in_reg(ctx, v1557.0);
                        let v1593 = &constructor_aarch64_fpustore128(ctx, v1592, v1555, v1563);
                        let v1594 = constructor_side_effect(ctx, v1593);
                        // Rule at src/isa/aarch64/lower.isle line 2416.
                        return Some(v1594);
                    }
                    let v1597 = C::ty_dyn_vec128(ctx, v1560);
                    if let Some(v1598) = v1597 {
                        let v1561 = C::offset32_to_i32(ctx, v1556);
                        let v1592 = &constructor_amode(ctx, I8X16, v1557.1, v1561);
                        let v1563 = C::put_in_reg(ctx, v1557.0);
                        let v1593 = &constructor_aarch64_fpustore128(ctx, v1592, v1555, v1563);
                        let v1594 = constructor_side_effect(ctx, v1593);
                        // Rule at src/isa/aarch64/lower.isle line 2424.
                        return Some(v1594);
                    }
                }
                &Opcode::Istore8 => {
                    let v1557 = C::unpack_value_array_2(ctx, v1554);
                    let v1561 = C::offset32_to_i32(ctx, v1556);
                    let v1562 = &constructor_amode(ctx, I8, v1557.1, v1561);
                    let v1563 = C::put_in_reg(ctx, v1557.0);
                    let v1564 = &constructor_aarch64_store8(ctx, v1562, v1555, v1563);
                    let v1565 = constructor_side_effect(ctx, v1564);
                    // Rule at src/isa/aarch64/lower.isle line 2383.
                    return Some(v1565);
                }
                &Opcode::Istore16 => {
                    let v1557 = C::unpack_value_array_2(ctx, v1554);
                    let v1561 = C::offset32_to_i32(ctx, v1556);
                    let v1566 = &constructor_amode(ctx, I16, v1557.1, v1561);
                    let v1563 = C::put_in_reg(ctx, v1557.0);
                    let v1567 = &constructor_aarch64_store16(ctx, v1566, v1555, v1563);
                    let v1568 = constructor_side_effect(ctx, v1567);
                    // Rule at src/isa/aarch64/lower.isle line 2387.
                    return Some(v1568);
                }
                &Opcode::Istore32 => {
                    let v1557 = C::unpack_value_array_2(ctx, v1554);
                    let v1561 = C::offset32_to_i32(ctx, v1556);
                    let v1569 = &constructor_amode(ctx, I32, v1557.1, v1561);
                    let v1563 = C::put_in_reg(ctx, v1557.0);
                    let v1570 = &constructor_aarch64_store32(ctx, v1569, v1555, v1563);
                    let v1571 = constructor_side_effect(ctx, v1570);
                    // Rule at src/isa/aarch64/lower.isle line 2391.
                    return Some(v1571);
                }
                _ => {}
            }
        }
        &InstructionData::StoreNoOffset {
            opcode: ref v1285,
            args: ref v1286,
            flags: v1287,
        } => {
            if let &Opcode::AtomicStore = v1285 {
                let v1288 = C::unpack_value_array_2(ctx, v1286);
                let v1291 = C::value_type(ctx, v1288.0);
                let v1292 = C::valid_atomic_transaction(ctx, v1291);
                if let Some(v1293) = v1292 {
                    let v1294 = C::put_in_reg(ctx, v1288.0);
                    let v1295 = C::put_in_reg(ctx, v1288.1);
                    let v1296 = &constructor_store_release(ctx, v1293, v1287, v1294, v1295);
                    let v1297 = constructor_side_effect(ctx, v1296);
                    // Rule at src/isa/aarch64/lower.isle line 2027.
                    return Some(v1297);
                }
            }
        }
        &InstructionData::Ternary {
            opcode: ref v445,
            args: ref v446,
        } => {
            match v445 {
                &Opcode::Select => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v447 = C::unpack_value_array_3(ctx, v446);
                        let v1162 = C::maybe_uextend(ctx, v447.0);
                        if let Some(v1163) = v1162 {
                            let v1164 = C::def_inst(ctx, v1163);
                            if let Some(v1165) = v1164 {
                                let v1166 = &C::inst_data(ctx, v1165);
                                match v1166 {
                                    &InstructionData::FloatCompare {
                                        opcode: ref v1180,
                                        args: ref v1181,
                                        cond: ref v1182,
                                    } => {
                                        if let &Opcode::Fcmp = v1180 {
                                            let v1187 = &C::fp_cond_code(ctx, v1182);
                                            let v1183 = C::unpack_value_array_2(ctx, v1181);
                                            let v1186 = C::value_type(ctx, v1183.0);
                                            let v1188 = &constructor_scalar_size(ctx, v1186);
                                            let v1189 = C::put_in_reg(ctx, v1183.0);
                                            let v1190 = C::put_in_reg(ctx, v1183.1);
                                            let v1191 =
                                                &constructor_fpu_cmp(ctx, v1188, v1189, v1190);
                                            let v3 = C::value_type(ctx, v2);
                                            let v1192 = constructor_lower_select(
                                                ctx, v1191, v1187, v3, v447.1, v447.2,
                                            );
                                            let v1193 = C::output(ctx, v1192);
                                            // Rule at src/isa/aarch64/lower.isle line 1919.
                                            return Some(v1193);
                                        }
                                    }
                                    &InstructionData::IntCompare {
                                        opcode: ref v1167,
                                        args: ref v1168,
                                        cond: ref v1169,
                                    } => {
                                        if let &Opcode::Icmp = v1167 {
                                            let v1170 = C::unpack_value_array_2(ctx, v1168);
                                            let v1173 = C::value_type(ctx, v1170.0);
                                            let v1174 = &constructor_lower_icmp_into_flags(
                                                ctx, v1169, v1170.0, v1170.1, v1173,
                                            );
                                            let v1175 = &constructor_flags_and_cc_flags(ctx, v1174);
                                            let v1176 = &constructor_flags_and_cc_cc(ctx, v1174);
                                            let v1177 = &C::cond_code(ctx, v1176);
                                            let v3 = C::value_type(ctx, v2);
                                            let v1178 = constructor_lower_select(
                                                ctx, v1175, v1177, v3, v447.1, v447.2,
                                            );
                                            let v1179 = C::output(ctx, v1178);
                                            // Rule at src/isa/aarch64/lower.isle line 1906.
                                            return Some(v1179);
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v1194 = C::value_type(ctx, v447.0);
                        if v1194 == I8 {
                            let v1071 = C::put_in_reg(ctx, v447.0);
                            let v1196 = C::u64_into_imm_logic(ctx, I32, 0xFF);
                            let v1197 = &constructor_tst_imm(ctx, I32, v1071, v1196);
                            let v3 = C::value_type(ctx, v2);
                            let v1198 =
                                constructor_lower_select(ctx, v1197, &Cond::Ne, v3, v447.1, v447.2);
                            let v1199 = C::output(ctx, v1198);
                            // Rule at src/isa/aarch64/lower.isle line 1928.
                            return Some(v1199);
                        }
                        let v1200 = C::fits_in_32(ctx, v1194);
                        if let Some(v1201) = v1200 {
                            let v1202 = constructor_put_in_reg_zext32(ctx, v447.0);
                            let v1203 = C::zero_reg(ctx);
                            let v1204 = &constructor_cmp(ctx, &OperandSize::Size32, v1202, v1203);
                            let v3 = C::value_type(ctx, v2);
                            let v1205 =
                                constructor_lower_select(ctx, v1204, &Cond::Ne, v3, v447.1, v447.2);
                            let v1206 = C::output(ctx, v1205);
                            // Rule at src/isa/aarch64/lower.isle line 1934.
                            return Some(v1206);
                        }
                        let v1207 = C::fits_in_64(ctx, v1194);
                        if let Some(v1208) = v1207 {
                            let v1209 = constructor_put_in_reg_zext64(ctx, v447.0);
                            let v1203 = C::zero_reg(ctx);
                            let v1210 = &constructor_cmp(ctx, &OperandSize::Size64, v1209, v1203);
                            let v3 = C::value_type(ctx, v2);
                            let v1211 =
                                constructor_lower_select(ctx, v1210, &Cond::Ne, v3, v447.1, v447.2);
                            let v1212 = C::output(ctx, v1211);
                            // Rule at src/isa/aarch64/lower.isle line 1940.
                            return Some(v1212);
                        }
                        if v1194 == I128 {
                            let v1213 = C::put_in_regs(ctx, v447.0);
                            let v1214 = C::value_regs_get(ctx, v1213, 0x0);
                            let v1215 = C::value_regs_get(ctx, v1213, 0x1);
                            let v1216 = constructor_orr(ctx, I64, v1214, v1215);
                            let v874 = C::zero_reg(ctx);
                            let v1217 = &constructor_cmp(ctx, &OperandSize::Size64, v1216, v874);
                            let v3 = C::value_type(ctx, v2);
                            let v1218 =
                                constructor_lower_select(ctx, v1217, &Cond::Ne, v3, v447.1, v447.2);
                            let v1219 = C::output(ctx, v1218);
                            // Rule at src/isa/aarch64/lower.isle line 1946.
                            return Some(v1219);
                        }
                    }
                }
                &Opcode::SelectSpectreGuard => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v447 = C::unpack_value_array_3(ctx, v446);
                        let v1162 = C::maybe_uextend(ctx, v447.0);
                        if let Some(v1163) = v1162 {
                            let v1164 = C::def_inst(ctx, v1163);
                            if let Some(v1165) = v1164 {
                                let v1166 = &C::inst_data(ctx, v1165);
                                if let &InstructionData::IntCompare {
                                    opcode: ref v1167,
                                    args: ref v1168,
                                    cond: ref v1169,
                                } = v1166
                                {
                                    if let &Opcode::Icmp = v1167 {
                                        let v1170 = C::unpack_value_array_2(ctx, v1168);
                                        let v1173 = C::value_type(ctx, v1170.0);
                                        let v1174 = &constructor_lower_icmp_into_flags(
                                            ctx, v1169, v1170.0, v1170.1, v1173,
                                        );
                                        let v1175 = &constructor_flags_and_cc_flags(ctx, v1174);
                                        let v1176 = &constructor_flags_and_cc_cc(ctx, v1174);
                                        let v1177 = &C::cond_code(ctx, v1176);
                                        let v3 = C::value_type(ctx, v2);
                                        let v1178 = constructor_lower_select(
                                            ctx, v1175, v1177, v3, v447.1, v447.2,
                                        );
                                        let v1220 = &constructor_csdb(ctx);
                                        let v1221 = constructor_side_effect(ctx, v1220);
                                        let v1222 = C::output(ctx, v1178);
                                        // Rule at src/isa/aarch64/lower.isle line 1957.
                                        return Some(v1222);
                                    }
                                }
                            }
                        }
                        let v1194 = C::value_type(ctx, v447.0);
                        let v1207 = C::fits_in_64(ctx, v1194);
                        if let Some(v1208) = v1207 {
                            let v1209 = constructor_put_in_reg_zext64(ctx, v447.0);
                            let v1203 = C::zero_reg(ctx);
                            let v1210 = &constructor_cmp(ctx, &OperandSize::Size64, v1209, v1203);
                            let v3 = C::value_type(ctx, v2);
                            let v1211 =
                                constructor_lower_select(ctx, v1210, &Cond::Ne, v3, v447.1, v447.2);
                            let v1212 = C::output(ctx, v1211);
                            // Rule at src/isa/aarch64/lower.isle line 1971.
                            return Some(v1212);
                        }
                        if v1194 == I128 {
                            let v1213 = C::put_in_regs(ctx, v447.0);
                            let v1214 = C::value_regs_get(ctx, v1213, 0x0);
                            let v1215 = C::value_regs_get(ctx, v1213, 0x1);
                            let v1216 = constructor_orr(ctx, I64, v1214, v1215);
                            let v874 = C::zero_reg(ctx);
                            let v1217 = &constructor_cmp(ctx, &OperandSize::Size64, v1216, v874);
                            let v3 = C::value_type(ctx, v2);
                            let v1218 =
                                constructor_lower_select(ctx, v1217, &Cond::Ne, v3, v447.1, v447.2);
                            let v1219 = C::output(ctx, v1218);
                            // Rule at src/isa/aarch64/lower.isle line 1977.
                            return Some(v1219);
                        }
                    }
                }
                &Opcode::Bitselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v559 = C::ty_vec128(ctx, v3);
                        if let Some(v560) = v559 {
                            let v447 = C::unpack_value_array_3(ctx, v446);
                            let v1071 = C::put_in_reg(ctx, v447.0);
                            let v1072 = C::put_in_reg(ctx, v447.1);
                            let v1073 = C::put_in_reg(ctx, v447.2);
                            let v1074 = constructor_bsl(ctx, v560, v1071, v1072, v1073);
                            let v1075 = constructor_output_reg(ctx, v1074);
                            // Rule at src/isa/aarch64/lower.isle line 1818.
                            return Some(v1075);
                        }
                        let v1063 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v1064) = v1063 {
                            let v447 = C::unpack_value_array_3(ctx, v446);
                            let v1065 = C::put_in_reg(ctx, v447.1);
                            let v453 = C::put_in_reg(ctx, v447.0);
                            let v1066 = constructor_and_reg(ctx, v3, v1065, v453);
                            let v455 = C::put_in_reg(ctx, v447.2);
                            let v1067 = C::put_in_reg(ctx, v447.0);
                            let v1068 = constructor_bic(ctx, v3, v455, v1067);
                            let v1069 = constructor_orr(ctx, v3, v1066, v1068);
                            let v1070 = constructor_output_reg(ctx, v1069);
                            // Rule at src/isa/aarch64/lower.isle line 1812.
                            return Some(v1070);
                        }
                    }
                }
                &Opcode::Fma => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v459 = &constructor_vector_size(ctx, v3);
                            let v447 = C::unpack_value_array_3(ctx, v446);
                            let v460 = constructor_lower_fmla(
                                ctx,
                                &VecALUModOp::Fmla,
                                v447.0,
                                v447.1,
                                v447.2,
                                v459,
                            );
                            let v461 = constructor_output_reg(ctx, v460);
                            // Rule at src/isa/aarch64/lower.isle line 502.
                            return Some(v461);
                        }
                        let v348 = C::ty_scalar_float(ctx, v3);
                        if let Some(v349) = v348 {
                            let v452 = &constructor_scalar_size(ctx, v349);
                            let v447 = C::unpack_value_array_3(ctx, v446);
                            let v453 = C::put_in_reg(ctx, v447.0);
                            let v454 = C::put_in_reg(ctx, v447.1);
                            let v455 = C::put_in_reg(ctx, v447.2);
                            let v456 =
                                constructor_fpu_rrrr(ctx, &FPUOp3::MAdd, v452, v453, v454, v455);
                            let v457 = constructor_output_reg(ctx, v456);
                            // Rule at src/isa/aarch64/lower.isle line 498.
                            return Some(v457);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref v1635,
            args: ref v1636,
            imm: v1637,
        } => {
            if let &Opcode::Insertlane = v1635 {
                let v1638 = C::unpack_value_array_2(ctx, v1636);
                let v1642 = C::value_type(ctx, v1638.1);
                let v1643 = C::ty_int(ctx, v1642);
                if let Some(v1644) = v1643 {
                    let v1646 = C::put_in_reg(ctx, v1638.0);
                    let v1647 = C::put_in_reg(ctx, v1638.1);
                    let v1641 = C::value_type(ctx, v1638.0);
                    let v1648 = &constructor_vector_size(ctx, v1641);
                    let v1645 = C::u8_from_uimm8(ctx, v1637);
                    let v1649 = constructor_mov_to_vec(ctx, v1646, v1647, v1645, v1648);
                    let v1650 = constructor_output_reg(ctx, v1649);
                    // Rule at src/isa/aarch64/lower.isle line 2479.
                    return Some(v1650);
                }
                let v1651 = C::ty_scalar_float(ctx, v1642);
                if let Some(v1652) = v1651 {
                    let v1646 = C::put_in_reg(ctx, v1638.0);
                    let v1647 = C::put_in_reg(ctx, v1638.1);
                    let v1641 = C::value_type(ctx, v1638.0);
                    let v1648 = &constructor_vector_size(ctx, v1641);
                    let v1645 = C::u8_from_uimm8(ctx, v1637);
                    let v1653 = constructor_mov_vec_elem(ctx, v1646, v1647, v1645, 0x0, v1648);
                    let v1654 = constructor_output_reg(ctx, v1653);
                    // Rule at src/isa/aarch64/lower.isle line 2484.
                    return Some(v1654);
                }
            }
        }
        &InstructionData::Trap {
            opcode: ref v1158,
            code: ref v1159,
        } => {
            match v1158 {
                &Opcode::Trap => {
                    let v1160 = &constructor_udf(ctx, v1159);
                    let v1161 = constructor_side_effect(ctx, v1160);
                    // Rule at src/isa/aarch64/lower.isle line 1896.
                    return Some(v1161);
                }
                &Opcode::ResumableTrap => {
                    let v1160 = &constructor_udf(ctx, v1159);
                    let v1161 = constructor_side_effect(ctx, v1160);
                    // Rule at src/isa/aarch64/lower.isle line 1901.
                    return Some(v1161);
                }
                _ => {}
            }
        }
        &InstructionData::Unary {
            opcode: ref v230,
            arg: v231,
        } => {
            match v230 {
                &Opcode::Splat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v713 = C::def_inst(ctx, v231);
                        if let Some(v714) = v713 {
                            let v715 = &C::inst_data(ctx, v714);
                            match v715 {
                                &InstructionData::Load {
                                    opcode: ref v1269,
                                    arg: v1270,
                                    flags: v1271,
                                    offset: v1272,
                                } => {
                                    if let &Opcode::Load = v1269 {
                                        let v728 = C::is_sinkable_inst(ctx, v231);
                                        if let Some(v729) = v728 {
                                            let v3 = C::value_type(ctx, v2);
                                            let v1273 = C::lane_type(ctx, v3);
                                            let v1274 =
                                                constructor_sink_load_into_addr(ctx, v1273, v729);
                                            let v313 = &constructor_vector_size(ctx, v3);
                                            let v1275 = constructor_ld1r(ctx, v1274, v313, v1271);
                                            let v1276 = constructor_output_reg(ctx, v1275);
                                            // Rule at src/isa/aarch64/lower.isle line 2016.
                                            return Some(v1276);
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v1259,
                                    arg: v1260,
                                } => {
                                    if let &Opcode::Ireduce = v1259 {
                                        let v1261 = C::def_inst(ctx, v1260);
                                        if let Some(v1262) = v1261 {
                                            let v1263 = &C::inst_data(ctx, v1262);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v1264,
                                                imm: v1265,
                                            } = v1263
                                            {
                                                if let &Opcode::Iconst = v1264 {
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v459 = &constructor_vector_size(ctx, v3);
                                                    let v1266 = C::u64_from_imm64(ctx, v1265);
                                                    let v1267 =
                                                        constructor_splat_const(ctx, v1266, v459);
                                                    let v1268 = constructor_output_reg(ctx, v1267);
                                                    // Rule at src/isa/aarch64/lower.isle line 2013.
                                                    return Some(v1268);
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryIeee32 {
                                    opcode: ref v1243,
                                    imm: v1244,
                                } => {
                                    if let &Opcode::F32const = v1243 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v459 = &constructor_vector_size(ctx, v3);
                                        let v1245 = C::u32_from_ieee32(ctx, v1244);
                                        let v1246 = C::u32_as_u64(ctx, v1245);
                                        let v1247 = constructor_splat_const(ctx, v1246, v459);
                                        let v1248 = constructor_output_reg(ctx, v1247);
                                        // Rule at src/isa/aarch64/lower.isle line 2004.
                                        return Some(v1248);
                                    }
                                }
                                &InstructionData::UnaryIeee64 {
                                    opcode: ref v1249,
                                    imm: v1250,
                                } => {
                                    if let &Opcode::F64const = v1249 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v459 = &constructor_vector_size(ctx, v3);
                                        let v1251 = C::u64_from_ieee64(ctx, v1250);
                                        let v1252 = constructor_splat_const(ctx, v1251, v459);
                                        let v1253 = constructor_output_reg(ctx, v1252);
                                        // Rule at src/isa/aarch64/lower.isle line 2007.
                                        return Some(v1253);
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v1254,
                                    imm: v1255,
                                } => {
                                    if let &Opcode::Iconst = v1254 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v459 = &constructor_vector_size(ctx, v3);
                                        let v1256 = C::u64_from_imm64(ctx, v1255);
                                        let v1257 = constructor_splat_const(ctx, v1256, v459);
                                        let v1258 = constructor_output_reg(ctx, v1257);
                                        // Rule at src/isa/aarch64/lower.isle line 2010.
                                        return Some(v1258);
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v232 = C::value_type(ctx, v231);
                        let v1235 = C::ty_int_ref_scalar_64(ctx, v232);
                        if let Some(v1236) = v1235 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v3 = C::value_type(ctx, v2);
                            let v313 = &constructor_vector_size(ctx, v3);
                            let v1237 = constructor_vec_dup(ctx, v241, v313);
                            let v1238 = constructor_output_reg(ctx, v1237);
                            // Rule at src/isa/aarch64/lower.isle line 1997.
                            return Some(v1238);
                        }
                        let v1239 = C::ty_scalar_float(ctx, v232);
                        if let Some(v1240) = v1239 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v3 = C::value_type(ctx, v2);
                            let v313 = &constructor_vector_size(ctx, v3);
                            let v1241 = constructor_vec_dup_from_fpu(ctx, v241, v313, 0x0);
                            let v1242 = constructor_output_reg(ctx, v1241);
                            // Rule at src/isa/aarch64/lower.isle line 2001.
                            return Some(v1242);
                        }
                    }
                }
                &Opcode::SetPinnedReg => {
                    let v241 = C::put_in_reg(ctx, v231);
                    let v1602 = &constructor_write_pinned_reg(ctx, v241);
                    let v1603 = constructor_side_effect(ctx, v1602);
                    // Rule at src/isa/aarch64/lower.isle line 2434.
                    return Some(v1603);
                }
                &Opcode::VanyTrue => {
                    let v241 = C::put_in_reg(ctx, v231);
                    let v232 = C::value_type(ctx, v231);
                    let v294 = &constructor_vanytrue(ctx, v241, v232);
                    let v295 = &constructor_materialize_bool_result(ctx, &Cond::Ne);
                    let v296 = constructor_with_flags(ctx, v294, v295);
                    let v297 = C::output(ctx, v296);
                    // Rule at src/isa/aarch64/lower.isle line 315.
                    return Some(v297);
                }
                &Opcode::VallTrue => {
                    let v232 = C::value_type(ctx, v231);
                    let v255 = C::multi_lane(ctx, v232);
                    if let Some(v256) = v255 {
                        match v256.0 {
                            0x20 => {
                                if v256.1 == 0x2 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v267 = constructor_mov_from_vec(
                                        ctx,
                                        v241,
                                        0x0,
                                        &ScalarSize::Size64,
                                    );
                                    let v269 = C::zero_reg(ctx);
                                    let v271 = &constructor_cmp_rr_shift(
                                        ctx,
                                        &OperandSize::Size64,
                                        v269,
                                        v267,
                                        0x20,
                                    );
                                    let v273 = C::u8_into_uimm5(ctx, 0x0);
                                    let v276 = C::nzcv(ctx, false, true, false, false);
                                    let v278 = &constructor_ccmp_imm(
                                        ctx,
                                        &OperandSize::Size32,
                                        v267,
                                        v273,
                                        v276,
                                        &Cond::Ne,
                                    );
                                    let v279 = constructor_with_flags(ctx, v271, v278);
                                    let v280 = C::output(ctx, v279);
                                    // Rule at src/isa/aarch64/lower.isle line 289.
                                    return Some(v280);
                                }
                            }
                            0x40 => {
                                if v256.1 == 0x2 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v259 = constructor_cmeq0(ctx, v241, &VectorSize::Size64x2);
                                    let v260 =
                                        constructor_addp(ctx, v259, v259, &VectorSize::Size64x2);
                                    let v261 =
                                        &constructor_fpu_cmp(ctx, &ScalarSize::Size64, v260, v260);
                                    let v263 = &constructor_materialize_bool_result(ctx, &Cond::Eq);
                                    let v264 = constructor_with_flags(ctx, v261, v263);
                                    let v265 = C::output(ctx, v264);
                                    // Rule at src/isa/aarch64/lower.isle line 283.
                                    return Some(v265);
                                }
                            }
                            _ => {}
                        }
                    }
                    let v281 = C::lane_fits_in_32(ctx, v232);
                    if let Some(v282) = v281 {
                        let v283 = C::not_vec32x2(ctx, v282);
                        if let Some(v284) = v283 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v286 = &constructor_vector_size(ctx, v282);
                            let v287 = constructor_vec_lanes(ctx, &VecLanesOp::Uminv, v241, v286);
                            let v288 =
                                constructor_mov_from_vec(ctx, v287, 0x0, &ScalarSize::Size64);
                            let v289 = C::u8_into_imm12(ctx, 0x0);
                            let v290 = &constructor_cmp_imm(ctx, &OperandSize::Size64, v288, v289);
                            let v291 = &constructor_materialize_bool_result(ctx, &Cond::Ne);
                            let v292 = constructor_with_flags(ctx, v290, v291);
                            let v293 = C::output(ctx, v292);
                            // Rule at src/isa/aarch64/lower.isle line 306.
                            return Some(v293);
                        }
                    }
                }
                &Opcode::VhighBits => {
                    let v232 = C::value_type(ctx, v231);
                    match v232 {
                        I8X16 => {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v1661 =
                                constructor_sshr_vec_imm(ctx, v241, 0x7, &VectorSize::Size8x16);
                            let v1663 =
                                constructor_constant_f128(ctx, 0x80402010080402018040201008040201);
                            let v1664 =
                                constructor_and_vec(ctx, v1661, v1663, &VectorSize::Size8x16);
                            let v1666 = constructor_vec_extract(ctx, v1664, v1664, 0x8);
                            let v1667 = constructor_zip1(ctx, v1664, v1666, &VectorSize::Size8x16);
                            let v1668 = constructor_addv(ctx, v1667, &VectorSize::Size16x8);
                            let v1669 =
                                constructor_mov_from_vec(ctx, v1668, 0x0, &ScalarSize::Size16);
                            let v1670 = constructor_output_reg(ctx, v1669);
                            // Rule at src/isa/aarch64/lower.isle line 2505.
                            return Some(v1670);
                        }
                        I16X8 => {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v1672 =
                                constructor_sshr_vec_imm(ctx, v241, 0xF, &VectorSize::Size16x8);
                            let v1674 =
                                constructor_constant_f128(ctx, 0x800040002000100008000400020001);
                            let v1675 =
                                constructor_and_vec(ctx, v1672, v1674, &VectorSize::Size16x8);
                            let v1676 = constructor_addv(ctx, v1675, &VectorSize::Size16x8);
                            let v1677 =
                                constructor_mov_from_vec(ctx, v1676, 0x0, &ScalarSize::Size16);
                            let v1678 = constructor_output_reg(ctx, v1677);
                            // Rule at src/isa/aarch64/lower.isle line 2529.
                            return Some(v1678);
                        }
                        I32X4 => {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v1680 =
                                constructor_sshr_vec_imm(ctx, v241, 0x1F, &VectorSize::Size32x4);
                            let v1682 = constructor_constant_f128(ctx, 0x8000000040000000200000001);
                            let v1683 =
                                constructor_and_vec(ctx, v1680, v1682, &VectorSize::Size32x4);
                            let v1684 = constructor_addv(ctx, v1683, &VectorSize::Size32x4);
                            let v1685 =
                                constructor_mov_from_vec(ctx, v1684, 0x0, &ScalarSize::Size32);
                            let v1686 = constructor_output_reg(ctx, v1685);
                            // Rule at src/isa/aarch64/lower.isle line 2542.
                            return Some(v1686);
                        }
                        I64X2 => {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v1687 =
                                constructor_mov_from_vec(ctx, v241, 0x1, &ScalarSize::Size64);
                            let v1688 = C::put_in_reg(ctx, v231);
                            let v1689 =
                                constructor_mov_from_vec(ctx, v1688, 0x0, &ScalarSize::Size64);
                            let v756 = C::imm_shift_from_u8(ctx, 0x3F);
                            let v1690 = constructor_lsr_imm(ctx, I64, v1687, v756);
                            let v1007 = C::imm_shift_from_u8(ctx, 0x3F);
                            let v1691 = constructor_lsr_imm(ctx, I64, v1689, v1007);
                            let v1692 = C::lshl_from_u64(ctx, I64, 0x1);
                            let v1693 = v1692?;
                            let v1694 = constructor_add_shift(ctx, I64, v1691, v1690, v1693);
                            let v1695 = constructor_output_reg(ctx, v1694);
                            // Rule at src/isa/aarch64/lower.isle line 2555.
                            return Some(v1695);
                        }
                        _ => {}
                    }
                }
                &Opcode::Ineg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v574 = constructor_value_regs_zero(ctx);
                            let v575 = C::put_in_regs(ctx, v231);
                            let v576 = constructor_sub_i128(ctx, v574, v575);
                            let v577 = C::output(ctx, v576);
                            // Rule at src/isa/aarch64/lower.isle line 733.
                            return Some(v577);
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v570 = C::zero_reg(ctx);
                            let v571 = C::put_in_reg(ctx, v231);
                            let v572 = constructor_sub(ctx, v28, v570, v571);
                            let v573 = constructor_output_reg(ctx, v572);
                            // Rule at src/isa/aarch64/lower.isle line 729.
                            return Some(v573);
                        }
                        let v559 = C::ty_vec128(ctx, v3);
                        if let Some(v560) = v559 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v578 = &constructor_vector_size(ctx, v560);
                            let v579 = constructor_neg(ctx, v241, v578);
                            let v580 = constructor_output_reg(ctx, v579);
                            // Rule at src/isa/aarch64/lower.isle line 737.
                            return Some(v580);
                        }
                    }
                }
                &Opcode::Iabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v316 = constructor_abs(ctx, &OperandSize::Size64, v241);
                            let v317 = constructor_output_reg(ctx, v316);
                            // Rule at src/isa/aarch64/lower.isle line 345.
                            return Some(v317);
                        }
                        let v318 = C::fits_in_32(ctx, v3);
                        if let Some(v319) = v318 {
                            let v320 = constructor_put_in_reg_sext32(ctx, v231);
                            let v321 = constructor_abs(ctx, &OperandSize::Size32, v320);
                            let v322 = constructor_output_reg(ctx, v321);
                            // Rule at src/isa/aarch64/lower.isle line 348.
                            return Some(v322);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v313 = &constructor_vector_size(ctx, v3);
                            let v314 = constructor_vec_abs(ctx, v241, v313);
                            let v315 = constructor_output_reg(ctx, v314);
                            // Rule at src/isa/aarch64/lower.isle line 342.
                            return Some(v315);
                        }
                    }
                }
                &Opcode::Bnot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v713 = C::def_inst(ctx, v231);
                        if let Some(v714) = v713 {
                            let v715 = &C::inst_data(ctx, v714);
                            if let &InstructionData::Binary {
                                opcode: ref v767,
                                args: ref v768,
                            } = v715
                            {
                                match v767 {
                                    &Opcode::Bxor => {
                                        let v3 = C::value_type(ctx, v2);
                                        if v3 == I128 {
                                            let v769 = C::unpack_value_array_2(ctx, v768);
                                            let v794 = constructor_i128_alu_bitop(
                                                ctx,
                                                &ALUOp::EorNot,
                                                I64,
                                                v769.0,
                                                v769.1,
                                            );
                                            let v795 = C::output(ctx, v794);
                                            // Rule at src/isa/aarch64/lower.isle line 1205.
                                            return Some(v795);
                                        }
                                        let v27 = C::fits_in_64(ctx, v3);
                                        if let Some(v28) = v27 {
                                            let v769 = C::unpack_value_array_2(ctx, v768);
                                            let v792 = constructor_alu_rs_imm_logic(
                                                ctx,
                                                &ALUOp::EorNot,
                                                v28,
                                                v769.0,
                                                v769.1,
                                            );
                                            let v793 = constructor_output_reg(ctx, v792);
                                            // Rule at src/isa/aarch64/lower.isle line 1203.
                                            return Some(v793);
                                        }
                                    }
                                    &Opcode::Ishl => {
                                        let v3 = C::value_type(ctx, v2);
                                        let v27 = C::fits_in_64(ctx, v3);
                                        if let Some(v28) = v27 {
                                            let v769 = C::unpack_value_array_2(ctx, v768);
                                            let v772 = C::def_inst(ctx, v769.1);
                                            if let Some(v773) = v772 {
                                                let v774 = &C::inst_data(ctx, v773);
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v775,
                                                    imm: v776,
                                                } = v774
                                                {
                                                    if let &Opcode::Iconst = v775 {
                                                        let v777 =
                                                            C::lshl_from_imm64(ctx, v28, v776);
                                                        if let Some(v778) = v777 {
                                                            let v570 = C::zero_reg(ctx);
                                                            let v779 = C::put_in_reg(ctx, v769.0);
                                                            let v780 = constructor_orr_not_shift(
                                                                ctx, v28, v570, v779, v778,
                                                            );
                                                            let v781 =
                                                                constructor_output_reg(ctx, v780);
                                                            // Rule at src/isa/aarch64/lower.isle line 1184.
                                                            return Some(v781);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v233 = C::put_in_regs(ctx, v231);
                            let v234 = C::value_regs_get(ctx, v233, 0x0);
                            let v782 = C::value_regs_get(ctx, v233, 0x1);
                            let v783 = C::zero_reg(ctx);
                            let v784 = constructor_orr_not(ctx, I64, v783, v234);
                            let v785 = C::zero_reg(ctx);
                            let v786 = constructor_orr_not(ctx, I64, v785, v782);
                            let v787 = C::value_regs(ctx, v784, v786);
                            let v788 = C::output(ctx, v787);
                            // Rule at src/isa/aarch64/lower.isle line 1190.
                            return Some(v788);
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v570 = C::zero_reg(ctx);
                            let v571 = C::put_in_reg(ctx, v231);
                            let v765 = constructor_orr_not(ctx, v28, v570, v571);
                            let v766 = constructor_output_reg(ctx, v765);
                            // Rule at src/isa/aarch64/lower.isle line 1179.
                            return Some(v766);
                        }
                        let v559 = C::ty_vec128(ctx, v3);
                        if let Some(v560) = v559 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v578 = &constructor_vector_size(ctx, v560);
                            let v789 = constructor_not(ctx, v241, v578);
                            let v790 = constructor_output_reg(ctx, v789);
                            // Rule at src/isa/aarch64/lower.isle line 1199.
                            return Some(v790);
                        }
                    }
                }
                &Opcode::Bitrev => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v959 = constructor_rbit(ctx, I32, v241);
                                let v961 = C::imm_shift_from_u8(ctx, 0x18);
                                let v962 = constructor_lsr_imm(ctx, I32, v959, v961);
                                let v963 = constructor_output_reg(ctx, v962);
                                // Rule at src/isa/aarch64/lower.isle line 1634.
                                return Some(v963);
                            }
                            I16 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v959 = constructor_rbit(ctx, I32, v241);
                                let v965 = C::imm_shift_from_u8(ctx, 0x10);
                                let v966 = constructor_lsr_imm(ctx, I32, v959, v965);
                                let v967 = constructor_output_reg(ctx, v966);
                                // Rule at src/isa/aarch64/lower.isle line 1640.
                                return Some(v967);
                            }
                            I128 => {
                                let v233 = C::put_in_regs(ctx, v231);
                                let v234 = C::value_regs_get(ctx, v233, 0x0);
                                let v968 = constructor_rbit(ctx, I64, v234);
                                let v236 = C::value_regs_get(ctx, v233, 0x1);
                                let v969 = constructor_rbit(ctx, I64, v236);
                                let v970 = C::value_regs(ctx, v969, v968);
                                let v971 = C::output(ctx, v970);
                                // Rule at src/isa/aarch64/lower.isle line 1643.
                                return Some(v971);
                            }
                            _ => {}
                        }
                        let v241 = C::put_in_reg(ctx, v231);
                        let v972 = constructor_rbit(ctx, v3, v241);
                        let v973 = constructor_output_reg(ctx, v972);
                        // Rule at src/isa/aarch64/lower.isle line 1649.
                        return Some(v973);
                    }
                }
                &Opcode::Clz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v252 = constructor_put_in_reg_zext32(ctx, v231);
                                let v974 = constructor_a64_clz(ctx, I32, v252);
                                let v975 = C::u8_into_imm12(ctx, 0x18);
                                let v976 = constructor_sub_imm(ctx, I32, v974, v975);
                                let v977 = constructor_output_reg(ctx, v976);
                                // Rule at src/isa/aarch64/lower.isle line 1655.
                                return Some(v977);
                            }
                            I16 => {
                                let v252 = constructor_put_in_reg_zext32(ctx, v231);
                                let v974 = constructor_a64_clz(ctx, I32, v252);
                                let v978 = C::u8_into_imm12(ctx, 0x10);
                                let v979 = constructor_sub_imm(ctx, I32, v974, v978);
                                let v980 = constructor_output_reg(ctx, v979);
                                // Rule at src/isa/aarch64/lower.isle line 1658.
                                return Some(v980);
                            }
                            I128 => {
                                let v233 = C::put_in_regs(ctx, v231);
                                let v981 = constructor_lower_clz128(ctx, v233);
                                let v982 = C::output(ctx, v981);
                                // Rule at src/isa/aarch64/lower.isle line 1661.
                                return Some(v982);
                            }
                            _ => {}
                        }
                        let v241 = C::put_in_reg(ctx, v231);
                        let v983 = constructor_a64_clz(ctx, v3, v241);
                        let v984 = constructor_output_reg(ctx, v983);
                        // Rule at src/isa/aarch64/lower.isle line 1664.
                        return Some(v984);
                    }
                }
                &Opcode::Cls => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v320 = constructor_put_in_reg_sext32(ctx, v231);
                                let v999 = constructor_a64_cls(ctx, I32, v320);
                                let v975 = C::u8_into_imm12(ctx, 0x18);
                                let v1000 = constructor_sub_imm(ctx, I32, v999, v975);
                                let v1001 = constructor_output_reg(ctx, v1000);
                                // Rule at src/isa/aarch64/lower.isle line 1702.
                                return Some(v1001);
                            }
                            I16 => {
                                let v320 = constructor_put_in_reg_sext32(ctx, v231);
                                let v999 = constructor_a64_cls(ctx, I32, v320);
                                let v978 = C::u8_into_imm12(ctx, 0x10);
                                let v1002 = constructor_sub_imm(ctx, I32, v999, v978);
                                let v1003 = constructor_output_reg(ctx, v1002);
                                // Rule at src/isa/aarch64/lower.isle line 1705.
                                return Some(v1003);
                            }
                            I128 => {
                                let v233 = C::put_in_regs(ctx, v231);
                                let v234 = C::value_regs_get(ctx, v233, 0x0);
                                let v782 = C::value_regs_get(ctx, v233, 0x1);
                                let v1004 = constructor_a64_cls(ctx, I64, v234);
                                let v1005 = constructor_a64_cls(ctx, I64, v782);
                                let v1006 = constructor_eon(ctx, I64, v782, v234);
                                let v1007 = C::imm_shift_from_u8(ctx, 0x3F);
                                let v1008 = constructor_lsr_imm(ctx, I64, v1006, v1007);
                                let v1009 = constructor_madd(ctx, I64, v1004, v1008, v1008);
                                let v1010 = C::u8_into_imm12(ctx, 0x3F);
                                let v1011 = &constructor_cmp64_imm(ctx, v1005, v1010);
                                let v1012 = C::zero_reg(ctx);
                                let v1013 = &constructor_csel(ctx, &Cond::Eq, v1009, v1012);
                                let v1014 = constructor_with_flags_reg(ctx, v1011, v1013);
                                let v1015 = constructor_add(ctx, I64, v1014, v1005);
                                let v1016 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
                                let v1017 = C::value_regs(ctx, v1015, v1016);
                                let v1018 = C::output(ctx, v1017);
                                // Rule at src/isa/aarch64/lower.isle line 1717.
                                return Some(v1018);
                            }
                            _ => {}
                        }
                        let v241 = C::put_in_reg(ctx, v231);
                        let v1019 = constructor_a64_cls(ctx, v3, v241);
                        let v1020 = constructor_output_reg(ctx, v1019);
                        // Rule at src/isa/aarch64/lower.isle line 1731.
                        return Some(v1020);
                    }
                }
                &Opcode::Ctz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v959 = constructor_rbit(ctx, I32, v241);
                                let v986 = C::u64_into_imm_logic(ctx, I32, 0x800000);
                                let v987 = constructor_orr_imm(ctx, I32, v959, v986);
                                let v988 = constructor_a64_clz(ctx, I32, v987);
                                let v989 = constructor_output_reg(ctx, v988);
                                // Rule at src/isa/aarch64/lower.isle line 1685.
                                return Some(v989);
                            }
                            I16 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v959 = constructor_rbit(ctx, I32, v241);
                                let v991 = C::u64_into_imm_logic(ctx, I32, 0x8000);
                                let v992 = constructor_orr_imm(ctx, I32, v959, v991);
                                let v993 = constructor_a64_clz(ctx, I32, v992);
                                let v994 = constructor_output_reg(ctx, v993);
                                // Rule at src/isa/aarch64/lower.isle line 1688.
                                return Some(v994);
                            }
                            I128 => {
                                let v233 = C::put_in_regs(ctx, v231);
                                let v234 = C::value_regs_get(ctx, v233, 0x0);
                                let v968 = constructor_rbit(ctx, I64, v234);
                                let v236 = C::value_regs_get(ctx, v233, 0x1);
                                let v969 = constructor_rbit(ctx, I64, v236);
                                let v970 = C::value_regs(ctx, v969, v968);
                                let v995 = constructor_lower_clz128(ctx, v970);
                                let v996 = C::output(ctx, v995);
                                // Rule at src/isa/aarch64/lower.isle line 1691.
                                return Some(v996);
                            }
                            _ => {}
                        }
                        let v241 = C::put_in_reg(ctx, v231);
                        let v972 = constructor_rbit(ctx, v3, v241);
                        let v997 = constructor_a64_clz(ctx, v3, v972);
                        let v998 = constructor_output_reg(ctx, v997);
                        // Rule at src/isa/aarch64/lower.isle line 1697.
                        return Some(v998);
                    }
                }
                &Opcode::Bswap => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v1022 = constructor_a64_rev16(ctx, I16, v241);
                                let v1023 = constructor_output_reg(ctx, v1022);
                                // Rule at src/isa/aarch64/lower.isle line 1736.
                                return Some(v1023);
                            }
                            I32 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v1024 = constructor_a64_rev32(ctx, I32, v241);
                                let v1025 = constructor_output_reg(ctx, v1024);
                                // Rule at src/isa/aarch64/lower.isle line 1739.
                                return Some(v1025);
                            }
                            I64 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v1026 = constructor_a64_rev64(ctx, I64, v241);
                                let v1027 = constructor_output_reg(ctx, v1026);
                                // Rule at src/isa/aarch64/lower.isle line 1742.
                                return Some(v1027);
                            }
                            I128 => {
                                let v233 = C::put_in_regs(ctx, v231);
                                let v1028 = C::value_regs_get(ctx, v233, 0x1);
                                let v1029 = constructor_a64_rev64(ctx, I64, v1028);
                                let v1030 = C::put_in_regs(ctx, v231);
                                let v1031 = C::value_regs_get(ctx, v1030, 0x0);
                                let v1032 = constructor_a64_rev64(ctx, I64, v1031);
                                let v1033 = C::value_regs(ctx, v1029, v1032);
                                let v1034 = C::output(ctx, v1033);
                                // Rule at src/isa/aarch64/lower.isle line 1745.
                                return Some(v1034);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Popcnt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v1037 = constructor_mov_to_fpu(ctx, v241, &ScalarSize::Size32);
                                let v1039 = constructor_vec_cnt(ctx, v1037, &VectorSize::Size8x8);
                                let v1041 =
                                    constructor_mov_from_vec(ctx, v1039, 0x0, &ScalarSize::Size8);
                                let v1042 = constructor_output_reg(ctx, v1041);
                                // Rule at src/isa/aarch64/lower.isle line 1775.
                                return Some(v1042);
                            }
                            I16 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v1037 = constructor_mov_to_fpu(ctx, v241, &ScalarSize::Size32);
                                let v1039 = constructor_vec_cnt(ctx, v1037, &VectorSize::Size8x8);
                                let v1043 =
                                    constructor_addp(ctx, v1039, v1039, &VectorSize::Size8x8);
                                let v1044 =
                                    constructor_mov_from_vec(ctx, v1043, 0x0, &ScalarSize::Size8);
                                let v1045 = constructor_output_reg(ctx, v1044);
                                // Rule at src/isa/aarch64/lower.isle line 1781.
                                return Some(v1045);
                            }
                            I32 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v1037 = constructor_mov_to_fpu(ctx, v241, &ScalarSize::Size32);
                                let v1039 = constructor_vec_cnt(ctx, v1037, &VectorSize::Size8x8);
                                let v1046 = constructor_addv(ctx, v1039, &VectorSize::Size8x8);
                                let v1047 =
                                    constructor_mov_from_vec(ctx, v1046, 0x0, &ScalarSize::Size8);
                                let v1048 = constructor_output_reg(ctx, v1047);
                                // Rule at src/isa/aarch64/lower.isle line 1787.
                                return Some(v1048);
                            }
                            I64 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v248 = constructor_mov_to_fpu(ctx, v241, &ScalarSize::Size64);
                                let v1049 = constructor_vec_cnt(ctx, v248, &VectorSize::Size8x8);
                                let v1050 = constructor_addv(ctx, v1049, &VectorSize::Size8x8);
                                let v1051 =
                                    constructor_mov_from_vec(ctx, v1050, 0x0, &ScalarSize::Size8);
                                let v1052 = constructor_output_reg(ctx, v1051);
                                // Rule at src/isa/aarch64/lower.isle line 1793.
                                return Some(v1052);
                            }
                            I128 => {
                                let v233 = C::put_in_regs(ctx, v231);
                                let v234 = C::value_regs_get(ctx, v233, 0x0);
                                let v1053 = constructor_mov_to_fpu(ctx, v234, &ScalarSize::Size64);
                                let v236 = C::value_regs_get(ctx, v233, 0x1);
                                let v1054 = constructor_mov_to_vec(
                                    ctx,
                                    v1053,
                                    v236,
                                    0x1,
                                    &VectorSize::Size64x2,
                                );
                                let v1055 = constructor_vec_cnt(ctx, v1054, &VectorSize::Size8x16);
                                let v1056 = constructor_addv(ctx, v1055, &VectorSize::Size8x16);
                                let v1057 =
                                    constructor_mov_from_vec(ctx, v1056, 0x0, &ScalarSize::Size8);
                                let v1058 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
                                let v1059 = C::value_regs(ctx, v1057, v1058);
                                let v1060 = C::output(ctx, v1059);
                                // Rule at src/isa/aarch64/lower.isle line 1799.
                                return Some(v1060);
                            }
                            I8X16 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v1061 = constructor_vec_cnt(ctx, v241, &VectorSize::Size8x16);
                                let v1062 = constructor_output_reg(ctx, v1061);
                                // Rule at src/isa/aarch64/lower.isle line 1807.
                                return Some(v1062);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Sqrt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v348 = C::ty_scalar_float(ctx, v3);
                        if let Some(v349) = v348 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v388 = &constructor_scalar_size(ctx, v349);
                            let v389 = constructor_fpu_rr(ctx, &FPUOp1::Sqrt, v241, v388);
                            let v390 = constructor_output_reg(ctx, v389);
                            // Rule at src/isa/aarch64/lower.isle line 423.
                            return Some(v390);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v313 = &constructor_vector_size(ctx, v3);
                            let v385 = constructor_vec_misc(ctx, &VecMisc2::Fsqrt, v241, v313);
                            let v386 = constructor_output_reg(ctx, v385);
                            // Rule at src/isa/aarch64/lower.isle line 420.
                            return Some(v386);
                        }
                    }
                }
                &Opcode::Fneg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v348 = C::ty_scalar_float(ctx, v3);
                        if let Some(v349) = v348 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v388 = &constructor_scalar_size(ctx, v349);
                            let v395 = constructor_fpu_rr(ctx, &FPUOp1::Neg, v241, v388);
                            let v396 = constructor_output_reg(ctx, v395);
                            // Rule at src/isa/aarch64/lower.isle line 431.
                            return Some(v396);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v313 = &constructor_vector_size(ctx, v3);
                            let v392 = constructor_vec_misc(ctx, &VecMisc2::Fneg, v241, v313);
                            let v393 = constructor_output_reg(ctx, v392);
                            // Rule at src/isa/aarch64/lower.isle line 428.
                            return Some(v393);
                        }
                    }
                }
                &Opcode::Fabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v348 = C::ty_scalar_float(ctx, v3);
                        if let Some(v349) = v348 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v388 = &constructor_scalar_size(ctx, v349);
                            let v401 = constructor_fpu_rr(ctx, &FPUOp1::Abs, v241, v388);
                            let v402 = constructor_output_reg(ctx, v401);
                            // Rule at src/isa/aarch64/lower.isle line 439.
                            return Some(v402);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v313 = &constructor_vector_size(ctx, v3);
                            let v398 = constructor_vec_misc(ctx, &VecMisc2::Fabs, v241, v313);
                            let v399 = constructor_output_reg(ctx, v398);
                            // Rule at src/isa/aarch64/lower.isle line 436.
                            return Some(v399);
                        }
                    }
                }
                &Opcode::Ceil => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v413 = constructor_fpu_round(ctx, &FpuRoundMode::Plus32, v241);
                                let v414 = constructor_output_reg(ctx, v413);
                                // Rule at src/isa/aarch64/lower.isle line 457.
                                return Some(v414);
                            }
                            F64 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v416 = constructor_fpu_round(ctx, &FpuRoundMode::Plus64, v241);
                                let v417 = constructor_output_reg(ctx, v416);
                                // Rule at src/isa/aarch64/lower.isle line 460.
                                return Some(v417);
                            }
                            _ => {}
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v313 = &constructor_vector_size(ctx, v3);
                            let v410 = constructor_vec_misc(ctx, &VecMisc2::Frintp, v241, v313);
                            let v411 = constructor_output_reg(ctx, v410);
                            // Rule at src/isa/aarch64/lower.isle line 454.
                            return Some(v411);
                        }
                    }
                }
                &Opcode::Floor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v422 = constructor_fpu_round(ctx, &FpuRoundMode::Minus32, v241);
                                let v423 = constructor_output_reg(ctx, v422);
                                // Rule at src/isa/aarch64/lower.isle line 468.
                                return Some(v423);
                            }
                            F64 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v425 = constructor_fpu_round(ctx, &FpuRoundMode::Minus64, v241);
                                let v426 = constructor_output_reg(ctx, v425);
                                // Rule at src/isa/aarch64/lower.isle line 471.
                                return Some(v426);
                            }
                            _ => {}
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v313 = &constructor_vector_size(ctx, v3);
                            let v419 = constructor_vec_misc(ctx, &VecMisc2::Frintm, v241, v313);
                            let v420 = constructor_output_reg(ctx, v419);
                            // Rule at src/isa/aarch64/lower.isle line 465.
                            return Some(v420);
                        }
                    }
                }
                &Opcode::Trunc => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v431 = constructor_fpu_round(ctx, &FpuRoundMode::Zero32, v241);
                                let v432 = constructor_output_reg(ctx, v431);
                                // Rule at src/isa/aarch64/lower.isle line 479.
                                return Some(v432);
                            }
                            F64 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v434 = constructor_fpu_round(ctx, &FpuRoundMode::Zero64, v241);
                                let v435 = constructor_output_reg(ctx, v434);
                                // Rule at src/isa/aarch64/lower.isle line 482.
                                return Some(v435);
                            }
                            _ => {}
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v313 = &constructor_vector_size(ctx, v3);
                            let v428 = constructor_vec_misc(ctx, &VecMisc2::Frintz, v241, v313);
                            let v429 = constructor_output_reg(ctx, v428);
                            // Rule at src/isa/aarch64/lower.isle line 476.
                            return Some(v429);
                        }
                    }
                }
                &Opcode::Nearest => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v440 =
                                    constructor_fpu_round(ctx, &FpuRoundMode::Nearest32, v241);
                                let v441 = constructor_output_reg(ctx, v440);
                                // Rule at src/isa/aarch64/lower.isle line 490.
                                return Some(v441);
                            }
                            F64 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v443 =
                                    constructor_fpu_round(ctx, &FpuRoundMode::Nearest64, v241);
                                let v444 = constructor_output_reg(ctx, v443);
                                // Rule at src/isa/aarch64/lower.isle line 493.
                                return Some(v444);
                            }
                            _ => {}
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v313 = &constructor_vector_size(ctx, v3);
                            let v437 = constructor_vec_misc(ctx, &VecMisc2::Frintn, v241, v313);
                            let v438 = constructor_output_reg(ctx, v437);
                            // Rule at src/isa/aarch64/lower.isle line 487.
                            return Some(v438);
                        }
                    }
                }
                &Opcode::IsNull => {
                    let v232 = C::value_type(ctx, v231);
                    let v1437 = &constructor_operand_size(ctx, v232);
                    let v571 = C::put_in_reg(ctx, v231);
                    let v1438 = C::u8_into_imm12(ctx, 0x0);
                    let v1439 = &constructor_cmp_imm(ctx, v1437, v571, v1438);
                    let v263 = &constructor_materialize_bool_result(ctx, &Cond::Eq);
                    let v1440 = constructor_with_flags(ctx, v1439, v263);
                    let v1441 = C::output(ctx, v1440);
                    // Rule at src/isa/aarch64/lower.isle line 2203.
                    return Some(v1441);
                }
                &Opcode::IsInvalid => {
                    let v232 = C::value_type(ctx, v231);
                    let v1437 = &constructor_operand_size(ctx, v232);
                    let v571 = C::put_in_reg(ctx, v231);
                    let v1442 = C::u8_into_imm12(ctx, 0x1);
                    let v1443 = &constructor_cmn_imm(ctx, v1437, v571, v1442);
                    let v263 = &constructor_materialize_bool_result(ctx, &Cond::Eq);
                    let v1444 = constructor_with_flags(ctx, v1443, v263);
                    let v1445 = C::output(ctx, v1444);
                    // Rule at src/isa/aarch64/lower.isle line 2209.
                    return Some(v1445);
                }
                &Opcode::ScalarToVector => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32X4 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v243 = constructor_fpu_extend(ctx, v241, &ScalarSize::Size32);
                                let v244 = constructor_output_reg(ctx, v243);
                                // Rule at src/isa/aarch64/lower.isle line 260.
                                return Some(v244);
                            }
                            F64X2 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v246 = constructor_fpu_extend(ctx, v241, &ScalarSize::Size64);
                                let v247 = constructor_output_reg(ctx, v246);
                                // Rule at src/isa/aarch64/lower.isle line 263.
                                return Some(v247);
                            }
                            _ => {}
                        }
                    }
                    let v232 = C::value_type(ctx, v231);
                    if v232 == I64 {
                        let v241 = C::put_in_reg(ctx, v231);
                        let v248 = constructor_mov_to_fpu(ctx, v241, &ScalarSize::Size64);
                        let v249 = constructor_output_reg(ctx, v248);
                        // Rule at src/isa/aarch64/lower.isle line 266.
                        return Some(v249);
                    }
                    let v250 = C::int_fits_in_32(ctx, v232);
                    if let Some(v251) = v250 {
                        let v252 = constructor_put_in_reg_zext32(ctx, v231);
                        let v253 = constructor_mov_to_fpu(ctx, v252, &ScalarSize::Size32);
                        let v254 = constructor_output_reg(ctx, v253);
                        // Rule at src/isa/aarch64/lower.isle line 269.
                        return Some(v254);
                    }
                }
                &Opcode::Bmask => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v233 = C::put_in_regs(ctx, v231);
                        let v3 = C::value_type(ctx, v2);
                        let v232 = C::value_type(ctx, v231);
                        let v1035 = constructor_lower_bmask(ctx, v3, v232, v233);
                        let v1036 = C::output(ctx, v1035);
                        // Rule at src/isa/aarch64/lower.isle line 1753.
                        return Some(v1036);
                    }
                }
                &Opcode::Ireduce => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1063 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v1064) = v1063 {
                            let v233 = C::put_in_regs(ctx, v231);
                            let v234 = C::value_regs_get(ctx, v233, 0x0);
                            let v1076 = constructor_output_reg(ctx, v234);
                            // Rule at src/isa/aarch64/lower.isle line 1826.
                            return Some(v1076);
                        }
                    }
                }
                &Opcode::SwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v241 = C::put_in_reg(ctx, v231);
                        let v3 = C::value_type(ctx, v2);
                        let v1417 = &constructor_lane_size(ctx, v3);
                        let v1418 =
                            constructor_vec_extend(ctx, &VecExtendOp::Sxtl, v241, false, v1417);
                        let v1419 = constructor_output_reg(ctx, v1418);
                        // Rule at src/isa/aarch64/lower.isle line 2168.
                        return Some(v1419);
                    }
                }
                &Opcode::SwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v559 = C::ty_vec128(ctx, v3);
                        if let Some(v560) = v559 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v1420 = &constructor_lane_size(ctx, v560);
                            let v1421 =
                                constructor_vec_extend(ctx, &VecExtendOp::Sxtl, v241, true, v1420);
                            let v1422 = constructor_output_reg(ctx, v1421);
                            // Rule at src/isa/aarch64/lower.isle line 2173.
                            return Some(v1422);
                        }
                        let v1231 = C::ty_vec64_ctor(ctx, v3);
                        if let Some(v1232) = v1231 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v1424 = constructor_fpu_move_from_vec(
                                ctx,
                                v241,
                                0x1,
                                &VectorSize::Size32x2,
                            );
                            let v1425 = &constructor_lane_size(ctx, v3);
                            let v1426 = constructor_vec_extend(
                                ctx,
                                &VecExtendOp::Sxtl,
                                v1424,
                                false,
                                v1425,
                            );
                            let v1427 = constructor_output_reg(ctx, v1426);
                            // Rule at src/isa/aarch64/lower.isle line 2176.
                            return Some(v1427);
                        }
                        let v241 = C::put_in_reg(ctx, v231);
                        let v1417 = &constructor_lane_size(ctx, v3);
                        let v1854 =
                            constructor_vec_extend(ctx, &VecExtendOp::Sxtl, v241, true, v1417);
                        let v1855 = constructor_output_reg(ctx, v1854);
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 92.
                        return Some(v1855);
                    }
                }
                &Opcode::UwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v241 = C::put_in_reg(ctx, v231);
                        let v3 = C::value_type(ctx, v2);
                        let v1417 = &constructor_lane_size(ctx, v3);
                        let v1429 =
                            constructor_vec_extend(ctx, &VecExtendOp::Uxtl, v241, false, v1417);
                        let v1430 = constructor_output_reg(ctx, v1429);
                        // Rule at src/isa/aarch64/lower.isle line 2183.
                        return Some(v1430);
                    }
                }
                &Opcode::UwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v559 = C::ty_vec128(ctx, v3);
                        if let Some(v560) = v559 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v1420 = &constructor_lane_size(ctx, v560);
                            let v1431 =
                                constructor_vec_extend(ctx, &VecExtendOp::Uxtl, v241, true, v1420);
                            let v1432 = constructor_output_reg(ctx, v1431);
                            // Rule at src/isa/aarch64/lower.isle line 2188.
                            return Some(v1432);
                        }
                        let v1231 = C::ty_vec64_ctor(ctx, v3);
                        if let Some(v1232) = v1231 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v1424 = constructor_fpu_move_from_vec(
                                ctx,
                                v241,
                                0x1,
                                &VectorSize::Size32x2,
                            );
                            let v1425 = &constructor_lane_size(ctx, v3);
                            let v1433 = constructor_vec_extend(
                                ctx,
                                &VecExtendOp::Uxtl,
                                v1424,
                                false,
                                v1425,
                            );
                            let v1434 = constructor_output_reg(ctx, v1433);
                            // Rule at src/isa/aarch64/lower.isle line 2191.
                            return Some(v1434);
                        }
                        let v241 = C::put_in_reg(ctx, v231);
                        let v1417 = &constructor_lane_size(ctx, v3);
                        let v1856 =
                            constructor_vec_extend(ctx, &VecExtendOp::Uxtl, v241, true, v1417);
                        let v1857 = constructor_output_reg(ctx, v1856);
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 97.
                        return Some(v1857);
                    }
                }
                &Opcode::Uextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v713 = C::def_inst(ctx, v231);
                        if let Some(v714) = v713 {
                            let v715 = &C::inst_data(ctx, v714);
                            match v715 {
                                &InstructionData::BinaryImm8 {
                                    opcode: ref v716,
                                    arg: v717,
                                    imm: v718,
                                } => {
                                    if let &Opcode::Extractlane = v716 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v27 = C::fits_in_64(ctx, v3);
                                        if let Some(v28) = v27 {
                                            let v721 = C::put_in_reg(ctx, v717);
                                            let v719 = C::value_type(ctx, v717);
                                            let v722 = &constructor_lane_size(ctx, v719);
                                            let v720 = C::u8_from_uimm8(ctx, v718);
                                            let v723 =
                                                constructor_mov_from_vec(ctx, v721, v720, v722);
                                            let v724 = constructor_output_reg(ctx, v723);
                                            // Rule at src/isa/aarch64/lower.isle line 1100.
                                            return Some(v724);
                                        }
                                        if v3 == I128 {
                                            let v721 = C::put_in_reg(ctx, v717);
                                            let v719 = C::value_type(ctx, v717);
                                            let v722 = &constructor_lane_size(ctx, v719);
                                            let v720 = C::u8_from_uimm8(ctx, v718);
                                            let v723 =
                                                constructor_mov_from_vec(ctx, v721, v720, v722);
                                            let v737 =
                                                constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
                                            let v738 = C::value_regs(ctx, v723, v737);
                                            let v739 = C::output(ctx, v738);
                                            // Rule at src/isa/aarch64/lower.isle line 1119.
                                            return Some(v739);
                                        }
                                    }
                                }
                                &InstructionData::LoadNoOffset {
                                    opcode: ref v725,
                                    arg: v726,
                                    flags: v727,
                                } => {
                                    if let &Opcode::AtomicLoad = v725 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v27 = C::fits_in_64(ctx, v3);
                                        if let Some(v28) = v27 {
                                            let v728 = C::is_sinkable_inst(ctx, v231);
                                            if let Some(v729) = v728 {
                                                let v730 = constructor_sink_atomic_load(ctx, v729);
                                                let v232 = C::value_type(ctx, v231);
                                                let v731 =
                                                    constructor_load_acquire(ctx, v232, v727, v730);
                                                let v732 = constructor_output_reg(ctx, v731);
                                                // Rule at src/isa/aarch64/lower.isle line 1107.
                                                return Some(v732);
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v733 = constructor_put_in_reg_zext64(ctx, v231);
                            let v734 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
                            let v735 = C::value_regs(ctx, v733, v734);
                            let v736 = C::output(ctx, v735);
                            // Rule at src/isa/aarch64/lower.isle line 1114.
                            return Some(v736);
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v232 = C::value_type(ctx, v231);
                            let v709 = C::ty_bits(ctx, v232);
                            let v710 = C::ty_bits(ctx, v28);
                            let v711 = constructor_extend(ctx, v241, false, v709, v710);
                            let v712 = constructor_output_reg(ctx, v711);
                            // Rule at src/isa/aarch64/lower.isle line 1095.
                            return Some(v712);
                        }
                    }
                }
                &Opcode::Sextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v713 = C::def_inst(ctx, v231);
                            if let Some(v714) = v713 {
                                let v715 = &C::inst_data(ctx, v714);
                                if let &InstructionData::BinaryImm8 {
                                    opcode: ref v716,
                                    arg: v717,
                                    imm: v718,
                                } = v715
                                {
                                    if let &Opcode::Extractlane = v716 {
                                        let v719 = C::value_type(ctx, v717);
                                        let v752 = C::not_i64x2(ctx, v719);
                                        if let Some(v753) = v752 {
                                            let v721 = C::put_in_reg(ctx, v717);
                                            let v742 = &constructor_vector_size(ctx, v719);
                                            let v754 = &constructor_size_from_ty(ctx, I64);
                                            let v720 = C::u8_from_uimm8(ctx, v718);
                                            let v755 = constructor_mov_from_vec_signed(
                                                ctx, v721, v720, v742, v754,
                                            );
                                            let v756 = C::imm_shift_from_u8(ctx, 0x3F);
                                            let v757 = constructor_asr_imm(ctx, I64, v755, v756);
                                            let v758 = C::value_regs(ctx, v755, v757);
                                            let v759 = C::output(ctx, v758);
                                            // Rule at src/isa/aarch64/lower.isle line 1152.
                                            return Some(v759);
                                        }
                                        if v719 == I64X2 {
                                            let v721 = C::put_in_reg(ctx, v717);
                                            let v720 = C::u8_from_uimm8(ctx, v718);
                                            let v760 = constructor_mov_from_vec(
                                                ctx,
                                                v721,
                                                v720,
                                                &ScalarSize::Size64,
                                            );
                                            let v761 = C::imm_shift_from_u8(ctx, 0x3F);
                                            let v762 = constructor_asr_imm(ctx, I64, v760, v761);
                                            let v763 = C::value_regs(ctx, v760, v762);
                                            let v764 = C::output(ctx, v763);
                                            // Rule at src/isa/aarch64/lower.isle line 1163.
                                            return Some(v764);
                                        }
                                    }
                                }
                            }
                            let v746 = constructor_put_in_reg_sext64(ctx, v231);
                            let v748 = C::imm_shift_from_u8(ctx, 0x3F);
                            let v749 = constructor_asr_imm(ctx, I64, v746, v748);
                            let v750 = C::value_regs(ctx, v746, v749);
                            let v751 = C::output(ctx, v750);
                            // Rule at src/isa/aarch64/lower.isle line 1142.
                            return Some(v751);
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v713 = C::def_inst(ctx, v231);
                            if let Some(v714) = v713 {
                                let v715 = &C::inst_data(ctx, v714);
                                if let &InstructionData::BinaryImm8 {
                                    opcode: ref v716,
                                    arg: v717,
                                    imm: v718,
                                } = v715
                                {
                                    if let &Opcode::Extractlane = v716 {
                                        let v721 = C::put_in_reg(ctx, v717);
                                        let v719 = C::value_type(ctx, v717);
                                        let v742 = &constructor_vector_size(ctx, v719);
                                        let v743 = &constructor_size_from_ty(ctx, v28);
                                        let v720 = C::u8_from_uimm8(ctx, v718);
                                        let v744 = constructor_mov_from_vec_signed(
                                            ctx, v721, v720, v742, v743,
                                        );
                                        let v745 = constructor_output_reg(ctx, v744);
                                        // Rule at src/isa/aarch64/lower.isle line 1133.
                                        return Some(v745);
                                    }
                                }
                            }
                            let v241 = C::put_in_reg(ctx, v231);
                            let v232 = C::value_type(ctx, v231);
                            let v709 = C::ty_bits(ctx, v232);
                            let v710 = C::ty_bits(ctx, v28);
                            let v740 = constructor_extend(ctx, v241, true, v709, v710);
                            let v741 = constructor_output_reg(ctx, v740);
                            // Rule at src/isa/aarch64/lower.isle line 1128.
                            return Some(v741);
                        }
                    }
                }
                &Opcode::Fpromote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F64 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v404 = constructor_fpu_rr(
                                ctx,
                                &FPUOp1::Cvt32To64,
                                v241,
                                &ScalarSize::Size32,
                            );
                            let v405 = constructor_output_reg(ctx, v404);
                            // Rule at src/isa/aarch64/lower.isle line 444.
                            return Some(v405);
                        }
                    }
                }
                &Opcode::Fdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F32 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v407 = constructor_fpu_rr(
                                ctx,
                                &FPUOp1::Cvt64To32,
                                v241,
                                &ScalarSize::Size64,
                            );
                            let v408 = constructor_output_reg(ctx, v407);
                            // Rule at src/isa/aarch64/lower.isle line 449.
                            return Some(v408);
                        }
                    }
                }
                &Opcode::Fvdemote => {
                    let v241 = C::put_in_reg(ctx, v231);
                    let v1385 = constructor_fcvtn(ctx, v241, &ScalarSize::Size32);
                    let v1386 = constructor_output_reg(ctx, v1385);
                    // Rule at src/isa/aarch64/lower.isle line 2117.
                    return Some(v1386);
                }
                &Opcode::FvpromoteLow => {
                    let v241 = C::put_in_reg(ctx, v231);
                    let v1789 = constructor_vec_rr_long(ctx, &VecRRLongOp::Fcvtl32, v241, false);
                    let v1790 = constructor_output_reg(ctx, v1789);
                    // Rule at src/isa/aarch64/lower.isle line 2826.
                    return Some(v1790);
                }
                &Opcode::FcvtToUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v232 = C::value_type(ctx, v231);
                        match v232 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v469 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F32ToU64,
                                        v241,
                                        false,
                                        F32,
                                        I64,
                                    );
                                    let v470 = constructor_output_reg(ctx, v469);
                                    // Rule at src/isa/aarch64/lower.isle line 565.
                                    return Some(v470);
                                }
                                let v318 = C::fits_in_32(ctx, v3);
                                if let Some(v319) = v318 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v466 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F32ToU32,
                                        v241,
                                        false,
                                        F32,
                                        v319,
                                    );
                                    let v467 = constructor_output_reg(ctx, v466);
                                    // Rule at src/isa/aarch64/lower.isle line 562.
                                    return Some(v467);
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v476 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F64ToU64,
                                        v241,
                                        false,
                                        F64,
                                        I64,
                                    );
                                    let v477 = constructor_output_reg(ctx, v476);
                                    // Rule at src/isa/aarch64/lower.isle line 571.
                                    return Some(v477);
                                }
                                let v318 = C::fits_in_32(ctx, v3);
                                if let Some(v319) = v318 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v473 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F64ToU32,
                                        v241,
                                        false,
                                        F64,
                                        v319,
                                    );
                                    let v474 = constructor_output_reg(ctx, v473);
                                    // Rule at src/isa/aarch64/lower.isle line 568.
                                    return Some(v474);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FcvtToSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v232 = C::value_type(ctx, v231);
                        match v232 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v482 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F32ToI64,
                                        v241,
                                        true,
                                        F32,
                                        I64,
                                    );
                                    let v483 = constructor_output_reg(ctx, v482);
                                    // Rule at src/isa/aarch64/lower.isle line 579.
                                    return Some(v483);
                                }
                                let v318 = C::fits_in_32(ctx, v3);
                                if let Some(v319) = v318 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v479 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F32ToI32,
                                        v241,
                                        true,
                                        F32,
                                        v319,
                                    );
                                    let v480 = constructor_output_reg(ctx, v479);
                                    // Rule at src/isa/aarch64/lower.isle line 576.
                                    return Some(v480);
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v488 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F64ToI64,
                                        v241,
                                        true,
                                        F64,
                                        I64,
                                    );
                                    let v489 = constructor_output_reg(ctx, v488);
                                    // Rule at src/isa/aarch64/lower.isle line 585.
                                    return Some(v489);
                                }
                                let v318 = C::fits_in_32(ctx, v3);
                                if let Some(v319) = v318 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v485 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F64ToI32,
                                        v241,
                                        true,
                                        F64,
                                        v319,
                                    );
                                    let v486 = constructor_output_reg(ctx, v485);
                                    // Rule at src/isa/aarch64/lower.isle line 582.
                                    return Some(v486);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FcvtToUintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v232 = C::value_type(ctx, v231);
                        match v232 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v527 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F32ToU64,
                                        v241,
                                        false,
                                        I64,
                                    );
                                    let v528 = constructor_output_reg(ctx, v527);
                                    // Rule at src/isa/aarch64/lower.isle line 639.
                                    return Some(v528);
                                }
                                let v318 = C::fits_in_32(ctx, v3);
                                if let Some(v319) = v318 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v525 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F32ToU32,
                                        v241,
                                        false,
                                        v319,
                                    );
                                    let v526 = constructor_output_reg(ctx, v525);
                                    // Rule at src/isa/aarch64/lower.isle line 636.
                                    return Some(v526);
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v531 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F64ToU64,
                                        v241,
                                        false,
                                        I64,
                                    );
                                    let v532 = constructor_output_reg(ctx, v531);
                                    // Rule at src/isa/aarch64/lower.isle line 645.
                                    return Some(v532);
                                }
                                let v318 = C::fits_in_32(ctx, v3);
                                if let Some(v319) = v318 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v529 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F64ToU32,
                                        v241,
                                        false,
                                        v319,
                                    );
                                    let v530 = constructor_output_reg(ctx, v529);
                                    // Rule at src/isa/aarch64/lower.isle line 642.
                                    return Some(v530);
                                }
                            }
                            _ => {}
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            match v118.0 {
                                0x20 => {
                                    let v255 = C::multi_lane(ctx, v232);
                                    if let Some(v256) = v255 {
                                        if v256.0 == 0x20 {
                                            let v241 = C::put_in_reg(ctx, v231);
                                            let v313 = &constructor_vector_size(ctx, v3);
                                            let v523 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Fcvtzu,
                                                v241,
                                                v313,
                                            );
                                            let v524 = constructor_output_reg(ctx, v523);
                                            // Rule at src/isa/aarch64/lower.isle line 630.
                                            return Some(v524);
                                        }
                                    }
                                }
                                0x40 => {
                                    let v255 = C::multi_lane(ctx, v232);
                                    if let Some(v256) = v255 {
                                        if v256.0 == 0x40 {
                                            let v241 = C::put_in_reg(ctx, v231);
                                            let v313 = &constructor_vector_size(ctx, v3);
                                            let v523 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Fcvtzu,
                                                v241,
                                                v313,
                                            );
                                            let v524 = constructor_output_reg(ctx, v523);
                                            // Rule at src/isa/aarch64/lower.isle line 633.
                                            return Some(v524);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::FcvtToSintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v232 = C::value_type(ctx, v231);
                        match v232 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v538 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F32ToI64,
                                        v241,
                                        true,
                                        I64,
                                    );
                                    let v539 = constructor_output_reg(ctx, v538);
                                    // Rule at src/isa/aarch64/lower.isle line 659.
                                    return Some(v539);
                                }
                                let v318 = C::fits_in_32(ctx, v3);
                                if let Some(v319) = v318 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v536 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F32ToI32,
                                        v241,
                                        true,
                                        v319,
                                    );
                                    let v537 = constructor_output_reg(ctx, v536);
                                    // Rule at src/isa/aarch64/lower.isle line 656.
                                    return Some(v537);
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v542 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F64ToI64,
                                        v241,
                                        true,
                                        I64,
                                    );
                                    let v543 = constructor_output_reg(ctx, v542);
                                    // Rule at src/isa/aarch64/lower.isle line 665.
                                    return Some(v543);
                                }
                                let v318 = C::fits_in_32(ctx, v3);
                                if let Some(v319) = v318 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v540 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F64ToI32,
                                        v241,
                                        true,
                                        v319,
                                    );
                                    let v541 = constructor_output_reg(ctx, v540);
                                    // Rule at src/isa/aarch64/lower.isle line 662.
                                    return Some(v541);
                                }
                            }
                            _ => {}
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            match v118.0 {
                                0x20 => {
                                    let v255 = C::multi_lane(ctx, v232);
                                    if let Some(v256) = v255 {
                                        if v256.0 == 0x20 {
                                            let v241 = C::put_in_reg(ctx, v231);
                                            let v313 = &constructor_vector_size(ctx, v3);
                                            let v534 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Fcvtzs,
                                                v241,
                                                v313,
                                            );
                                            let v535 = constructor_output_reg(ctx, v534);
                                            // Rule at src/isa/aarch64/lower.isle line 650.
                                            return Some(v535);
                                        }
                                    }
                                }
                                0x40 => {
                                    let v255 = C::multi_lane(ctx, v232);
                                    if let Some(v256) = v255 {
                                        if v256.0 == 0x40 {
                                            let v241 = C::put_in_reg(ctx, v231);
                                            let v313 = &constructor_vector_size(ctx, v3);
                                            let v534 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Fcvtzs,
                                                v241,
                                                v313,
                                            );
                                            let v535 = constructor_output_reg(ctx, v534);
                                            // Rule at src/isa/aarch64/lower.isle line 653.
                                            return Some(v535);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::FcvtFromUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v232 = C::value_type(ctx, v231);
                                if v232 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v502 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::U64ToF32, v241);
                                    let v503 = constructor_output_reg(ctx, v502);
                                    // Rule at src/isa/aarch64/lower.isle line 602.
                                    return Some(v503);
                                }
                                let v493 = C::fits_in_32(ctx, v232);
                                if let Some(v494) = v493 {
                                    let v252 = constructor_put_in_reg_zext32(ctx, v231);
                                    let v496 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::U32ToF32, v252);
                                    let v497 = constructor_output_reg(ctx, v496);
                                    // Rule at src/isa/aarch64/lower.isle line 596.
                                    return Some(v497);
                                }
                            }
                            F64 => {
                                let v232 = C::value_type(ctx, v231);
                                if v232 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v505 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::U64ToF64, v241);
                                    let v506 = constructor_output_reg(ctx, v505);
                                    // Rule at src/isa/aarch64/lower.isle line 605.
                                    return Some(v506);
                                }
                                let v493 = C::fits_in_32(ctx, v232);
                                if let Some(v494) = v493 {
                                    let v252 = constructor_put_in_reg_zext32(ctx, v231);
                                    let v499 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::U32ToF64, v252);
                                    let v500 = constructor_output_reg(ctx, v499);
                                    // Rule at src/isa/aarch64/lower.isle line 599.
                                    return Some(v500);
                                }
                            }
                            _ => {}
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            match v118.0 {
                                0x20 => {
                                    let v232 = C::value_type(ctx, v231);
                                    let v255 = C::multi_lane(ctx, v232);
                                    if let Some(v256) = v255 {
                                        if v256.0 == 0x20 {
                                            let v241 = C::put_in_reg(ctx, v231);
                                            let v313 = &constructor_vector_size(ctx, v3);
                                            let v491 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Ucvtf,
                                                v241,
                                                v313,
                                            );
                                            let v492 = constructor_output_reg(ctx, v491);
                                            // Rule at src/isa/aarch64/lower.isle line 590.
                                            return Some(v492);
                                        }
                                    }
                                }
                                0x40 => {
                                    let v232 = C::value_type(ctx, v231);
                                    let v255 = C::multi_lane(ctx, v232);
                                    if let Some(v256) = v255 {
                                        if v256.0 == 0x40 {
                                            let v241 = C::put_in_reg(ctx, v231);
                                            let v313 = &constructor_vector_size(ctx, v3);
                                            let v491 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Ucvtf,
                                                v241,
                                                v313,
                                            );
                                            let v492 = constructor_output_reg(ctx, v491);
                                            // Rule at src/isa/aarch64/lower.isle line 593.
                                            return Some(v492);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::FcvtFromSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v232 = C::value_type(ctx, v231);
                                if v232 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v517 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::I64ToF32, v241);
                                    let v518 = constructor_output_reg(ctx, v517);
                                    // Rule at src/isa/aarch64/lower.isle line 622.
                                    return Some(v518);
                                }
                                let v493 = C::fits_in_32(ctx, v232);
                                if let Some(v494) = v493 {
                                    let v320 = constructor_put_in_reg_sext32(ctx, v231);
                                    let v511 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::I32ToF32, v320);
                                    let v512 = constructor_output_reg(ctx, v511);
                                    // Rule at src/isa/aarch64/lower.isle line 616.
                                    return Some(v512);
                                }
                            }
                            F64 => {
                                let v232 = C::value_type(ctx, v231);
                                if v232 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v520 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::I64ToF64, v241);
                                    let v521 = constructor_output_reg(ctx, v520);
                                    // Rule at src/isa/aarch64/lower.isle line 625.
                                    return Some(v521);
                                }
                                let v493 = C::fits_in_32(ctx, v232);
                                if let Some(v494) = v493 {
                                    let v320 = constructor_put_in_reg_sext32(ctx, v231);
                                    let v514 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::I32ToF64, v320);
                                    let v515 = constructor_output_reg(ctx, v514);
                                    // Rule at src/isa/aarch64/lower.isle line 619.
                                    return Some(v515);
                                }
                            }
                            _ => {}
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            match v118.0 {
                                0x20 => {
                                    let v232 = C::value_type(ctx, v231);
                                    let v255 = C::multi_lane(ctx, v232);
                                    if let Some(v256) = v255 {
                                        if v256.0 == 0x20 {
                                            let v241 = C::put_in_reg(ctx, v231);
                                            let v313 = &constructor_vector_size(ctx, v3);
                                            let v508 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Scvtf,
                                                v241,
                                                v313,
                                            );
                                            let v509 = constructor_output_reg(ctx, v508);
                                            // Rule at src/isa/aarch64/lower.isle line 610.
                                            return Some(v509);
                                        }
                                    }
                                }
                                0x40 => {
                                    let v232 = C::value_type(ctx, v231);
                                    let v255 = C::multi_lane(ctx, v232);
                                    if let Some(v256) = v255 {
                                        if v256.0 == 0x40 {
                                            let v241 = C::put_in_reg(ctx, v231);
                                            let v313 = &constructor_vector_size(ctx, v3);
                                            let v508 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Scvtf,
                                                v241,
                                                v313,
                                            );
                                            let v509 = constructor_output_reg(ctx, v508);
                                            // Rule at src/isa/aarch64/lower.isle line 613.
                                            return Some(v509);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::Isplit => {
                    let v232 = C::value_type(ctx, v231);
                    if v232 == I128 {
                        let v233 = C::put_in_regs(ctx, v231);
                        let v234 = C::value_regs_get(ctx, v233, 0x0);
                        let v235 = C::value_reg(ctx, v234);
                        let v236 = C::value_regs_get(ctx, v233, 0x1);
                        let v237 = C::value_reg(ctx, v236);
                        let v238 = C::output_pair(ctx, v235, v237);
                        // Rule at src/isa/aarch64/lower.isle line 246.
                        return Some(v238);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryConst {
            opcode: ref v1223,
            constant_handle: v1224,
        } => {
            if let &Opcode::Vconst = v1223 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v1229 = C::u64_from_constant(ctx, v1224);
                    if let Some(v1230) = v1229 {
                        let v3 = C::value_type(ctx, v2);
                        let v1231 = C::ty_vec64_ctor(ctx, v3);
                        if let Some(v1232) = v1231 {
                            let v1233 = constructor_constant_f64(ctx, v1230);
                            let v1234 = constructor_output_reg(ctx, v1233);
                            // Rule at src/isa/aarch64/lower.isle line 1991.
                            return Some(v1234);
                        }
                    }
                    let v3 = C::value_type(ctx, v2);
                    let v559 = C::ty_vec128(ctx, v3);
                    if let Some(v560) = v559 {
                        let v1225 = C::u128_from_constant(ctx, v1224);
                        if let Some(v1226) = v1225 {
                            let v1227 = constructor_constant_f128(ctx, v1226);
                            let v1228 = constructor_output_reg(ctx, v1227);
                            // Rule at src/isa/aarch64/lower.isle line 1988.
                            return Some(v1228);
                        }
                    }
                }
            }
        }
        &InstructionData::UnaryGlobalValue {
            opcode: ref v1458,
            global_value: v1459,
        } => {
            match v1458 {
                &Opcode::SymbolValue => {
                    let v1460 = C::symbol_value_data(ctx, v1459);
                    if let Some(v1461) = v1460 {
                        let v1465 = C::box_external_name(ctx, v1461.0);
                        let v1466 = constructor_load_ext_name(ctx, v1465, v1461.2);
                        let v1467 = constructor_output_reg(ctx, v1466);
                        // Rule at src/isa/aarch64/lower.isle line 2225.
                        return Some(v1467);
                    }
                }
                &Opcode::TlsValue => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1460 = C::symbol_value_data(ctx, v1459);
                        if let Some(v1461) = v1460 {
                            let v3 = C::value_type(ctx, v2);
                            let v1783 = &C::tls_model(ctx, v3);
                            match v1783 {
                                &TlsModel::ElfGd => {
                                    let v1784 = constructor_elf_tls_get_addr(ctx, v1461.0);
                                    let v1785 = constructor_output_reg(ctx, v1784);
                                    // Rule at src/isa/aarch64/lower.isle line 2818.
                                    return Some(v1785);
                                }
                                &TlsModel::Macho => {
                                    let v1786 = constructor_macho_tls_get_addr(ctx, v1461.0);
                                    let v1787 = constructor_output_reg(ctx, v1786);
                                    // Rule at src/isa/aarch64/lower.isle line 2821.
                                    return Some(v1787);
                                }
                                _ => {}
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryIeee32 {
            opcode: ref v15,
            imm: v16,
        } => {
            if let &Opcode::F32const = v15 {
                let v17 = C::u32_from_ieee32(ctx, v16);
                let v18 = constructor_constant_f32(ctx, v17);
                let v19 = constructor_output_reg(ctx, v18);
                // Rule at src/isa/aarch64/lower.isle line 29.
                return Some(v19);
            }
        }
        &InstructionData::UnaryIeee64 {
            opcode: ref v20,
            imm: v21,
        } => {
            if let &Opcode::F64const = v20 {
                let v22 = C::u64_from_ieee64(ctx, v21);
                let v23 = constructor_constant_f64(ctx, v22);
                let v24 = constructor_output_reg(ctx, v23);
                // Rule at src/isa/aarch64/lower.isle line 34.
                return Some(v24);
            }
        }
        &InstructionData::UnaryImm {
            opcode: ref v5,
            imm: v6,
        } => {
            if let &Opcode::Iconst = v5 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v7 = C::u64_from_imm64(ctx, v6);
                    let v9 = constructor_imm(ctx, v3, &ImmExtend::Zero, v7);
                    let v10 = constructor_output_reg(ctx, v9);
                    // Rule at src/isa/aarch64/lower.isle line 19.
                    return Some(v10);
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term lower_branch.
pub fn constructor_lower_branch<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: &MachLabelSlice,
) -> Option<Unit> {
    let v1 = &C::inst_data(ctx, arg0);
    match v1 {
        &InstructionData::BranchTable {
            opcode: ref v84,
            arg: v85,
            table: v86,
        } => {
            if let &Opcode::BrTable = v84 {
                let v87 = C::jump_table_targets(ctx, arg1);
                if let Some(v88) = v87 {
                    let v91 = C::jump_table_size(ctx, &v88.1);
                    let v92 = C::targets_jt_space(ctx, &v88.1);
                    let v93 = &constructor_emit_island(ctx, v92);
                    let v94 = constructor_side_effect(ctx, v93);
                    let v95 = constructor_put_in_reg_zext32(ctx, v85);
                    let v96 = C::u32_as_u64(ctx, v91);
                    let v97 = constructor_br_table_impl(ctx, v96, v95, v88.0, &v88.1);
                    // Rule at src/isa/aarch64/lower.isle line 2876.
                    return Some(v97);
                }
            }
        }
        &InstructionData::Brif {
            opcode: ref v2,
            arg: v3,
            blocks: ref v4,
        } => {
            if let &Opcode::Brif = v2 {
                let v21 = C::two_targets(ctx, arg1);
                if let Some(v22) = v21 {
                    let v5 = C::maybe_uextend(ctx, v3);
                    if let Some(v6) = v5 {
                        let v7 = C::def_inst(ctx, v6);
                        if let Some(v8) = v7 {
                            let v9 = &C::inst_data(ctx, v8);
                            match v9 {
                                &InstructionData::FloatCompare {
                                    opcode: ref v35,
                                    args: ref v36,
                                    cond: ref v37,
                                } => {
                                    if let &Opcode::Fcmp = v35 {
                                        let v38 = C::unpack_value_array_2(ctx, v36);
                                        let v41 = C::value_type(ctx, v38.0);
                                        let v42 = C::ty_scalar_float(ctx, v41);
                                        if let Some(v43) = v42 {
                                            let v44 = &C::fp_cond_code(ctx, v37);
                                            let v45 = &constructor_scalar_size(ctx, v43);
                                            let v46 = C::put_in_reg(ctx, v38.0);
                                            let v47 = C::put_in_reg(ctx, v38.1);
                                            let v48 = &constructor_fpu_cmp(ctx, v45, v46, v47);
                                            let v49 = C::branch_target(ctx, v22.0);
                                            let v50 = C::branch_target(ctx, v22.1);
                                            let v51 = C::cond_br_cond(ctx, v44);
                                            let v52 = &constructor_cond_br(ctx, v49, v50, v51);
                                            let v53 =
                                                &constructor_with_flags_side_effect(ctx, v48, v52);
                                            let v54 = constructor_emit_side_effect(ctx, v53);
                                            // Rule at src/isa/aarch64/lower.isle line 2842.
                                            return Some(v54);
                                        }
                                    }
                                }
                                &InstructionData::IntCompare {
                                    opcode: ref v10,
                                    args: ref v11,
                                    cond: ref v12,
                                } => {
                                    if let &Opcode::Icmp = v10 {
                                        let v13 = C::unpack_value_array_2(ctx, v11);
                                        let v16 = C::value_type(ctx, v13.0);
                                        let v25 = &constructor_lower_icmp_into_flags(
                                            ctx, v12, v13.0, v13.1, v16,
                                        );
                                        let v26 = &constructor_flags_and_cc_cc(ctx, v25);
                                        let v27 = &C::cond_code(ctx, v26);
                                        let v28 = &constructor_flags_and_cc_flags(ctx, v25);
                                        let v29 = C::branch_target(ctx, v22.0);
                                        let v30 = C::branch_target(ctx, v22.1);
                                        let v31 = C::cond_br_cond(ctx, v27);
                                        let v32 = &constructor_cond_br(ctx, v29, v30, v31);
                                        let v33 =
                                            &constructor_with_flags_side_effect(ctx, v28, v32);
                                        let v34 = constructor_emit_side_effect(ctx, v33);
                                        // Rule at src/isa/aarch64/lower.isle line 2832.
                                        return Some(v34);
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    let v55 = C::value_type(ctx, v3);
                    if v55 == I128 {
                        let v56 = &constructor_flags_to_producesflags(ctx, v3);
                        let v57 = C::put_in_regs(ctx, v3);
                        let v59 = C::value_regs_get(ctx, v57, 0x0);
                        let v61 = C::value_regs_get(ctx, v57, 0x1);
                        let v63 = constructor_orr(ctx, I64, v59, v61);
                        let v49 = C::branch_target(ctx, v22.0);
                        let v50 = C::branch_target(ctx, v22.1);
                        let v64 = C::cond_br_not_zero(ctx, v63);
                        let v65 = &constructor_cond_br(ctx, v49, v50, v64);
                        let v66 = &constructor_with_flags_side_effect(ctx, v56, v65);
                        let v67 = constructor_emit_side_effect(ctx, v66);
                        // Rule at src/isa/aarch64/lower.isle line 2850.
                        return Some(v67);
                    }
                    let v68 = C::ty_int_ref_scalar_64(ctx, v55);
                    if let Some(v69) = v68 {
                        let v56 = &constructor_flags_to_producesflags(ctx, v3);
                        let v70 = constructor_put_in_reg_zext64(ctx, v3);
                        let v71 = C::branch_target(ctx, v22.0);
                        let v72 = C::branch_target(ctx, v22.1);
                        let v73 = C::cond_br_not_zero(ctx, v70);
                        let v74 = &constructor_cond_br(ctx, v71, v72, v73);
                        let v75 = &constructor_with_flags_side_effect(ctx, v56, v74);
                        let v76 = constructor_emit_side_effect(ctx, v75);
                        // Rule at src/isa/aarch64/lower.isle line 2859.
                        return Some(v76);
                    }
                }
            }
        }
        &InstructionData::Jump {
            opcode: ref v77,
            destination: v78,
        } => {
            if let &Opcode::Jump = v77 {
                let v79 = C::single_target(ctx, arg1);
                if let Some(v80) = v79 {
                    let v81 = C::branch_target(ctx, v80);
                    let v82 = &constructor_aarch64_jump(ctx, v81);
                    let v83 = constructor_emit_side_effect(ctx, v82);
                    // Rule at src/isa/aarch64/lower.isle line 2869.
                    return Some(v83);
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term lower_fmla.
pub fn constructor_lower_fmla<C: Context>(
    ctx: &mut C,
    arg0: &VecALUModOp,
    arg1: Value,
    arg2: Value,
    arg3: Value,
    arg4: &VectorSize,
) -> Reg {
    let v18 = C::def_inst(ctx, arg2);
    if let Some(v19) = v18 {
        let v20 = &C::inst_data(ctx, v19);
        if let &InstructionData::Unary {
            opcode: ref v21,
            arg: v22,
        } = v20
        {
            if let &Opcode::Fneg = v21 {
                let v85 = &constructor_neg_fmla(ctx, arg0);
                let v87 = constructor_lower_fmla(ctx, v85, arg1, v22, arg3, arg4);
                // Rule at src/isa/aarch64/lower.isle line 548.
                return v87;
            }
        }
    }
    let v9 = C::def_inst(ctx, arg1);
    if let Some(v10) = v9 {
        let v11 = &C::inst_data(ctx, v10);
        if let &InstructionData::Unary {
            opcode: ref v12,
            arg: v13,
        } = v11
        {
            if let &Opcode::Fneg = v12 {
                let v85 = &constructor_neg_fmla(ctx, arg0);
                let v86 = constructor_lower_fmla(ctx, v85, v13, arg2, arg3, arg4);
                // Rule at src/isa/aarch64/lower.isle line 546.
                return v86;
            }
        }
    }
    match arg4 {
        &VectorSize::Size32x4 => {
            if let Some(v19) = v18 {
                let v20 = &C::inst_data(ctx, v19);
                if let &InstructionData::LoadNoOffset {
                    opcode: ref v48,
                    arg: v49,
                    flags: v50,
                } = v20
                {
                    if let &Opcode::Bitcast = v48 {
                        let v51 = C::def_inst(ctx, v49);
                        if let Some(v52) = v51 {
                            let v53 = &C::inst_data(ctx, v52);
                            if let &InstructionData::Shuffle {
                                opcode: ref v54,
                                args: ref v55,
                                imm: v56,
                            } = v53
                            {
                                if let &Opcode::Shuffle = v54 {
                                    let v60 = C::shuffle32_from_imm(ctx, v56);
                                    if let Some(v61) = v60 {
                                        let v66 = C::u8_as_u64(ctx, v61.0);
                                        let v67 = C::u64_lt(ctx, v66, 0x4);
                                        if v67 == true {
                                            let v57 = C::unpack_value_array_2(ctx, v55);
                                            if v57.0 == v57.1 {
                                                if v61.0 == v61.1 {
                                                    if v61.0 == v61.2 {
                                                        if v61.0 == v61.3 {
                                                            let v5 = C::put_in_reg(ctx, arg3);
                                                            let v6 = C::put_in_reg(ctx, arg1);
                                                            let v68 = C::put_in_reg(ctx, v57.0);
                                                            let v69 = constructor_vec_fmla_elem(
                                                                ctx, arg0, v5, v6, v68, arg4, v61.0,
                                                            );
                                                            // Rule at src/isa/aarch64/lower.isle line 530.
                                                            return v69;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if let Some(v10) = v9 {
                let v11 = &C::inst_data(ctx, v10);
                if let &InstructionData::LoadNoOffset {
                    opcode: ref v25,
                    arg: v26,
                    flags: v27,
                } = v11
                {
                    if let &Opcode::Bitcast = v25 {
                        let v28 = C::def_inst(ctx, v26);
                        if let Some(v29) = v28 {
                            let v30 = &C::inst_data(ctx, v29);
                            if let &InstructionData::Shuffle {
                                opcode: ref v31,
                                args: ref v32,
                                imm: v33,
                            } = v30
                            {
                                if let &Opcode::Shuffle = v31 {
                                    let v37 = C::shuffle32_from_imm(ctx, v33);
                                    if let Some(v38) = v37 {
                                        let v43 = C::u8_as_u64(ctx, v38.0);
                                        let v45 = C::u64_lt(ctx, v43, 0x4);
                                        if v45 == true {
                                            let v34 = C::unpack_value_array_2(ctx, v32);
                                            if v34.0 == v34.1 {
                                                if v38.0 == v38.1 {
                                                    if v38.0 == v38.2 {
                                                        if v38.0 == v38.3 {
                                                            let v5 = C::put_in_reg(ctx, arg3);
                                                            let v14 = C::put_in_reg(ctx, arg2);
                                                            let v46 = C::put_in_reg(ctx, v34.0);
                                                            let v47 = constructor_vec_fmla_elem(
                                                                ctx, arg0, v5, v14, v46, arg4,
                                                                v38.0,
                                                            );
                                                            // Rule at src/isa/aarch64/lower.isle line 527.
                                                            return v47;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        &VectorSize::Size64x2 => {
            if let Some(v19) = v18 {
                let v20 = &C::inst_data(ctx, v19);
                if let &InstructionData::LoadNoOffset {
                    opcode: ref v48,
                    arg: v49,
                    flags: v50,
                } = v20
                {
                    if let &Opcode::Bitcast = v48 {
                        let v51 = C::def_inst(ctx, v49);
                        if let Some(v52) = v51 {
                            let v53 = &C::inst_data(ctx, v52);
                            if let &InstructionData::Shuffle {
                                opcode: ref v54,
                                args: ref v55,
                                imm: v56,
                            } = v53
                            {
                                if let &Opcode::Shuffle = v54 {
                                    let v78 = C::shuffle64_from_imm(ctx, v56);
                                    if let Some(v79) = v78 {
                                        let v82 = C::u8_as_u64(ctx, v79.0);
                                        let v83 = C::u64_lt(ctx, v82, 0x2);
                                        if v83 == true {
                                            let v57 = C::unpack_value_array_2(ctx, v55);
                                            if v57.0 == v57.1 {
                                                if v79.0 == v79.1 {
                                                    let v5 = C::put_in_reg(ctx, arg3);
                                                    let v6 = C::put_in_reg(ctx, arg1);
                                                    let v68 = C::put_in_reg(ctx, v57.0);
                                                    let v84 = constructor_vec_fmla_elem(
                                                        ctx, arg0, v5, v6, v68, arg4, v79.0,
                                                    );
                                                    // Rule at src/isa/aarch64/lower.isle line 536.
                                                    return v84;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if let Some(v10) = v9 {
                let v11 = &C::inst_data(ctx, v10);
                if let &InstructionData::LoadNoOffset {
                    opcode: ref v25,
                    arg: v26,
                    flags: v27,
                } = v11
                {
                    if let &Opcode::Bitcast = v25 {
                        let v28 = C::def_inst(ctx, v26);
                        if let Some(v29) = v28 {
                            let v30 = &C::inst_data(ctx, v29);
                            if let &InstructionData::Shuffle {
                                opcode: ref v31,
                                args: ref v32,
                                imm: v33,
                            } = v30
                            {
                                if let &Opcode::Shuffle = v31 {
                                    let v70 = C::shuffle64_from_imm(ctx, v33);
                                    if let Some(v71) = v70 {
                                        let v74 = C::u8_as_u64(ctx, v71.0);
                                        let v76 = C::u64_lt(ctx, v74, 0x2);
                                        if v76 == true {
                                            let v34 = C::unpack_value_array_2(ctx, v32);
                                            if v34.0 == v34.1 {
                                                if v71.0 == v71.1 {
                                                    let v5 = C::put_in_reg(ctx, arg3);
                                                    let v14 = C::put_in_reg(ctx, arg2);
                                                    let v46 = C::put_in_reg(ctx, v34.0);
                                                    let v77 = constructor_vec_fmla_elem(
                                                        ctx, arg0, v5, v14, v46, arg4, v71.0,
                                                    );
                                                    // Rule at src/isa/aarch64/lower.isle line 533.
                                                    return v77;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        _ => {}
    }
    if let Some(v19) = v18 {
        let v20 = &C::inst_data(ctx, v19);
        if let &InstructionData::Unary {
            opcode: ref v21,
            arg: v22,
        } = v20
        {
            if let &Opcode::Splat = v21 {
                let v5 = C::put_in_reg(ctx, arg3);
                let v6 = C::put_in_reg(ctx, arg1);
                let v23 = C::put_in_reg(ctx, v22);
                let v24 = constructor_vec_fmla_elem(ctx, arg0, v5, v6, v23, arg4, 0x0);
                // Rule at src/isa/aarch64/lower.isle line 517.
                return v24;
            }
        }
    }
    if let Some(v10) = v9 {
        let v11 = &C::inst_data(ctx, v10);
        if let &InstructionData::Unary {
            opcode: ref v12,
            arg: v13,
        } = v11
        {
            if let &Opcode::Splat = v12 {
                let v5 = C::put_in_reg(ctx, arg3);
                let v14 = C::put_in_reg(ctx, arg2);
                let v15 = C::put_in_reg(ctx, v13);
                let v17 = constructor_vec_fmla_elem(ctx, arg0, v5, v14, v15, arg4, 0x0);
                // Rule at src/isa/aarch64/lower.isle line 515.
                return v17;
            }
        }
    }
    let v5 = C::put_in_reg(ctx, arg3);
    let v6 = C::put_in_reg(ctx, arg1);
    let v7 = C::put_in_reg(ctx, arg2);
    let v8 = constructor_vec_rrr_mod(ctx, arg0, v5, v6, v7, arg4);
    // Rule at src/isa/aarch64/lower.isle line 510.
    return v8;
}

// Generated as internal constructor for term neg_fmla.
pub fn constructor_neg_fmla<C: Context>(ctx: &mut C, arg0: &VecALUModOp) -> VecALUModOp {
    match arg0 {
        &VecALUModOp::Fmla => {
            // Rule at src/isa/aarch64/lower.isle line 552.
            return VecALUModOp::Fmls;
        }
        &VecALUModOp::Fmls => {
            // Rule at src/isa/aarch64/lower.isle line 553.
            return VecALUModOp::Fmla;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "neg_fmla", "src/isa/aarch64/lower.isle line 551"
    )
}

// Generated as internal constructor for term put_nonzero_in_reg_zext64.
pub fn constructor_put_nonzero_in_reg_zext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v4 = C::def_inst(ctx, arg0);
    if let Some(v5) = v4 {
        let v6 = &C::inst_data(ctx, v5);
        if let &InstructionData::UnaryImm {
            opcode: ref v7,
            imm: v8,
        } = v6
        {
            if let &Opcode::Iconst = v7 {
                let v9 = C::nonzero_u64_from_imm64(ctx, v8);
                if let Some(v10) = v9 {
                    let v3 = C::value_type(ctx, arg0);
                    let v12 = constructor_imm(ctx, v3, &ImmExtend::Zero, v10);
                    // Rule at src/isa/aarch64/lower.isle line 960.
                    return v12;
                }
            }
        }
    }
    let v1 = constructor_put_in_reg_zext64(ctx, arg0);
    let v2 = constructor_trap_if_zero_divisor(ctx, v1);
    // Rule at src/isa/aarch64/lower.isle line 955.
    return v2;
}

// Generated as internal constructor for term put_nonzero_in_reg_sext64.
pub fn constructor_put_nonzero_in_reg_sext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v4 = C::def_inst(ctx, arg0);
    if let Some(v5) = v4 {
        let v6 = &C::inst_data(ctx, v5);
        if let &InstructionData::UnaryImm {
            opcode: ref v7,
            imm: v8,
        } = v6
        {
            if let &Opcode::Iconst = v7 {
                let v9 = C::nonzero_u64_from_imm64(ctx, v8);
                if let Some(v10) = v9 {
                    let v3 = C::value_type(ctx, arg0);
                    let v12 = constructor_imm(ctx, v3, &ImmExtend::Sign, v10);
                    // Rule at src/isa/aarch64/lower.isle line 1003.
                    return v12;
                }
            }
        }
    }
    let v1 = constructor_put_in_reg_sext64(ctx, arg0);
    let v2 = constructor_trap_if_zero_divisor(ctx, v1);
    // Rule at src/isa/aarch64/lower.isle line 998.
    return v2;
}

// Generated as internal constructor for term cmp_and_choose.
pub fn constructor_cmp_and_choose<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: bool,
    arg3: Value,
    arg4: Value,
) -> ValueRegs {
    let v14 = C::fits_in_16(ctx, arg0);
    if let Some(v15) = v14 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v16 = C::ty_bits(ctx, v15);
        let v18 = constructor_extend(ctx, v7, arg2, v16, 0x20);
        let v19 = C::put_in_reg(ctx, arg4);
        let v20 = constructor_extend(ctx, v19, arg2, v16, 0x20);
        let v21 = &constructor_operand_size(ctx, v15);
        let v22 = &constructor_cmp(ctx, v21, v18, v20);
        let v23 = &constructor_csel(ctx, arg1, v18, v20);
        let v24 = constructor_with_flags_reg(ctx, v22, v23);
        let v25 = C::value_reg(ctx, v24);
        // Rule at src/isa/aarch64/lower.isle line 1050.
        return v25;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v8 = C::put_in_reg(ctx, arg4);
        let v9 = &constructor_operand_size(ctx, v2);
        let v10 = &constructor_cmp(ctx, v9, v7, v8);
        let v11 = &constructor_csel(ctx, arg1, v7, v8);
        let v12 = constructor_with_flags_reg(ctx, v10, v11);
        let v13 = C::value_reg(ctx, v12);
        // Rule at src/isa/aarch64/lower.isle line 1042.
        return v13;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_and_choose", "src/isa/aarch64/lower.isle line 1041"
    )
}

// Generated as internal constructor for term lower_shl128.
pub fn constructor_lower_shl128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: Reg) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0);
    let v5 = C::value_regs_get(ctx, arg0, 0x1);
    let v7 = constructor_lsl(ctx, I64, v3, arg1);
    let v8 = constructor_lsl(ctx, I64, v5, arg1);
    let v10 = C::zero_reg(ctx);
    let v11 = constructor_orr_not(ctx, I32, v10, arg1);
    let v13 = C::imm_shift_from_u8(ctx, 0x1);
    let v14 = constructor_lsr_imm(ctx, I64, v3, v13);
    let v15 = constructor_lsr(ctx, I64, v14, v11);
    let v16 = constructor_orr(ctx, I64, v8, v15);
    let v18 = C::u64_into_imm_logic(ctx, I64, 0x40);
    let v19 = &constructor_tst_imm(ctx, I64, arg1, v18);
    let v21 = C::zero_reg(ctx);
    let v22 = &constructor_csel(ctx, &Cond::Ne, v21, v7);
    let v23 = &constructor_csel(ctx, &Cond::Ne, v7, v16);
    let v24 = &constructor_consumes_flags_concat(ctx, v22, v23);
    let v25 = constructor_with_flags(ctx, v19, v24);
    // Rule at src/isa/aarch64/lower.isle line 1302.
    return v25;
}

// Generated as internal constructor for term do_shift.
pub fn constructor_do_shift<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Value,
) -> Reg {
    let v16 = C::def_inst(ctx, arg3);
    if let Some(v17) = v16 {
        let v18 = &C::inst_data(ctx, v17);
        if let &InstructionData::UnaryImm {
            opcode: ref v19,
            imm: v20,
        } = v18
        {
            if let &Opcode::Iconst = v19 {
                let v21 = C::imm_shift_from_imm64(ctx, arg1, v20);
                if let Some(v22) = v21 {
                    let v23 = constructor_alu_rr_imm_shift(ctx, arg0, arg1, arg2, v22);
                    // Rule at src/isa/aarch64/lower.isle line 1365.
                    return v23;
                }
            }
        }
    }
    match arg1 {
        I32 => {
            let v6 = C::put_in_regs(ctx, arg3);
            let v8 = C::value_regs_get(ctx, v6, 0x0);
            let v13 = constructor_alu_rrr(ctx, arg0, I32, arg2, v8);
            // Rule at src/isa/aarch64/lower.isle line 1356.
            return v13;
        }
        I64 => {
            let v6 = C::put_in_regs(ctx, arg3);
            let v8 = C::value_regs_get(ctx, v6, 0x0);
            let v15 = constructor_alu_rrr(ctx, arg0, I64, arg2, v8);
            // Rule at src/isa/aarch64/lower.isle line 1357.
            return v15;
        }
        _ => {}
    }
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = C::put_in_regs(ctx, arg3);
        let v8 = C::value_regs_get(ctx, v6, 0x0);
        let v10 = C::shift_mask(ctx, v3);
        let v11 = constructor_and_imm(ctx, I32, v8, v10);
        let v12 = constructor_alu_rrr(ctx, arg0, I32, arg2, v11);
        // Rule at src/isa/aarch64/lower.isle line 1347.
        return v12;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "do_shift", "src/isa/aarch64/lower.isle line 1336"
    )
}

// Generated as internal constructor for term lower_ushr128.
pub fn constructor_lower_ushr128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: Reg) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0);
    let v5 = C::value_regs_get(ctx, arg0, 0x1);
    let v7 = constructor_lsr(ctx, I64, v3, arg1);
    let v8 = constructor_lsr(ctx, I64, v5, arg1);
    let v10 = C::zero_reg(ctx);
    let v11 = constructor_orr_not(ctx, I32, v10, arg1);
    let v13 = C::imm_shift_from_u8(ctx, 0x1);
    let v14 = constructor_lsl_imm(ctx, I64, v5, v13);
    let v15 = constructor_lsl(ctx, I64, v14, v11);
    let v16 = constructor_orr(ctx, I64, v7, v15);
    let v18 = C::u64_into_imm_logic(ctx, I64, 0x40);
    let v19 = &constructor_tst_imm(ctx, I64, arg1, v18);
    let v21 = &constructor_csel(ctx, &Cond::Ne, v8, v16);
    let v22 = C::zero_reg(ctx);
    let v23 = &constructor_csel(ctx, &Cond::Ne, v22, v8);
    let v24 = &constructor_consumes_flags_concat(ctx, v21, v23);
    let v25 = constructor_with_flags(ctx, v19, v24);
    // Rule at src/isa/aarch64/lower.isle line 1409.
    return v25;
}

// Generated as internal constructor for term lower_sshr128.
pub fn constructor_lower_sshr128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: Reg) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0);
    let v5 = C::value_regs_get(ctx, arg0, 0x1);
    let v7 = constructor_lsr(ctx, I64, v3, arg1);
    let v8 = constructor_asr(ctx, I64, v5, arg1);
    let v10 = C::zero_reg(ctx);
    let v11 = constructor_orr_not(ctx, I32, v10, arg1);
    let v13 = C::imm_shift_from_u8(ctx, 0x1);
    let v14 = constructor_lsl_imm(ctx, I64, v5, v13);
    let v15 = constructor_lsl(ctx, I64, v14, v11);
    let v17 = C::imm_shift_from_u8(ctx, 0x3F);
    let v18 = constructor_asr_imm(ctx, I64, v5, v17);
    let v19 = constructor_orr(ctx, I64, v7, v15);
    let v21 = C::u64_into_imm_logic(ctx, I64, 0x40);
    let v22 = &constructor_tst_imm(ctx, I64, arg1, v21);
    let v24 = &constructor_csel(ctx, &Cond::Ne, v8, v19);
    let v25 = &constructor_csel(ctx, &Cond::Ne, v18, v8);
    let v26 = &constructor_consumes_flags_concat(ctx, v24, v25);
    let v27 = constructor_with_flags(ctx, v22, v26);
    // Rule at src/isa/aarch64/lower.isle line 1468.
    return v27;
}

// Generated as internal constructor for term small_rotr.
pub fn constructor_small_rotr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = C::rotr_mask(ctx, arg0);
    let v5 = constructor_and_imm(ctx, I32, arg2, v4);
    let v6 = C::ty_bits(ctx, arg0);
    let v7 = C::u8_into_imm12(ctx, v6);
    let v8 = constructor_sub_imm(ctx, I32, v5, v7);
    let v9 = C::zero_reg(ctx);
    let v10 = constructor_sub(ctx, I32, v9, v8);
    let v11 = constructor_lsr(ctx, I32, arg1, v5);
    let v12 = constructor_lsl(ctx, I32, arg1, v10);
    let v13 = constructor_orr(ctx, I32, v12, v11);
    // Rule at src/isa/aarch64/lower.isle line 1587.
    return v13;
}

// Generated as internal constructor for term small_rotr_imm.
pub fn constructor_small_rotr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmShift,
) -> Reg {
    let v4 = constructor_lsr_imm(ctx, I32, arg1, arg2);
    let v5 = C::rotr_opposite_amount(ctx, arg0, arg2);
    let v6 = constructor_lsl_imm(ctx, I32, arg1, v5);
    let v7 = constructor_orr(ctx, I32, v6, v4);
    // Rule at src/isa/aarch64/lower.isle line 1608.
    return v7;
}

// Generated as internal constructor for term lower_clz128.
pub fn constructor_lower_clz128<C: Context>(ctx: &mut C, arg0: ValueRegs) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x1);
    let v4 = constructor_a64_clz(ctx, I64, v3);
    let v6 = C::value_regs_get(ctx, arg0, 0x0);
    let v7 = constructor_a64_clz(ctx, I64, v6);
    let v9 = C::imm_shift_from_u8(ctx, 0x6);
    let v10 = constructor_lsr_imm(ctx, I64, v4, v9);
    let v11 = constructor_madd(ctx, I64, v7, v10, v4);
    let v14 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
    let v15 = C::value_regs(ctx, v11, v14);
    // Rule at src/isa/aarch64/lower.isle line 1673.
    return v15;
}

// Generated as internal constructor for term put_in_reg_ext32.
pub fn constructor_put_in_reg_ext32<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: &ArgumentExtension,
) -> Reg {
    match arg1 {
        &ArgumentExtension::Uext => {
            let v3 = constructor_put_in_reg_zext32(ctx, arg0);
            // Rule at src/isa/aarch64/lower.isle line 2578.
            return v3;
        }
        &ArgumentExtension::Sext => {
            let v2 = constructor_put_in_reg_sext32(ctx, arg0);
            // Rule at src/isa/aarch64/lower.isle line 2576.
            return v2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_ext32", "src/isa/aarch64/lower.isle line 2575"
    )
}

// Generated as internal constructor for term overflow_op_small.
pub fn constructor_overflow_op_small<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: &ArgumentExtension,
    arg4: &ALUOp,
) -> InstOutput {
    let v5 = &constructor_lower_extend_op(ctx, arg0, arg3);
    let v6 = constructor_put_in_reg_ext32(ctx, arg1, arg3);
    let v7 = C::put_in_reg(ctx, arg2);
    let v8 = constructor_alu_rrr_extend(ctx, arg4, arg0, v6, v7, v5);
    let v10 = &constructor_cmp_extend(ctx, &OperandSize::Size32, v8, v8, v5);
    let v12 = &constructor_cset(ctx, &Cond::Ne);
    let v13 = constructor_with_flags_reg(ctx, v10, v12);
    let v14 = C::value_reg(ctx, v8);
    let v15 = C::value_reg(ctx, v13);
    let v16 = C::output_pair(ctx, v14, v15);
    // Rule at src/isa/aarch64/lower.isle line 2584.
    return v16;
}

// Generated as internal constructor for term overflow_op_normal.
pub fn constructor_overflow_op_normal<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: &ALUOp,
    arg4: &Cond,
) -> InstOutput {
    let v5 = C::put_in_reg(ctx, arg1);
    let v6 = C::put_in_reg(ctx, arg2);
    let v7 = &constructor_alu_rrr_with_flags_paired(ctx, arg0, v5, v6, arg3);
    let v8 = &constructor_cset_paired(ctx, arg4);
    let v9 = constructor_with_flags(ctx, v7, v8);
    let v11 = C::value_regs_get(ctx, v9, 0x0);
    let v12 = C::value_reg(ctx, v11);
    let v14 = C::value_regs_get(ctx, v9, 0x1);
    let v15 = C::value_reg(ctx, v14);
    let v16 = C::output_pair(ctx, v12, v15);
    // Rule at src/isa/aarch64/lower.isle line 2613.
    return v16;
}

// Generated as internal constructor for term overflow_op_128.
pub fn constructor_overflow_op_128<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
    arg2: &ALUOp,
    arg3: &ALUOp,
    arg4: &Cond,
) -> InstOutput {
    let v5 = C::put_in_regs(ctx, arg0);
    let v7 = C::value_regs_get(ctx, v5, 0x0);
    let v9 = C::value_regs_get(ctx, v5, 0x1);
    let v10 = C::put_in_regs(ctx, arg1);
    let v11 = C::value_regs_get(ctx, v10, 0x0);
    let v12 = C::value_regs_get(ctx, v10, 0x1);
    let v14 = &constructor_alu_rrr_with_flags_paired(ctx, I64, v7, v11, arg2);
    let v15 = &constructor_alu_rrr_with_flags_chained(ctx, I64, v9, v12, arg3);
    let v16 = &constructor_cset_paired(ctx, arg4);
    let v17 = &constructor_with_flags_chained(ctx, v14, v15, v16);
    let v18 = constructor_multi_reg_to_pair_and_single(ctx, v17);
    // Rule at src/isa/aarch64/lower.isle line 2624.
    return v18;
}
